[
  {
    "languageGrammar" : "JavaScript",
    "modified_latitude" : 38.638519372238086,
    "modified_at" : "2019-01-14T00:41:00Z",
    "flagged" : false,
    "created_at" : "2019-01-14T00:36:26Z",
    "modified_longitude" : -90.031874123356886,
    "content" : "on ! # @ = \/\/ + @#*=@#https:\/\/kapeli.com\/docsets#javadoc \/var if () {\n\n} \/\/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\", \"\", \"\",…];\n\nvar p = Prompt.create();\np.title = \"\";\np.message = \"\";\nfor (i = 0; i < lists.length; i++) {\n  p.addButton(lists[i]);\n  p.addTextField(\"fieldName\", \"Label\", \"\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\", \"\", \"\",…];\n\nvar p = Prompt.create();\np.title = \"\";\np.message = \"\";\nfor (i = 0; i < lists.length; i++) {\n  p.addButton(lists[i]);\n  p.addTextField(\"fieldName\", \"Label\", \"\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\"{",
    "folder" : 0,
    "tags" : [

    ],
    "created_longitude" : -90.0322674488405,
    "created_latitude" : 38.638235876494491,
    "accessed_at" : "2019-01-15T01:58:24Z",
    "uuid" : "87136918-3B57-4C18-908C-15D0363F489C"
  },
  {
    "created_at" : "2019-01-14T10:25:25Z",
    "content" : "SyntaxError\n> ",
    "languageGrammar" : "JavaScript",
    "created_longitude" : -90.031974355137862,
    "tags" : [
      "personal"
    ],
    "modified_latitude" : 38.638425154618837,
    "created_latitude" : 38.638582272417565,
    "modified_at" : "2019-01-15T05:46:49Z",
    "modified_longitude" : -90.031864637678524,
    "uuid" : "CE8A6A97-2552-44BC-8258-BB6DB98F0643",
    "folder" : 0,
    "flagged" : true,
    "accessed_at" : "2019-01-15T05:04:44Z"
  },
  {
    "created_longitude" : -90.05239472774457,
    "modified_at" : "2019-01-14T13:25:32Z",
    "modified_latitude" : 38.61350778493901,
    "created_latitude" : 38.59726517843621,
    "tags" : [
      "js",
      "work",
      "personal"
    ],
    "modified_longitude" : -90.094204964200117,
    "folder" : 0,
    "languageGrammar" : "JavaScript",
    "content" : "https:\/\/www.kali.org\/downloads\/\n[]()",
    "created_at" : "2019-01-14T13:21:45Z",
    "accessed_at" : "2019-01-15T01:19:15Z",
    "flagged" : false,
    "uuid" : "C7119F94-1923-4D4A-8724-00FFBB8D3AC3"
  },
  {
    "modified_at" : "2019-01-14T17:19:47Z",
    "uuid" : "67C7366D-9BCE-4F83-B217-405F3057574D",
    "created_at" : "2019-01-14T17:11:59Z",
    "tags" : [

    ],
    "languageGrammar" : "JavaScript",
    "created_latitude" : 0,
    "modified_latitude" : 38.58255945149677,
    "accessed_at" : "2019-01-15T01:17:09Z",
    "content" : "{\n  \"always_run_in_app\" : true,\n  \"icon\" : {\n    \"color\" : \"blue\",\n    \"glyph\" : \"magic-wand\"\n  },\n  \"name\" : \"Welcome to Scriptable\",\n  \"script\" : \"\\\/************\\n * Hi. Thank you for downloading Scriptable.\\n * This script highlights some of the\\n * features in the app. It fetches the latest\\n * news from MacStories and presents the\\n * headlines along with an image in a table. \\n * You can even run the script from a\\n * Siri Shortcut.\\n * \\n * To run the script press the \\\"Play\\\" icon in\\n * the top center of the screen.\\n * \\n * Congratulations! You've just run your\\n * first script in Scriptable. \\n * \\n * Now let's create a Siri Shortcut. \\n * Press the \\\"Gear\\\" icon in the upper left\\n * corner of the screen. This will present\\n * the script settings. Press \\\"Add to Siri\\\".\\n * Follow the instructions on the screen.\\n * \\n * If you've created a Siri Shortcut, \\n * trigger the shortcut with Siri.\\n * This presents the latest news inside\\n * of Siri without even opening the app.\\n * \\n * Alright. It's time to become familiar\\n * with some of the APIs that Scriptable\\n * provides. Remember that you can always\\n * find the documentation for these APIs\\n * by pressing the \\\"Book\\\" icon in the \\n * upper right corner.\\n * \\n * You will find comments explaining what\\n * is going on in each of the steps in the\\n * script below.\\n*\\\/\\n\\n\\\/\\\/ 1. First we need to fetch the news.\\n\\\/\\\/ We create a Request object which can\\n\\\/\\\/ make HTTP requests.\\n\\\/\\\/ MacStories provide their news in a JSON\\n\\\/\\\/ feed. The Request object can automatically\\n\\\/\\\/ parse JSON by calling the \\\"loadJSON()\\\"\\n\\\/\\\/ function. Note that \\\"await\\\" keyword here.\\n\\\/\\\/ \\\"loadJSON()\\\" returns a native JavaScript\\n\\\/\\\/ promise. This is an object which will\\n\\\/\\\/ provide a value sometime in the future.\\n\\\/\\\/ We use \\\"await\\\" to wait for this value\\n\\\/\\\/ and halt execution of the script in the \\n\\\/\\\/ mean time.\\nlet url = \\\"https:\\\/\\\/macstories.net\\\/feed\\\/json\\\"\\nlet req = new Request(url)\\nlet json = await req.loadJSON()\\n\\\/\\\/ 2. We want to present the articles in a\\n\\\/\\\/ table, so we create a new UITable.\\n\\\/\\\/ A table contains rows which are displayed\\n\\\/\\\/ vertically. A row in turn contains cells\\n\\\/\\\/ which are displayed horizontally.\\nlet table = new UITable()\\nfor (item of json.items) {\\n  \\\/\\\/ For each item, i.e. each story, we\\n  \\\/\\\/ create a row in the table.\\n  let row = new UITableRow()\\n  \\\/\\\/ Call our extractImageURL function to\\n  \\\/\\\/ extract an image URL from the HTML body\\n  \\\/\\\/ of the story.\\n  let body = item[\\\"content_html\\\"]\\n  let imageURL = extractImageURL(body)\\n  \\\/\\\/ Call our decode() function to decode\\n  \\\/\\\/ HTML entities from the title.\\n  let title = decode(item.title)\\n  \\\/\\\/ Add an image cell to the row. Cells are\\n  \\\/\\\/ displayed in the order they are added,\\n  \\\/\\\/ from left to right.\\n  let imageCell = row.addImageAtURL(imageURL)\\n  \\\/\\\/ Add the title cell to the row.\\n  let titleCell = row.addText(title)\\n  \\\/\\\/ Set the width weights of our cells.\\n  \\\/\\\/ Cell widths are relative. In this case\\n  \\\/\\\/ we have two cells, imageCell with a\\n  \\\/\\\/ widthWeight of 20 and titleCell with a\\n  \\\/\\\/ widthWeight of 80. This gives us a\\n  \\\/\\\/ total widthWeight of 20 + 80 = 100.\\n  \\\/\\\/ So the imageCell will fill 20\\\/100 (20%)\\n  \\\/\\\/ of the available screen space and the\\n  \\\/\\\/ titleCell will fill 80\\\/100 (80%) of\\n  \\\/\\\/ the available screen space.\\n  imageCell.widthWeight = 20\\n  titleCell.widthWeight = 80\\n  \\\/\\\/ Set height of the row and spacing\\n  \\\/\\\/ between cells, in pixels.\\n  row.height = 60\\n  row.cellSpacing = 10\\n  \\\/\\\/ Add the row to the table.\\n  \\\/\\\/ Rows are displayed in the order\\n  \\\/\\\/ they are added.\\n  table.addRow(row)\\n}\\n\\\/\\\/ Presents the table using the QuickLook\\n\\\/\\\/ bridge. \\\"Bridges\\\" is the concept that\\n\\\/\\\/ allows JavaScript to use native iOS\\n\\\/\\\/ APIs. For example, presenting the table\\n\\\/\\\/ with QuickLook will present a native view\\n\\\/\\\/ containing the table. The same API also\\n\\\/\\\/ works in Siri.\\nQuickLook.present(table)\\n\\\/\\\/ We want Siri to say a kind message when\\n\\\/\\\/ the script is run using a Siri Shortcut.\\n\\\/\\\/ We use the global variable \\\"config\\\" to\\n\\\/\\\/ determine how the script is being run.\\n\\\/\\\/ The Speech bridge will speak a text using\\n\\\/\\\/ Siri. While this also works when the\\n\\\/\\\/ script is run with the app, it's much\\n\\\/\\\/ more enjoyable when the script is run\\n\\\/\\\/ from a Siri Shortcut.\\nif (config.runsWithSiri) {\\n  Speech.speak(\\\"Here's the latest news.\\\")\\n}\\n\\n\\\/\\\/ Finds the first image in the HTML and\\n\\\/\\\/ returns its URL. Returns null if no \\n\\\/\\\/ image is found.\\nfunction extractImageURL(html) {\\n  let regex = \\\/<img src=\\\"(.*)\\\" alt=\\\"\\\/\\n  let matches = html.match(regex)\\n  if (matches && matches.length >= 2) {\\n    return matches[1]\\n  } else {\\n    return null\\n  }\\n}\\n\\n\\\/\\\/ Decodes HTML entities in the input\\n\\\/\\\/ string. Returns the result.\\nfunction decode(str) {\\n  let regex = \\\/&#(\\\\d+);\\\/g\\n  return str.replace(regex, (match, dec) => {\\n    return String.fromCharCode(dec)\\n  })\\n}\",\n  \"share_sheet_inputs\" : [\n    \"plain-text\",\n    \"image\",\n    \"url\",\n    \"file-url\"\n  ]\n- ## \/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\", \"\", \"\",…];\n\nvar p = Prompt.create();\np.title = \"\";\np.message = \"\";\nfor (var list of lists) {\n  p.addTextField(\"fieldName\", \"Label\", \"\");\n  p.addTextView(\"fieldName\", \"Label\", \"\",{\"height\":50,\"keyboard\":\"default\");\n  p.addSwitch(\"fieldName\", \"Label\", false);\n  p.addDatePicker(\"name\", \"Label\", new Date(), {\"mode\":\"dateAndTime\"});\n  p.addButton(list);\n  p.addButton(\"Go\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\", \"\", \"\",…];\n\nvar p = Prompt.create();\np.title = \"\";\np.message = \"\";\nfor (var list of lists) {\n  p.addTextField(\"fieldName\", \"Label\", \"\");\n  p.addTextView(\"fieldName\", \"Label\", \"\",{\"height\":50,\"keyboard\":\"default\");\n  p.addSwitch(\"fieldName\", \"Label\", false);\n  p.addDatePicker(\"name\", \"Label\", new Date(), {\"mode\":\"dateAndTime\"});\n  p.addButton(list);\n  p.addButton(\"Go\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}}[**_]()",
    "flagged" : false,
    "modified_longitude" : -90.154260043138777,
    "folder" : 0,
    "created_longitude" : 0
  },
  {
    "modified_longitude" : -90.154342521065985,
    "folder" : 0,
    "created_at" : "2019-01-14T18:16:54Z",
    "languageGrammar" : "JavaScript",
    "created_longitude" : -90.154342521065985,
    "uuid" : "A0C3C011-21BF-46BB-9684-96BDB97729DD",
    "accessed_at" : "2019-01-14T19:08:43Z",
    "content" : "Log by iNetTools - Best Network Diagnose Tools on iPhone and iPad.\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:32 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:34 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:35 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:41 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:42 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:42 +0000\n\nInvalid host name or IP address. Please check your Server Name.",
    "modified_latitude" : 38.582588159515133,
    "created_latitude" : 38.582588159515133,
    "flagged" : false,
    "modified_at" : "2019-01-14T18:16:54Z",
    "tags" : [

    ]
  },
  {
    "created_at" : "2019-01-14T19:08:43Z",
    "modified_at" : "2019-01-15T01:17:08Z",
    "languageGrammar" : "JavaScript",
    "modified_latitude" : 38.612145541258741,
    "created_longitude" : 0,
    "folder" : 0,
    "created_latitude" : 0,
    "modified_longitude" : -90.172742205420121,
    "content" : "\n\n>  \n# Doctest\n\nYou can use a doctest file to run automated tests that are embedded in documentation or other comments. When you run this file (by tapping the ▷ button), the `doctest` module searches for pieces of text that look like interactive Python sessions, and executes those sessions to verify that they work exactly as shown.\n\nHere's an example:\n\n\t>>> 6 * 7\n\t42\n\nTo test multi-line statements, use `...` as the prefix for the additional lines:\n\n\t>>> def hello(name):\n\t...     return 'Hello ' + name\n\t>>> hello('World')\n\t'Hello World'\n\nYou can use Markdown formatting (e.g. **bold**, *italic*) in the text surrounding the actual tests. While not strictly required, it is recommended that you indent code blocks (the test cases) with one tab or 4 spaces, so that they are recognized as code when you convert the Markdown to HTML. This also ensures that the code is syntax-highlighted in Pythonista.\n\nYou can also run doctests that are contained in actual docstrings of a regular Python file (module). To do that, tap and hold the ▷ button, and select \"Run Doctests\".\n\nTo learn more about doctests, please refer to the `doctest` module documentation.\n",
    "uuid" : "8C0BB2F7-506F-44CE-9534-520C31114E3B",
    "accessed_at" : "2019-01-15T01:40:00Z",
    "flagged" : false,
    "tags" : [

    ]
  },
  {
    "tags" : [

    ],
    "modified_latitude" : 38.626516813608092,
    "modified_at" : "2019-01-15T01:38:11Z",
    "created_longitude" : -90.068256048088728,
    "folder" : 0,
    "content" : "\n\n>  ",
    "created_latitude" : 38.626516813608092,
    "modified_longitude" : -90.068256048088728,
    "accessed_at" : "2019-01-15T01:38:12Z",
    "flagged" : false,
    "created_at" : "2019-01-15T01:38:10Z",
    "uuid" : "BC291554-0EBE-4DA9-9A32-5BADAC0C8C98",
    "languageGrammar" : "JavaScript"
  },
  {
    "tags" : [

    ],
    "modified_at" : "2019-01-15T01:48:30Z",
    "uuid" : "B14BB01C-242C-41A9-A398-52A4CBADD5A1",
    "modified_longitude" : -90.051218656428631,
    "created_longitude" : -90.051218656428631,
    "modified_latitude" : 38.59684195711759,
    "accessed_at" : "2019-01-15T01:48:30Z",
    "flagged" : false,
    "created_latitude" : 38.59684195711759,
    "content" : "https:\/\/docs.scriptable.app\/filemanager",
    "created_at" : "2019-01-15T01:48:27Z",
    "languageGrammar" : "JavaScript",
    "folder" : 0
  },
  {
    "created_longitude" : -90.037561752394893,
    "folder" : 0,
    "modified_at" : "2019-01-15T02:43:38Z",
    "created_at" : "2019-01-15T02:43:36Z",
    "flagged" : false,
    "content" : "https:\/\/docs.scriptable.app\/filemanager\/#icloud",
    "languageGrammar" : "JavaScript",
    "uuid" : "4A4C7EE9-F2CA-43EF-9151-6626301FBCCD",
    "created_latitude" : 38.594812606369409,
    "tags" : [

    ],
    "modified_latitude" : 38.594812606369409,
    "accessed_at" : "2019-01-15T02:43:38Z",
    "modified_longitude" : -90.037561752394893
  },
  {
    "folder" : 0,
    "created_at" : "2019-01-15T02:43:58Z",
    "uuid" : "D8A676DB-B327-44A8-89D1-4C7F56F4CCBB",
    "modified_latitude" : 38.596574359493758,
    "content" : "https:\/\/docs.scriptable.app\/filemanager[]()",
    "created_longitude" : -90.036423191070895,
    "tags" : [

    ],
    "flagged" : false,
    "accessed_at" : "2019-01-15T03:47:01Z",
    "languageGrammar" : "JavaScript",
    "modified_longitude" : -90.052787056102403,
    "modified_at" : "2019-01-15T02:44:17Z",
    "created_latitude" : 38.594772255539695
  },
  {
    "languageGrammar" : "JavaScript",
    "uuid" : "4A0EA1D5-2D65-4F0B-B070-D786C081F5CD",
    "tags" : [

    ],
    "modified_at" : "2019-01-15T03:47:01Z",
    "created_latitude" : 0,
    "modified_latitude" : 0,
    "flagged" : false,
    "created_at" : "2019-01-15T03:47:01Z",
    "created_longitude" : 0,
    "accessed_at" : "2019-01-15T03:47:01Z",
    "folder" : 0,
    "content" : "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVUAzKFNdHHY2RY8700+PhNKxd++eS21bqlBfPnTbYiuxafNkjJYUszs6RfPH8qjXU9gzHM1BG\/7EOTT\/GVtoU9szY\/iSVh+DAsbZuPZ6XmGTUZgquiNysmV\/4x6imHaNlvUTXduEpEFSrpq4QWEWNruPzf4qLreeKfYGmmxV9Jk4JLbqNeXdbZrmgmmCgjbTmaSApva+qTMsSTxMBd9j\/E9f6Vk70XKAFEtoMLm6l28sAWdwA3l2TCLDbKD1jxvnBTnUoq7awbx1jZYAjn90gI8Z2FsS7E0c1pEwhAaGEjGdwTV+F2akn3d3Ywi9XLa8VF\/COhjr8sRJZn8rp+HiF WorkingCopy@iPhone-14012019\n",
    "modified_longitude" : 0
  },
  {
    "folder" : 0,
    "tags" : [
      "script"
    ],
    "content" : "l\/\/ ",
    "modified_latitude" : 0,
    "created_at" : "2019-01-15T04:26:21Z",
    "created_latitude" : 0,
    "languageGrammar" : "JavaScript",
    "uuid" : "7CCC7C3E-C558-4431-A49C-EDF04034E161",
    "modified_longitude" : 0,
    "accessed_at" : "2019-01-15T04:26:21Z",
    "created_longitude" : 0,
    "modified_at" : "2019-01-15T04:26:40Z",
    "flagged" : false
  },
  {
    "flagged" : false,
    "created_longitude" : -90.033925033093126,
    "content" : "<XRDS xmlns=\"xri:\/\/$xrds\">\n  <XRD xmlns=\"xri:\/\/$xrd*($v*2.0)\">\n    <Service>\n      <Type>http:\/\/specs.openid.net\/auth\/2.0\/server<\/Type>\n      <URI>https:\/\/id.atlassian.com\/openid\/v2\/op<\/URI>\n    <\/Service>\n  <\/XRD>\n<\/XRDS>",
    "languageGrammar" : "JavaScript",
    "tags" : [

    ],
    "folder" : 0,
    "created_at" : "2019-01-15T04:47:13Z",
    "created_latitude" : 38.64200891572554,
    "accessed_at" : "2019-01-15T04:47:13Z",
    "modified_longitude" : -90.033925033093126,
    "uuid" : "FBF03D7D-2DAE-4C76-AB25-D16C6018337F",
    "modified_at" : "2019-01-15T04:47:13Z",
    "modified_latitude" : 38.64200891572554
  },
  {
    "folder" : 0,
    "created_latitude" : 38.638425154618837,
    "created_at" : "2019-01-15T05:46:56Z",
    "modified_latitude" : 38.638587816489206,
    "uuid" : "99465978-F65A-420F-9A8B-798A38629D0F",
    "languageGrammar" : "JavaScript",
    "accessed_at" : "2019-01-15T10:37:54Z",
    "created_longitude" : -90.031864637678524,
    "modified_at" : "2019-01-15T11:43:36Z",
    "modified_longitude" : -90.032142534098568,
    "content" : "\/\/ =if () {\n\n} else {\n\n}\/\/ Prompt\n\/* ———————g\n *\/\nvar lists = [“”, “”, “”,…];\n\nvar p = Prompt.create();\np.title = “”;\np.message = “”;\nfor (i = 0; i < lists.length; i++) {\n  p.addButton(lists[i]);\n  p.addTextField(“fieldName”, “Label”, “”);\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}",
    "tags" : [
      "script"
    ],
    "flagged" : false
  },
  {
    "created_latitude" : 38.638425154618837,
    "modified_at" : "2019-01-15T08:14:41Z",
    "languageGrammar" : "JavaScript",
    "accessed_at" : "2019-01-15T08:14:41Z",
    "modified_latitude" : 38.638425154618837,
    "folder" : 0,
    "flagged" : false,
    "uuid" : "6847AF75-C5BC-4DEF-97C9-271F57718069",
    "created_at" : "2019-01-15T08:14:41Z",
    "content" : "#  Welcome to Pythonista\n\nThank you for downloading Pythonista! You now have everything you need to build and run Python scripts directly on your iPhone or iPad. \n\nTo give you an idea of what you can do with the app, various sample scripts are included in the *Examples* folder. Feel free to use them as starting points for your own experiments. To share your creations, get help with coding problems, or just to meet fellow Pythonistas, please visit our [community forum](http:\/\/forum.omz-software.com).\n\n\n#  Getting Started\n\nIf you're new to Pythonista, here are some tips to help you get up and running:\n\n*\tTo create a new script, first tap `≡` to reveal the library, then `+` (at the bottom). You can also use left and right swipe gestures to switch between the file browser, editor, and console panels. \n\n*\tThe settings (\"gear\" button in the file browser) contain useful options to customize the editor font, color theme, indentation type (tabs\/spaces), and much more.\n\n*\tSwipe left to show the **console** panel. This is where text output appears, and you can use the prompt at the bottom to evaluate individual lines of Python code directly.\n\n*\tYou'll also find the included **documentation** in the console panel; simply tap the `(?)` button to open it in a separate tab. Reference documentation is also available while you're editing code -- simply select a word (e.g. a function name), and choose *Help…* from the menu.\n\n*\tFor easier navigation in long scripts, tap the file name at the top to show a list of classes and functions. This is also where you can rename the current file.\n\n*\tIf you enjoy coding in Pythonista, please consider leaving a rating or [review in the App Store][review]. Thank you!\n\t💚\n\n#  Tips\n\n*\tTap and hold the run (▷) button for some additional options, e.g. to pass arguments (`sys.argv`) to your scripts, or to run the integrated PEP8 style checker.\n\n*\tTap the *Edit* button in the \"wrench\" menu to add your own script shortcuts there. You can use this to launch your favorite scripts more quickly, or to extend the editor's functionality with the `editor` module.\n\n*\tA lot of keys on Pythonista's extra keyboard row have multiple mappings. For example, you can tap and hold the tab key to get an unindent option.\n\n*\tTap with two fingers in the editor to select an entire line of code.\n\n*\tYou can run Pythonista scripts directly within other apps that support the standard iOS share sheet. To get started, open the share sheet in a supported app (e.g. Safari, Notes, Maps...) and select \"More...\" to add the Pythonista action extension. You can use the `appex` module to access data that was passed to the share sheet (e.g. the current URL in Safari, location data in Maps, etc.).\n\n*\tIf you use Pythonista with an external (Bluetooth) keyboard, you can show a list of available shortcuts by pressing and holding the `Cmd` key.\n\n*\tSwipe left on a file in the script library to open it in a new tab or move it to the trash. \n\n\n#  What's New in 3.2\n\nFor full release notes, and to see what was added in previous releases, please refer to the \"What's New in Pythonista\" page in the documentation. You can also open the release notes from an empty tab. The following are just the highlights: \n\n*\tYou can now sync your scripts via iCloud Drive, and open Python files from other apps.\n\n*\tPythonista now uses Python 3.6. Among other things, this enables the use of f-strings for easier string formatting.\n\n*\tFiles in the script library can be moved via drag'n'drop (requires iOS 11).\n\n*\tThe \"Convert Tabs\" feature is now called \"Reformat Code\", and supports applying coding style guidelines, in addition to converting indentation.\n\n*\tImproved search in the script library and documentation.\n\n*\tImproved support for the iPhone X.\n\n*\tThe tab bar UI is now the same on iPhone and iPad.\n\n*\tThe Python interpreter is now built with IPv6 support (this should fix connectivity issues users were experiencing with some cellular providers). \n\n\n# Feedback\n\nI hope you enjoy coding in Pythonista. If you have any feedback, please send an email to <pythonista@omz-software.com>, or visit the [community forum][forum] to share code and get help with your programming questions. You can also find me on Twitter:[@olemoritz][twitter].\n\n---\n\n[forum]: https:\/\/forum.omz-software.com\n[twitter]: http:\/\/twitter.com\/olemoritz\n[review]: itms-apps:\/\/itunes.apple.com\/app\/id1085978097?action=write-review\n\n",
    "created_longitude" : -90.031864637678524,
    "tags" : [

    ],
    "modified_longitude" : -90.031864637678524
  },
  {
    "content" : "{\n  \"always_run_in_app\" : true,\n  \"icon\" : {\n    \"color\" : \"blue\",\n    \"glyph\" : \"magic-wand\"\n  },\n  \"name\" : \"Welcome to Scriptable\",\n  \"script\" : \"\\\/************\\n * Hi. Thank you for downloading Scriptable.\\n * This script highlights some of the\\n * features in the app. It fetches the latest\\n * news from MacStories and presents the\\n * headlines along with an image in a table. \\n * You can even run the script from a\\n * Siri Shortcut.\\n * \\n * To run the script press the \\\"Play\\\" icon in\\n * the top center of the screen.\\n * \\n * Congratulations! You've just run your\\n * first script in Scriptable. \\n * \\n * Now let's create a Siri Shortcut. \\n * Press the \\\"Gear\\\" icon in the upper left\\n * corner of the screen. This will present\\n * the script settings. Press \\\"Add to Siri\\\".\\n * Follow the instructions on the screen.\\n * \\n * If you've created a Siri Shortcut, \\n * trigger the shortcut with Siri.\\n * This presents the latest news inside\\n * of Siri without even opening the app.\\n * \\n * Alright. It's time to become familiar\\n * with some of the APIs that Scriptable\\n * provides. Remember that you can always\\n * find the documentation for these APIs\\n * by pressing the \\\"Book\\\" icon in the \\n * upper right corner.\\n * \\n * You will find comments explaining what\\n * is going on in each of the steps in the\\n * script below.\\n*\\\/\\n\\n\\\/\\\/ 1. First we need to fetch the news.\\n\\\/\\\/ We create a Request object which can\\n\\\/\\\/ make HTTP requests.\\n\\\/\\\/ MacStories provide their news in a JSON\\n\\\/\\\/ feed. The Request object can automatically\\n\\\/\\\/ parse JSON by calling the \\\"loadJSON()\\\"\\n\\\/\\\/ function. Note that \\\"await\\\" keyword here.\\n\\\/\\\/ \\\"loadJSON()\\\" returns a native JavaScript\\n\\\/\\\/ promise. This is an object which will\\n\\\/\\\/ provide a value sometime in the future.\\n\\\/\\\/ We use \\\"await\\\" to wait for this value\\n\\\/\\\/ and halt execution of the script in the \\n\\\/\\\/ mean time.\\nlet url = \\\"https:\\\/\\\/macstories.net\\\/feed\\\/json\\\"\\nlet req = new Request(url)\\nlet json = await req.loadJSON()\\n\\\/\\\/ 2. We want to present the articles in a\\n\\\/\\\/ table, so we create a new UITable.\\n\\\/\\\/ A table contains rows which are displayed\\n\\\/\\\/ vertically. A row in turn contains cells\\n\\\/\\\/ which are displayed horizontally.\\nlet table = new UITable()\\nfor (item of json.items) {\\n  \\\/\\\/ For each item, i.e. each story, we\\n  \\\/\\\/ create a row in the table.\\n  let row = new UITableRow()\\n  \\\/\\\/ Call our extractImageURL function to\\n  \\\/\\\/ extract an image URL from the HTML body\\n  \\\/\\\/ of the story.\\n  let body = item[\\\"content_html\\\"]\\n  let imageURL = extractImageURL(body)\\n  \\\/\\\/ Call our decode() function to decode\\n  \\\/\\\/ HTML entities from the title.\\n  let title = decode(item.title)\\n  \\\/\\\/ Add an image cell to the row. Cells are\\n  \\\/\\\/ displayed in the order they are added,\\n  \\\/\\\/ from left to right.\\n  let imageCell = row.addImageAtURL(imageURL)\\n  \\\/\\\/ Add the title cell to the row.\\n  let titleCell = row.addText(title)\\n  \\\/\\\/ Set the width weights of our cells.\\n  \\\/\\\/ Cell widths are relative. In this case\\n  \\\/\\\/ we have two cells, imageCell with a\\n  \\\/\\\/ widthWeight of 20 and titleCell with a\\n  \\\/\\\/ widthWeight of 80. This gives us a\\n  \\\/\\\/ total widthWeight of 20 + 80 = 100.\\n  \\\/\\\/ So the imageCell will fill 20\\\/100 (20%)\\n  \\\/\\\/ of the available screen space and the\\n  \\\/\\\/ titleCell will fill 80\\\/100 (80%) of\\n  \\\/\\\/ the available screen space.\\n  imageCell.widthWeight = 20\\n  titleCell.widthWeight = 80\\n  \\\/\\\/ Set height of the row and spacing\\n  \\\/\\\/ between cells, in pixels.\\n  row.height = 60\\n  row.cellSpacing = 10\\n  \\\/\\\/ Add the row to the table.\\n  \\\/\\\/ Rows are displayed in the order\\n  \\\/\\\/ they are added.\\n  table.addRow(row)\\n}\\n\\\/\\\/ Presents the table using the QuickLook\\n\\\/\\\/ bridge. \\\"Bridges\\\" is the concept that\\n\\\/\\\/ allows JavaScript to use native iOS\\n\\\/\\\/ APIs. For example, presenting the table\\n\\\/\\\/ with QuickLook will present a native view\\n\\\/\\\/ containing the table. The same API also\\n\\\/\\\/ works in Siri.\\nQuickLook.present(table)\\n\\\/\\\/ We want Siri to say a kind message when\\n\\\/\\\/ the script is run using a Siri Shortcut.\\n\\\/\\\/ We use the global variable \\\"config\\\" to\\n\\\/\\\/ determine how the script is being run.\\n\\\/\\\/ The Speech bridge will speak a text using\\n\\\/\\\/ Siri. While this also works when the\\n\\\/\\\/ script is run with the app, it's much\\n\\\/\\\/ more enjoyable when the script is run\\n\\\/\\\/ from a Siri Shortcut.\\nif (config.runsWithSiri) {\\n  Speech.speak(\\\"Here's the latest news.\\\")\\n}\\n\\n\\\/\\\/ Finds the first image in the HTML and\\n\\\/\\\/ returns its URL. Returns null if no \\n\\\/\\\/ image is found.\\nfunction extractImageURL(html) {\\n  let regex = \\\/<img src=\\\"(.*)\\\" alt=\\\"\\\/\\n  let matches = html.match(regex)\\n  if (matches && matches.length >= 2) {\\n    return matches[1]\\n  } else {\\n    return null\\n  }\\n}\\n\\n\\\/\\\/ Decodes HTML entities in the input\\n\\\/\\\/ string. Returns the result.\\nfunction decode(str) {\\n  let regex = \\\/&#(\\\\d+);\\\/g\\n  return str.replace(regex, (match, dec) => {\\n    return String.fromCharCode(dec)\\n  })\\n}\",\n  \"share_sheet_inputs\" : [\n    \"plain-text\",\n    \"image\",\n    \"url\",\n    \"file-url\"\n  ]\n}",
    "modified_at" : "2019-01-15T08:25:05Z",
    "modified_longitude" : -90.031741579774902,
    "uuid" : "67E8CB1B-5C1A-4ABF-81B2-41CE5E4C4A13",
    "languageGrammar" : "JavaScript",
    "modified_latitude" : 38.638408715448499,
    "created_longitude" : -90.031741579774902,
    "created_at" : "2019-01-15T08:25:05Z",
    "accessed_at" : "2019-01-15T08:25:05Z",
    "tags" : [

    ],
    "flagged" : false,
    "created_latitude" : 38.638408715448499,
    "folder" : 0
  },
  {
    "modified_longitude" : -90.033645521139434,
    "content" : "{\n  \"always_run_in_app\" : true,\n  \"icon\" : {\n    \"color\" : \"deep-gray\",\n    \"glyph\" : \"magic\"\n  },\n  \"name\" : \"kiamet\",\n  \"script\" : \"$ sudo apt update\\n$ sudo apt install build-essential libmicrohttpd-dev git libpcap-dev libsqlite3-dev\\n\",\n  \"share_sheet_inputs\" : [\n    \"file-url\",\n    \"url\",\n    \"image\",\n    \"plain-text\"\n  ]\n}",
    "modified_at" : "2019-01-15T08:54:32Z",
    "tags" : [

    ],
    "flagged" : false,
    "created_latitude" : 38.646734716141466,
    "languageGrammar" : "JavaScript",
    "accessed_at" : "2019-01-15T08:54:32Z",
    "uuid" : "2F86128D-EDF9-4303-9056-4D56F261C05C",
    "folder" : 0,
    "created_at" : "2019-01-15T08:54:32Z",
    "modified_latitude" : 38.646734716141466,
    "created_longitude" : -90.033645521139434
  },
  {
    "modified_longitude" : -90.032156422006679,
    "flagged" : false,
    "uuid" : "8F824A87-0BD5-44FF-A022-222AC2FE475E",
    "content" : "\n-\n",
    "modified_latitude" : 38.638176095615592,
    "languageGrammar" : "JavaScript",
    "created_latitude" : 38.638736894390206,
    "accessed_at" : "2019-01-15T09:46:55Z",
    "created_longitude" : -90.03153540202419,
    "created_at" : "2019-01-15T08:55:14Z",
    "tags" : [

    ],
    "modified_at" : "2019-01-15T09:47:09Z",
    "folder" : 0
  },
  {
    "content" : "_[\np]()",
    "languageGrammar" : "JavaScript",
    "accessed_at" : "2019-01-15T09:48:02Z",
    "folder" : 0,
    "tags" : [

    ],
    "modified_at" : "2019-01-15T09:48:15Z",
    "created_at" : "2019-01-15T09:48:02Z",
    "created_longitude" : -90.031969157260889,
    "flagged" : false,
    "modified_latitude" : 38.638270644901695,
    "uuid" : "4A5C22EC-4329-4DF7-A285-BADFC0885E90",
    "created_latitude" : 38.638270644901695,
    "modified_longitude" : -90.031969157260889
  },
  {
    "created_latitude" : 38.638239027751283,
    "created_at" : "2019-01-15T10:26:46Z",
    "modified_at" : "2019-01-15T10:26:52Z",
    "content" : "#  Welcome to Pythonista\n\nThank you for downloading Pythonista! You now have everything you need to build and run Python scripts directly on your iPhone or iPad. \n\nTo give you an idea of what you can do with the app, various sample scripts are included in the *Examples* folder. Feel free to use them as starting points for your own experiments. To share your creations, get help with coding problems, or just to meet fellow Pythonistas, please visit our [community forum](http:\/\/forum.omz-software.com).\n\n\n#  Getting Started\n\nIf you're new to Pythonista, here are some tips to help you get up and running:\n\n*\tTo create a new script, first tap `≡` to reveal the library, then `+` (at the bottom). You can also use left and right swipe gestures to switch between the file browser, editor, and console panels. \n\n*\tThe settings (\"gear\" button in the file browser) contain useful options to customize the editor font, color theme, indentation type (tabs\/spaces), and much more.\n\n*\tSwipe left to show the **console** panel. This is where text output appears, and you can use the prompt at the bottom to evaluate individual lines of Python code directly.\n\n*\tYou'll also find the included **documentation** in the console panel; simply tap the `(?)` button to open it in a separate tab. Reference documentation is also available while you're editing code -- simply select a word (e.g. a function name), and choose *Help…* from the menu.\n\n*\tFor easier navigation in long scripts, tap the file name at the top to show a list of classes and functions. This is also where you can rename the current file.\n\n*\tIf you enjoy coding in Pythonista, please consider leaving a rating or [review in the App Store][review]. Thank you!\n\t💚\n\n#  Tips\n\n*\tTap and hold the run (▷) button for some additional options, e.g. to pass arguments (`sys.argv`) to your scripts, or to run the integrated PEP8 style checker.\n\n*\tTap the *Edit* button in the \"wrench\" menu to add your own script shortcuts there. You can use this to launch your favorite scripts more quickly, or to extend the editor's functionality with the `editor` module.\n\n*\tA lot of keys on Pythonista's extra keyboard row have multiple mappings. For example, you can tap and hold the tab key to get an unindent option.\n\n*\tTap with two fingers in the editor to select an entire line of code.\n\n*\tYou can run Pythonista scripts directly within other apps that support the standard iOS share sheet. To get started, open the share sheet in a supported app (e.g. Safari, Notes, Maps...) and select \"More...\" to add the Pythonista action extension. You can use the `appex` module to access data that was passed to the share sheet (e.g. the current URL in Safari, location data in Maps, etc.).\n\n*\tIf you use Pythonista with an external (Bluetooth) keyboard, you can show a list of available shortcuts by pressing and holding the `Cmd` key.\n\n*\tSwipe left on a file in the script library to open it in a new tab or move it to the trash. \n\n\n#  What's New in 3.2\n\nFor full release notes, and to see what was added in previous releases, please refer to the \"What's New in Pythonista\" page in the documentation. You can also open the release notes from an empty tab. The following are just the highlights: \n\n*\tYou can now sync your scripts via iCloud Drive, and open Python files from other apps.\n\n*\tPythonista now uses Python 3.6. Among other things, this enables the use of f-strings for easier string formatting.\n\n*\tFiles in the script library can be moved via drag'n'drop (requires iOS 11).\n\n*\tThe \"Convert Tabs\" feature is now called \"Reformat Code\", and supports applying coding style guidelines, in addition to converting indentation.\n\n*\tImproved search in the script library and documentation.\n\n*\tImproved support for the iPhone X.\n\n*\tThe tab bar UI is now the same on iPhone and iPad.\n\n*\tThe Python interpreter is now built with IPv6 support (this should fix connectivity issues users were experiencing with some cellular providers). \n\n\n# Feedback\n\nI hope you enjoy coding in Pythonista. If you have any feedback, please send an email to <pythonista@omz-software.com>, or visit the [community forum][forum] to share code and get help with your programming questions. You can also find me on Twitter:[@olemoritz][twitter].\n\n---\n\n[forum]: https:\/\/forum.omz-software.com\n[twitter]: http:\/\/twitter.com\/olemoritz\n[review]: itms-apps:\/\/itunes.apple.com\/app\/id1085978097?action=write-review\n\n",
    "flagged" : false,
    "modified_latitude" : 38.638239027751283,
    "tags" : [

    ],
    "languageGrammar" : "JavaScript",
    "folder" : 0,
    "uuid" : "58C6C56D-2356-45B4-A99C-7D4E6CECA339",
    "created_longitude" : -90.032033457674373,
    "accessed_at" : "2019-01-15T10:26:52Z",
    "modified_longitude" : -90.032033457674373
  },
  {
    "flagged" : false,
    "languageGrammar" : "JavaScript",
    "created_at" : "2019-01-15T10:37:11Z",
    "uuid" : "53A27213-A1F1-422E-AB27-E91A25088B84",
    "tags" : [

    ],
    "modified_longitude" : -90.031909387317796,
    "content" : "<!doctype html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>hello, world<\/title>\n  <link rel=\"stylesheet\" href=\"vendor\/bootstrap\/css\/bootstrap.min.css\">\n  <link rel=\"stylesheet\" href=\"style.css\">\n<\/head>\n<body>\n  <div class=\"container\">\n    <h1>hello, world<\/h1>\n    <hr>\n    <p>\n      <a href=\"#\" class=\"btn btn-primary btn-lg\" id=\"alert\">alert<\/a>\n    <\/p>\n  <\/div>\n\n  <script src=\"vendor\/jquery.min.js\"><\/script>\n  <script src=\"vendor\/bootstrap\/js\/bootstrap.min.js\"><\/script>\n  <script src=\"script.js\"><\/script>\n<\/body>[](https:\/\/reference.getdrafts.com\/)\n<\/html>\n\n1",
    "modified_latitude" : 38.638418027261821,
    "modified_at" : "2019-01-15T10:37:24Z",
    "accessed_at" : "2019-01-15T10:37:11Z",
    "folder" : 0,
    "created_latitude" : 0,
    "created_longitude" : 0
  },
  {
    "flagged" : false,
    "folder" : 0,
    "tags" : [

    ],
    "languageGrammar" : "JavaScript",
    "created_latitude" : 38.638418027261821,
    "modified_at" : "2019-01-15T10:37:38Z",
    "created_at" : "2019-01-15T10:37:27Z",
    "uuid" : "C0E131AB-6EDD-4D8A-B11C-4DD4A05D987E",
    "modified_latitude" : 38.638418027261821,
    "created_longitude" : -90.031909387317796,
    "modified_longitude" : -90.031909387317796,
    "accessed_at" : "2019-01-15T10:37:27Z",
    "content" : "## q"
  },
  {
    "modified_latitude" : 0,
    "created_latitude" : 0,
    "created_longitude" : 0,
    "flagged" : false,
    "modified_at" : "2019-01-15T19:03:36Z",
    "created_at" : "2019-01-15T19:03:36Z",
    "content" : "2019-01-14 17:31:44.927822: [APP] App version: 0.0.20190107 (1); Go backend version: 0.0.20181222\n2019-01-15 13:02:25.119515: [APP] App version: 0.0.20190107 (1); Go backend version: 0.0.20181222\n",
    "modified_longitude" : 0,
    "languageGrammar" : "JavaScript",
    "tags" : [

    ],
    "accessed_at" : "2019-11-28T23:35:10Z",
    "folder" : 0,
    "uuid" : "DB116496-FADD-4C34-890A-867354E5DCBF"
  },
  {
    "accessed_at" : "2019-01-16T01:48:59Z",
    "content" : "\/\/ Variables used by Scriptable.[]()\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: blue; icon-glyph: fileAlt; share-sheet-inputs: url;\n)\n\/\/ Takes a URL to a WWDC session as\n\/\/ input and searches asciiwwdc.com\n\/\/ for the transcript. Works great\n\/\/ when run from the share sheet in\n\/\/ the official WWDC app.\nlet url = args.url[0]\nlet yearRegex = \/wwdc(\\d+)\/\nlet yearMatch = url.match(yearRegex)\nlet year = \"20\" + yearMatch[1]\nlet sessionRegex = \/\\d+$\/\nlet sessionMatch = url.match(sessionRegex)\nlet session = sessionMatch[0]\nlet asciiURL = \"https:\/\/\"\n  + \"asciiwwdc.com\/\" + year\n  + \"\/sessions\/\" + session\nSafari.open(asciiURL)",
    "flagged" : false,
    "languageGrammar" : "JavaScript",
    "uuid" : "7A717533-0CE6-49AB-A65F-D3764E858D81",
    "created_latitude" : 0,
    "created_at" : "2019-01-16T01:48:59Z",
    "modified_at" : "2019-01-16T01:49:10Z",
    "created_longitude" : 0,
    "modified_latitude" : 38.576761833386385,
    "tags" : [

    ],
    "modified_longitude" : -90.158623522209169,
    "folder" : 0
  },
  {
    "languageGrammar" : "Markdown",
    "modified_latitude" : 0,
    "flagged" : false,
    "modified_longitude" : 0,
    "content" : "[PyGithub\/PyGithub: Typed interactions with the GitHub API v3](https:\/\/github.com\/PyGithub\/PyGithub)\n\n> ",
    "created_at" : "2019-11-01T03:01:13Z",
    "modified_at" : "2019-11-01T03:01:13Z",
    "uuid" : "F17DF810-E885-4EB2-9140-8D295CC2F93A",
    "created_latitude" : 0,
    "created_longitude" : 0,
    "accessed_at" : "2019-11-01T03:01:13Z",
    "folder" : 0,
    "tags" : [

    ]
  },
  {
    "modified_longitude" : 0,
    "accessed_at" : "2019-11-06T04:53:30Z",
    "content" : "https:\/\/github.com\/rsumner868\/master\/network\/alerts",
    "folder" : 0,
    "uuid" : "7FDAAD71-E933-4483-BFF7-FA80EE9A0D86",
    "created_longitude" : 0,
    "created_latitude" : 0,
    "modified_latitude" : 0,
    "flagged" : false,
    "languageGrammar" : "Markdown",
    "modified_at" : "2019-11-06T04:53:30Z",
    "created_at" : "2019-11-06T04:53:30Z",
    "tags" : [

    ]
  },
  {
    "uuid" : "D12C7A34-B1D4-4EE1-AC9F-9DC9C9D57A9E",
    "languageGrammar" : "Markdown",
    "modified_longitude" : 0,
    "created_latitude" : 0,
    "folder" : 0,
    "created_at" : "2019-11-12T10:54:46Z",
    "flagged" : false,
    "accessed_at" : "2019-11-12T10:54:46Z",
    "modified_latitude" : 0,
    "tags" : [

    ],
    "created_longitude" : 0,
    "content" : "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ui version=\"4.0\">\n <class>FAnalysis<\/class>\n <widget class=\"QFrame\" name=\"FAnalysis\">\n  <property name=\"geometry\">\n   <rect>\n    <x>0<\/x>\n    <y>0<\/y>\n    <width>1053<\/width>\n    <height>746<\/height>\n   <\/rect>\n  <\/property>\n  <property name=\"sizePolicy\">\n   <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Preferred\">\n    <horstretch>0<\/horstretch>\n    <verstretch>0<\/verstretch>\n   <\/sizepolicy>\n  <\/property>\n  <property name=\"minimumSize\">\n   <size>\n    <width>0<\/width>\n    <height>0<\/height>\n   <\/size>\n  <\/property>\n  <property name=\"focusPolicy\">\n   <enum>Qt::ClickFocus<\/enum>\n  <\/property>\n  <property name=\"acceptDrops\">\n   <bool>true<\/bool>\n  <\/property>\n  <property name=\"windowTitle\">\n   <string>Frame<\/string>\n  <\/property>\n  <property name=\"frameShape\">\n   <enum>QFrame::StyledPanel<\/enum>\n  <\/property>\n  <property name=\"frameShadow\">\n   <enum>QFrame::Raised<\/enum>\n  <\/property>\n  <property name=\"lineWidth\">\n   <number>1<\/number>\n  <\/property>\n  <property name=\"midLineWidth\">\n   <number>0<\/number>\n  <\/property>\n  <layout class=\"QHBoxLayout\" name=\"horizontalLayout_5\">\n   <item>\n    <widget class=\"QSplitter\" name=\"splitter\">\n     <property name=\"styleSheet\">\n      <string notr=\"true\">QSplitter::handle {\n    background-color: #AAAAAA;\n}<\/string>\n     <\/property>\n     <property name=\"orientation\">\n      <enum>Qt::Vertical<\/enum>\n     <\/property>\n     <property name=\"handleWidth\">\n      <number>2<\/number>\n     <\/property>\n     <widget class=\"QWidget\" name=\"layoutWidget\">\n      <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n       <item>\n        <layout class=\"QVBoxLayout\" name=\"verticalLayout_4\">\n         <item>\n          <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n           <item>\n            <widget class=\"QLabel\" name=\"lSignalNr\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Fixed\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"text\">\n              <string>1:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lSignalName\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"minimumSize\">\n              <size>\n               <width>0<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"maximumSize\">\n              <size>\n               <width>16777215<\/width>\n               <height>16777215<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"acceptDrops\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"text\">\n              <string>Signalname<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QToolButton\" name=\"btnSaveProto\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Fixed\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"maximumSize\">\n              <size>\n               <width>16777215<\/width>\n               <height>16777215<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"baseSize\">\n              <size>\n               <width>0<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"text\">\n              <string>Save..<\/string>\n             <\/property>\n             <property name=\"icon\">\n              <iconset theme=\"document-save\">\n               <normaloff>.<\/normaloff>.<\/iconset>\n             <\/property>\n            <\/widget>\n           <\/item>\n          <\/layout>\n         <\/item>\n         <item>\n          <widget class=\"ProtocolTreeView\" name=\"treeViewProtocols\">\n           <property name=\"sizePolicy\">\n            <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Preferred\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"acceptDrops\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"dragEnabled\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"dragDropOverwriteMode\">\n            <bool>false<\/bool>\n           <\/property>\n           <property name=\"dragDropMode\">\n            <enum>QAbstractItemView::DragDrop<\/enum>\n           <\/property>\n           <property name=\"defaultDropAction\">\n            <enum>Qt::IgnoreAction<\/enum>\n           <\/property>\n           <attribute name=\"headerVisible\">\n            <bool>false<\/bool>\n           <\/attribute>\n          <\/widget>\n         <\/item>\n         <item>\n          <layout class=\"QGridLayout\" name=\"gridLayout_2\">\n           <item row=\"0\" column=\"0\" colspan=\"3\">\n            <widget class=\"QComboBox\" name=\"cbProtoView\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"toolTip\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;Set the desired view here.&lt;\/p&gt;&lt;p&gt;&lt;br\/&gt;&lt;\/p&gt;&lt;p&gt;You can set the &lt;span style=&quot; font-weight:600;&quot;&gt;alignment&lt;\/span&gt; where evaluation of Hex\/ASCII starts using right-click menu in Bits-View. Use this, to correct &lt;span style=&quot; font-style:italic;&quot;&gt;slided\/missing Bits&lt;\/span&gt; or something like that.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <item>\n              <property name=\"text\">\n               <string>Bits<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"text\">\n               <string>Hex<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"text\">\n               <string>ASCII<\/string>\n              <\/property>\n             <\/item>\n            <\/widget>\n           <\/item>\n           <item row=\"1\" column=\"0\" colspan=\"3\">\n            <widget class=\"QComboBox\" name=\"cbDecoding\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"sizeAdjustPolicy\">\n              <enum>QComboBox::AdjustToContents<\/enum>\n             <\/property>\n             <item>\n              <property name=\"text\">\n               <string>NRZ<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"text\">\n               <string>Manchester<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"text\">\n               <string>Manchester II<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"text\">\n               <string>Differential Manchester<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"text\">\n               <string>...<\/string>\n              <\/property>\n             <\/item>\n            <\/widget>\n           <\/item>\n          <\/layout>\n         <\/item>\n         <item>\n          <widget class=\"QLabel\" name=\"lEncodingErrors\">\n           <property name=\"sizePolicy\">\n            <sizepolicy hsizetype=\"Maximum\" vsizetype=\"Preferred\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"text\">\n            <string>Decoding errors for block:<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"QLabel\" name=\"lDecodingErrorsValue\">\n           <property name=\"sizePolicy\">\n            <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Preferred\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"text\">\n            <string>0 (0.00%)     <\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"QPushButton\" name=\"btnAnalyze\">\n           <property name=\"text\">\n            <string>Analyze<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"QCheckBox\" name=\"cbShowDiffs\">\n           <property name=\"sizePolicy\">\n            <sizepolicy hsizetype=\"Fixed\" vsizetype=\"Fixed\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"text\">\n            <string>Mark diffs in protocol<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"QCheckBox\" name=\"chkBoxShowOnlyDiffs\">\n           <property name=\"text\">\n            <string>Show only diffs in protocol<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"QCheckBox\" name=\"chkBoxOnlyShowLabelsInProtocol\">\n           <property name=\"text\">\n            <string>Show only labels in protocol<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <spacer name=\"verticalSpacer\">\n           <property name=\"orientation\">\n            <enum>Qt::Vertical<\/enum>\n           <\/property>\n           <property name=\"sizeHint\" stdset=\"0\">\n            <size>\n             <width>20<\/width>\n             <height>40<\/height>\n            <\/size>\n           <\/property>\n          <\/spacer>\n         <\/item>\n        <\/layout>\n       <\/item>\n       <item>\n        <layout class=\"QVBoxLayout\" name=\"verticalLayout_3\">\n         <item>\n          <layout class=\"QHBoxLayout\" name=\"searchLayout\">\n           <item>\n            <spacer name=\"horizontalSpacer_3\">\n             <property name=\"orientation\">\n              <enum>Qt::Horizontal<\/enum>\n             <\/property>\n             <property name=\"sizeType\">\n              <enum>QSizePolicy::Fixed<\/enum>\n             <\/property>\n             <property name=\"sizeHint\" stdset=\"0\">\n              <size>\n               <width>5<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n            <\/spacer>\n           <\/item>\n           <item>\n            <widget class=\"QLineEdit\" name=\"lineEditSearch\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Expanding\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"acceptDrops\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"placeholderText\">\n              <string>Search Pattern<\/string>\n             <\/property>\n             <property name=\"clearButtonEnabled\">\n              <bool>true<\/bool>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QComboBox\" name=\"cbSearchType\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <item>\n              <property name=\"text\">\n               <string>Sequence<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"text\">\n               <string>Number<\/string>\n              <\/property>\n             <\/item>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QPushButton\" name=\"btnFind\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Fixed\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"text\">\n              <string>Find<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QToolButton\" name=\"btnPrevSearch\">\n             <property name=\"enabled\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"maximumSize\">\n              <size>\n               <width>20<\/width>\n               <height>16777215<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"text\">\n              <string>&lt;<\/string>\n             <\/property>\n             <property name=\"icon\">\n              <iconset theme=\"go-previous\">\n               <normaloff>.<\/normaloff>.<\/iconset>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lSearchCurrent\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Preferred\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"minimumSize\">\n              <size>\n               <width>40<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"styleSheet\">\n              <string notr=\"true\">QLabel\n{\n    qproperty-alignment: AlignCenter;\n}<\/string>\n             <\/property>\n             <property name=\"text\">\n              <string>-<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lSlash\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Preferred\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"text\">\n              <string>\/<\/string>\n             <\/property>\n             <property name=\"alignment\">\n              <set>Qt::AlignCenter<\/set>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lSearchTotal\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Preferred\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"minimumSize\">\n              <size>\n               <width>40<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"styleSheet\">\n              <string notr=\"true\">QLabel\n{\n    qproperty-alignment: AlignCenter;\n}<\/string>\n             <\/property>\n             <property name=\"text\">\n              <string>-<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QToolButton\" name=\"btnNextSearch\">\n             <property name=\"enabled\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"maximumSize\">\n              <size>\n               <width>20<\/width>\n               <height>16777215<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"text\">\n              <string>&gt;<\/string>\n             <\/property>\n             <property name=\"icon\">\n              <iconset theme=\"go-next\">\n               <normaloff>.<\/normaloff>.<\/iconset>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QPushButton\" name=\"btnSelectAll\">\n             <property name=\"text\">\n              <string>Select all<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <spacer name=\"horizontalSpacer_2\">\n             <property name=\"orientation\">\n              <enum>Qt::Horizontal<\/enum>\n             <\/property>\n             <property name=\"sizeHint\" stdset=\"0\">\n              <size>\n               <width>40<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n            <\/spacer>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"label_2\">\n             <property name=\"toolTip\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;The &lt;span style=&quot; font-weight:600;&quot;&gt;Received Signal Strength Indicator&lt;\/span&gt; indicates the average signal power of the current block.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <property name=\"text\">\n              <string>RSSI:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lblRSSI\">\n             <property name=\"toolTip\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;The &lt;span style=&quot; font-weight:600;&quot;&gt;Received Signal Strength Indicator&lt;\/span&gt; indicates the average signal power of the current block.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <property name=\"text\">\n              <string>1.04<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <spacer name=\"horizontalSpacer_4\">\n             <property name=\"orientation\">\n              <enum>Qt::Horizontal<\/enum>\n             <\/property>\n             <property name=\"sizeHint\" stdset=\"0\">\n              <size>\n               <width>40<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n            <\/spacer>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"label_3\">\n             <property name=\"toolTip\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;The &lt;span style=&quot; font-weight:600;&quot;&gt;Block Start&lt;\/span&gt; is the point in time when a protocol block begins. Additionally the relative time (+ ...) from the previous block is shown.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <property name=\"text\">\n              <string>Block start:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lTime\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Expanding\" vsizetype=\"Preferred\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"toolTip\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;The &lt;span style=&quot; font-weight:600;&quot;&gt;Block Start&lt;\/span&gt; is the point in time when a protocol block begins. Additionally the relative time (+ ...) from the previous block is shown.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <property name=\"text\">\n              <string>0 (+0)<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n          <\/layout>\n         <\/item>\n         <item>\n          <widget class=\"ProtocolTableView\" name=\"tblViewProtocol\">\n           <property name=\"sizePolicy\">\n            <sizepolicy hsizetype=\"Expanding\" vsizetype=\"Expanding\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"acceptDrops\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"autoFillBackground\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"frameShape\">\n            <enum>QFrame::NoFrame<\/enum>\n           <\/property>\n           <property name=\"frameShadow\">\n            <enum>QFrame::Sunken<\/enum>\n           <\/property>\n           <property name=\"lineWidth\">\n            <number>1<\/number>\n           <\/property>\n           <property name=\"autoScroll\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"dragDropMode\">\n            <enum>QAbstractItemView::DropOnly<\/enum>\n           <\/property>\n           <property name=\"alternatingRowColors\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"selectionMode\">\n            <enum>QAbstractItemView::ExtendedSelection<\/enum>\n           <\/property>\n           <property name=\"textElideMode\">\n            <enum>Qt::ElideNone<\/enum>\n           <\/property>\n           <property name=\"verticalScrollMode\">\n            <enum>QAbstractItemView::ScrollPerPixel<\/enum>\n           <\/property>\n           <property name=\"horizontalScrollMode\">\n            <enum>QAbstractItemView::ScrollPerPixel<\/enum>\n           <\/property>\n           <property name=\"showGrid\">\n            <bool>false<\/bool>\n           <\/property>\n           <property name=\"gridStyle\">\n            <enum>Qt::NoPen<\/enum>\n           <\/property>\n           <property name=\"sortingEnabled\">\n            <bool>false<\/bool>\n           <\/property>\n           <property name=\"wordWrap\">\n            <bool>false<\/bool>\n           <\/property>\n           <property name=\"cornerButtonEnabled\">\n            <bool>false<\/bool>\n           <\/property>\n           <attribute name=\"horizontalHeaderDefaultSectionSize\">\n            <number>40<\/number>\n           <\/attribute>\n          <\/widget>\n         <\/item>\n         <item>\n          <layout class=\"QHBoxLayout\" name=\"horizontalLayout_4\">\n           <item>\n            <widget class=\"QLabel\" name=\"lBits\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Fixed\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"maximumSize\">\n              <size>\n               <width>16777215<\/width>\n               <height>15<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"text\">\n              <string>Bit:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLineEdit\" name=\"lBitsSelection\">\n             <property name=\"maximumSize\">\n              <size>\n               <width>16777215<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"acceptDrops\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"readOnly\">\n              <bool>true<\/bool>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lHex\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Fixed\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"maximumSize\">\n              <size>\n               <width>16777215<\/width>\n               <height>15<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"text\">\n              <string>Hex:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLineEdit\" name=\"lHexSelection\">\n             <property name=\"maximumSize\">\n              <size>\n               <width>16777215<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"acceptDrops\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"readOnly\">\n              <bool>true<\/bool>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lDecimal\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Fixed\" vsizetype=\"Fixed\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"maximumSize\">\n              <size>\n               <width>16777215<\/width>\n               <height>15<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"text\">\n              <string>Decimal:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLineEdit\" name=\"lDecimalSelection\">\n             <property name=\"maximumSize\">\n              <size>\n               <width>16777215<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"acceptDrops\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"readOnly\">\n              <bool>true<\/bool>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <spacer name=\"horizontalSpacer\">\n             <property name=\"orientation\">\n              <enum>Qt::Horizontal<\/enum>\n             <\/property>\n             <property name=\"sizeHint\" stdset=\"0\">\n              <size>\n               <width>40<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n            <\/spacer>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lNumSelectedColumns\">\n             <property name=\"sizePolicy\">\n              <sizepolicy hsizetype=\"Fixed\" vsizetype=\"Preferred\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"minimumSize\">\n              <size>\n               <width>40<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"text\">\n              <string>0<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"QLabel\" name=\"lColumnsSelectedText\">\n             <property name=\"text\">\n              <string>Column(s) selected<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n          <\/layout>\n         <\/item>\n        <\/layout>\n       <\/item>\n      <\/layout>\n     <\/widget>\n     <widget class=\"QWidget\" name=\"layoutWidget\">\n      <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3\">\n       <item>\n        <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n         <item>\n          <widget class=\"QLabel\" name=\"label\">\n           <property name=\"sizePolicy\">\n            <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"text\">\n            <string>Show these protocol labels:<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"ProtocolLabelListView\" name=\"listViewLabelNames\">\n           <property name=\"sizePolicy\">\n            <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Preferred\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"acceptDrops\">\n            <bool>false<\/bool>\n           <\/property>\n          <\/widget>\n         <\/item>\n        <\/layout>\n       <\/item>\n       <item>\n        <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n         <property name=\"sizeConstraint\">\n          <enum>QLayout::SetDefaultConstraint<\/enum>\n         <\/property>\n         <item>\n          <widget class=\"QLabel\" name=\"lblLabelValues\">\n           <property name=\"sizePolicy\">\n            <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Fixed\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"font\">\n            <font>\n             <weight>75<\/weight>\n             <bold>true<\/bold>\n            <\/font>\n           <\/property>\n           <property name=\"text\">\n            <string>Label values for block<\/string>\n           <\/property>\n           <property name=\"alignment\">\n            <set>Qt::AlignCenter<\/set>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"LabelValueTableView\" name=\"tblLabelValues\">\n           <property name=\"sizePolicy\">\n            <sizepolicy hsizetype=\"Expanding\" vsizetype=\"Preferred\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"alternatingRowColors\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"showGrid\">\n            <bool>false<\/bool>\n           <\/property>\n           <attribute name=\"horizontalHeaderVisible\">\n            <bool>true<\/bool>\n           <\/attribute>\n           <attribute name=\"horizontalHeaderCascadingSectionResizes\">\n            <bool>false<\/bool>\n           <\/attribute>\n           <attribute name=\"horizontalHeaderStretchLastSection\">\n            <bool>true<\/bool>\n           <\/attribute>\n           <attribute name=\"verticalHeaderVisible\">\n            <bool>false<\/bool>\n           <\/attribute>\n          <\/widget>\n         <\/item>\n        <\/layout>\n       <\/item>\n      <\/layout>\n     <\/widget>\n    <\/widget>\n   <\/item>\n  <\/layout>\n <\/widget>\n <customwidgets>\n  <customwidget>\n   <class>ProtocolLabelListView<\/class>\n   <extends>QListView<\/extends>\n   <header>urh.ui.views.ProtocolLabelListView.h<\/header>\n  <\/customwidget>\n  <customwidget>\n   <class>ProtocolTableView<\/class>\n   <extends>QTableView<\/extends>\n   <header>urh.ui.views.ProtocolTableView.h<\/header>\n  <\/customwidget>\n  <customwidget>\n   <class>LabelValueTableView<\/class>\n   <extends>QTableView<\/extends>\n   <header>urh.ui.views.LabelValueTableView.h<\/header>\n  <\/customwidget>\n  <customwidget>\n   <class>ProtocolTreeView<\/class>\n   <extends>QTreeView<\/extends>\n   <header>urh.ui.views.ProtocolTreeView.h<\/header>\n  <\/customwidget>\n <\/customwidgets>\n <resources>\n  <include location=\"..\/urh.qrc\"\/>\n <\/resources>\n <connections\/>\n<\/ui>\n",
    "modified_at" : "2019-11-12T10:54:46Z"
  },
  {
    "uuid" : "1267948D-7C7C-47FE-A4FE-743A6C50B1E2",
    "created_longitude" : 0,
    "content" : "[github-syntax-theme-generator\/LICENSE at master · primer\/github-syntax-theme-generator](https:\/\/github.com\/primer\/github-syntax-theme-generator\/blob\/master\/LICENSE)\n\n> ",
    "created_latitude" : 0,
    "flagged" : false,
    "modified_at" : "2019-11-14T08:18:11Z",
    "folder" : 0,
    "created_at" : "2019-11-14T08:18:11Z",
    "accessed_at" : "2019-11-14T08:18:11Z",
    "languageGrammar" : "Markdown",
    "modified_longitude" : 0,
    "modified_latitude" : 0,
    "tags" : [

    ]
  },
  {
    "folder" : 0,
    "created_latitude" : 0,
    "modified_latitude" : 0,
    "modified_longitude" : 0,
    "flagged" : false,
    "accessed_at" : "2019-11-14T08:38:09Z",
    "created_at" : "2019-11-14T08:38:09Z",
    "uuid" : "B2F6610B-E931-4981-8361-EBDEAAAB8EFA",
    "content" : "[Installing Review Notebook App](https:\/\/github.com\/apps\/review-notebook-app\/installations\/new\/permissions?target_id=40968075)\n\n> ",
    "languageGrammar" : "Markdown",
    "tags" : [

    ],
    "created_longitude" : 0,
    "modified_at" : "2019-11-14T08:38:09Z"
  },
  {
    "modified_longitude" : 0,
    "flagged" : false,
    "folder" : 0,
    "uuid" : "6A0220DE-D1D3-40D8-9EC9-7AFA36BCF98C",
    "modified_latitude" : 0,
    "created_longitude" : 0,
    "tags" : [

    ],
    "languageGrammar" : "Markdown",
    "created_latitude" : 0,
    "created_at" : "2019-11-16T00:30:55Z",
    "modified_at" : "2019-11-16T00:30:55Z",
    "content" : "[Collection: Learn to Code](https:\/\/github.com\/collections\/learn-to-code)\n\n> ",
    "accessed_at" : "2019-11-16T00:30:55Z"
  },
  {
    "languageGrammar" : "Markdown",
    "folder" : 0,
    "created_at" : "2019-11-16T02:15:59Z",
    "created_longitude" : 0,
    "content" : "couldn’t",
    "accessed_at" : "2019-11-16T02:15:59Z",
    "modified_latitude" : 0,
    "uuid" : "88205377-6C63-48C3-8409-6121D7864CB7",
    "tags" : [

    ],
    "modified_longitude" : 0,
    "flagged" : false,
    "created_latitude" : 0,
    "modified_at" : "2019-11-16T02:15:59Z"
  },
  {
    "accessed_at" : "2019-11-23T12:42:08Z",
    "flagged" : false,
    "created_at" : "2019-11-23T12:42:08Z",
    "modified_latitude" : 0,
    "content" : "[G Suite: Collaboration & Productivity Apps for Business](https:\/\/gsuite.google.com\/?utm_source=gdn&utm_medium=display&utm_campaign=na-US_CA-en-dr-rmkt-xsell-gmb-trial-none-gdn-1003894&utm_content=image-freetrial-none-none-DEV_all-CRE_%7Bcreative%7D-ADGP_gmail&gclid=EAIaIQobChMI1O681q2A5gIVIyWtBh3xBw6SEAEYASAAEgJwPvD_BwE&gclsrc=aw.ds)\n\n> ",
    "tags" : [

    ],
    "folder" : 0,
    "created_latitude" : 0,
    "modified_longitude" : 0,
    "languageGrammar" : "Markdown",
    "uuid" : "2B4F243E-3655-47D2-97AC-C882A68D4F88",
    "modified_at" : "2019-11-23T12:42:08Z",
    "created_longitude" : 0
  },
  {
    "modified_longitude" : 0,
    "tags" : [

    ],
    "created_longitude" : 0,
    "flagged" : false,
    "created_latitude" : 0,
    "accessed_at" : "2019-11-24T21:49:46Z",
    "folder" : 0,
    "modified_latitude" : 0,
    "languageGrammar" : "Markdown",
    "created_at" : "2019-11-24T21:49:46Z",
    "uuid" : "80D677F8-ACA6-4937-A5EE-60D27EDB879D",
    "content" : "function runAsync(obj, method, args) {\n  return new Promise((resolve, reject) => {\n    const cb = (err, ...returnValues) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(returnValues);\n      }\n    };\n    method.apply(obj, [...args, cb]);\n  });\n}\n\nfunction muteStderr() {\n  const original = process.stderr.write;\n  process.stderr.write = () => {};\n  return () => {\n    process.stderr.write = original;\n  };\n}\n\nmodule.exports = {\n  runAsync,\n  muteStderr\n};\n",
    "modified_at" : "2019-11-24T21:49:46Z"
  },
  {
    "accessed_at" : "2019-11-28T14:03:51Z",
    "created_at" : "2019-11-28T14:03:43Z",
    "flagged" : false,
    "folder" : 0,
    "languageGrammar" : "Markdown",
    "content" : "[Restore access to your Parallels licenses after Sign In With Apple](https:\/\/kb.parallels.com\/en\/124725)\n\n>MAGGIES14902 \n\n",
    "modified_longitude" : 0,
    "created_longitude" : 0,
    "modified_at" : "2019-11-28T14:05:31Z",
    "uuid" : "D8DF5D88-D2E8-417D-BDD0-6CCC9B834563",
    "created_latitude" : 0,
    "modified_latitude" : 0,
    "tags" : [

    ]
  },
  {
    "accessed_at" : "2019-11-29T22:27:11Z",
    "created_latitude" : 0,
    "content" : "uuid,created_at,created_longitude,created_latitude,modified_at,modified_longitude,modified_latitude,accessed_at,content,tags,folder,flagged,languageGrammar\n\"87136918-3B57-4C18-908C-15D0363F489C\",2019-01-14T00:36:26Z,-90.0322674488405,38.63823587649449,2019-01-14T00:41:00Z,-90.03187412335689,38.638519372238086,2019-01-15T01:58:24Z,\"on ! # @ = \/\/ + @#*=@#https:\/\/kapeli.com\/docsets#javadoc \/var if () {\n\n} \/\/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\"\"\", \"\"\"\", \"\"\"\",…];\n\nvar p = Prompt.create();\np.title = \"\"\"\";\np.message = \"\"\"\";\nfor (i = 0; i < lists.length; i++) {\n  p.addButton(lists[i]);\n  p.addTextField(\"\"fieldName\"\", \"\"Label\"\", \"\"\"\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\"\"\", \"\"\"\", \"\"\"\",…];\n\nvar p = Prompt.create();\np.title = \"\"\"\";\np.message = \"\"\"\";\nfor (i = 0; i < lists.length; i++) {\n  p.addButton(lists[i]);\n  p.addTextField(\"\"fieldName\"\", \"\"Label\"\", \"\"\"\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\"\"{\",\"\",0,false,JavaScript\n\"CE8A6A97-2552-44BC-8258-BB6DB98F0643\",2019-01-14T10:25:25Z,-90.03197435513786,38.638582272417565,2019-01-15T05:46:49Z,-90.03186463767852,38.63842515461884,2019-01-15T05:04:44Z,\"SyntaxError\n> \",\"personal\",0,true,JavaScript\n\"C7119F94-1923-4D4A-8724-00FFBB8D3AC3\",2019-01-14T13:21:45Z,-90.05239472774457,38.59726517843621,2019-01-14T13:25:32Z,-90.09420496420012,38.61350778493901,2019-01-15T01:19:15Z,\"https:\/\/www.kali.org\/downloads\/\n[]()\",\"work,personal,js\",0,false,JavaScript\n\"67C7366D-9BCE-4F83-B217-405F3057574D\",2019-01-14T17:11:59Z,0.0,0.0,2019-01-14T17:19:47Z,-90.15426004313878,38.58255945149677,2019-01-15T01:17:09Z,\"{\n  \"\"always_run_in_app\"\" : true,\n  \"\"icon\"\" : {\n    \"\"color\"\" : \"\"blue\"\",\n    \"\"glyph\"\" : \"\"magic-wand\"\"\n  },\n  \"\"name\"\" : \"\"Welcome to Scriptable\"\",\n  \"\"script\"\" : \"\"\\\/************\\n * Hi. Thank you for downloading Scriptable.\\n * This script highlights some of the\\n * features in the app. It fetches the latest\\n * news from MacStories and presents the\\n * headlines along with an image in a table. \\n * You can even run the script from a\\n * Siri Shortcut.\\n * \\n * To run the script press the \\\"\"Play\\\"\" icon in\\n * the top center of the screen.\\n * \\n * Congratulations! You've just run your\\n * first script in Scriptable. \\n * \\n * Now let's create a Siri Shortcut. \\n * Press the \\\"\"Gear\\\"\" icon in the upper left\\n * corner of the screen. This will present\\n * the script settings. Press \\\"\"Add to Siri\\\"\".\\n * Follow the instructions on the screen.\\n * \\n * If you've created a Siri Shortcut, \\n * trigger the shortcut with Siri.\\n * This presents the latest news inside\\n * of Siri without even opening the app.\\n * \\n * Alright. It's time to become familiar\\n * with some of the APIs that Scriptable\\n * provides. Remember that you can always\\n * find the documentation for these APIs\\n * by pressing the \\\"\"Book\\\"\" icon in the \\n * upper right corner.\\n * \\n * You will find comments explaining what\\n * is going on in each of the steps in the\\n * script below.\\n*\\\/\\n\\n\\\/\\\/ 1. First we need to fetch the news.\\n\\\/\\\/ We create a Request object which can\\n\\\/\\\/ make HTTP requests.\\n\\\/\\\/ MacStories provide their news in a JSON\\n\\\/\\\/ feed. The Request object can automatically\\n\\\/\\\/ parse JSON by calling the \\\"\"loadJSON()\\\"\"\\n\\\/\\\/ function. Note that \\\"\"await\\\"\" keyword here.\\n\\\/\\\/ \\\"\"loadJSON()\\\"\" returns a native JavaScript\\n\\\/\\\/ promise. This is an object which will\\n\\\/\\\/ provide a value sometime in the future.\\n\\\/\\\/ We use \\\"\"await\\\"\" to wait for this value\\n\\\/\\\/ and halt execution of the script in the \\n\\\/\\\/ mean time.\\nlet url = \\\"\"https:\\\/\\\/macstories.net\\\/feed\\\/json\\\"\"\\nlet req = new Request(url)\\nlet json = await req.loadJSON()\\n\\\/\\\/ 2. We want to present the articles in a\\n\\\/\\\/ table, so we create a new UITable.\\n\\\/\\\/ A table contains rows which are displayed\\n\\\/\\\/ vertically. A row in turn contains cells\\n\\\/\\\/ which are displayed horizontally.\\nlet table = new UITable()\\nfor (item of json.items) {\\n  \\\/\\\/ For each item, i.e. each story, we\\n  \\\/\\\/ create a row in the table.\\n  let row = new UITableRow()\\n  \\\/\\\/ Call our extractImageURL function to\\n  \\\/\\\/ extract an image URL from the HTML body\\n  \\\/\\\/ of the story.\\n  let body = item[\\\"\"content_html\\\"\"]\\n  let imageURL = extractImageURL(body)\\n  \\\/\\\/ Call our decode() function to decode\\n  \\\/\\\/ HTML entities from the title.\\n  let title = decode(item.title)\\n  \\\/\\\/ Add an image cell to the row. Cells are\\n  \\\/\\\/ displayed in the order they are added,\\n  \\\/\\\/ from left to right.\\n  let imageCell = row.addImageAtURL(imageURL)\\n  \\\/\\\/ Add the title cell to the row.\\n  let titleCell = row.addText(title)\\n  \\\/\\\/ Set the width weights of our cells.\\n  \\\/\\\/ Cell widths are relative. In this case\\n  \\\/\\\/ we have two cells, imageCell with a\\n  \\\/\\\/ widthWeight of 20 and titleCell with a\\n  \\\/\\\/ widthWeight of 80. This gives us a\\n  \\\/\\\/ total widthWeight of 20 + 80 = 100.\\n  \\\/\\\/ So the imageCell will fill 20\\\/100 (20%)\\n  \\\/\\\/ of the available screen space and the\\n  \\\/\\\/ titleCell will fill 80\\\/100 (80%) of\\n  \\\/\\\/ the available screen space.\\n  imageCell.widthWeight = 20\\n  titleCell.widthWeight = 80\\n  \\\/\\\/ Set height of the row and spacing\\n  \\\/\\\/ between cells, in pixels.\\n  row.height = 60\\n  row.cellSpacing = 10\\n  \\\/\\\/ Add the row to the table.\\n  \\\/\\\/ Rows are displayed in the order\\n  \\\/\\\/ they are added.\\n  table.addRow(row)\\n}\\n\\\/\\\/ Presents the table using the QuickLook\\n\\\/\\\/ bridge. \\\"\"Bridges\\\"\" is the concept that\\n\\\/\\\/ allows JavaScript to use native iOS\\n\\\/\\\/ APIs. For example, presenting the table\\n\\\/\\\/ with QuickLook will present a native view\\n\\\/\\\/ containing the table. The same API also\\n\\\/\\\/ works in Siri.\\nQuickLook.present(table)\\n\\\/\\\/ We want Siri to say a kind message when\\n\\\/\\\/ the script is run using a Siri Shortcut.\\n\\\/\\\/ We use the global variable \\\"\"config\\\"\" to\\n\\\/\\\/ determine how the script is being run.\\n\\\/\\\/ The Speech bridge will speak a text using\\n\\\/\\\/ Siri. While this also works when the\\n\\\/\\\/ script is run with the app, it's much\\n\\\/\\\/ more enjoyable when the script is run\\n\\\/\\\/ from a Siri Shortcut.\\nif (config.runsWithSiri) {\\n  Speech.speak(\\\"\"Here's the latest news.\\\"\")\\n}\\n\\n\\\/\\\/ Finds the first image in the HTML and\\n\\\/\\\/ returns its URL. Returns null if no \\n\\\/\\\/ image is found.\\nfunction extractImageURL(html) {\\n  let regex = \\\/<img src=\\\"\"(.*)\\\"\" alt=\\\"\"\\\/\\n  let matches = html.match(regex)\\n  if (matches && matches.length >= 2) {\\n    return matches[1]\\n  } else {\\n    return null\\n  }\\n}\\n\\n\\\/\\\/ Decodes HTML entities in the input\\n\\\/\\\/ string. Returns the result.\\nfunction decode(str) {\\n  let regex = \\\/&#(\\\\d+);\\\/g\\n  return str.replace(regex, (match, dec) => {\\n    return String.fromCharCode(dec)\\n  })\\n}\"\",\n  \"\"share_sheet_inputs\"\" : [\n    \"\"plain-text\"\",\n    \"\"image\"\",\n    \"\"url\"\",\n    \"\"file-url\"\"\n  ]\n- ## \/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\"\"\", \"\"\"\", \"\"\"\",…];\n\nvar p = Prompt.create();\np.title = \"\"\"\";\np.message = \"\"\"\";\nfor (var list of lists) {\n  p.addTextField(\"\"fieldName\"\", \"\"Label\"\", \"\"\"\");\n  p.addTextView(\"\"fieldName\"\", \"\"Label\"\", \"\"\"\",{\"\"height\"\":50,\"\"keyboard\"\":\"\"default\"\");\n  p.addSwitch(\"\"fieldName\"\", \"\"Label\"\", false);\n  p.addDatePicker(\"\"name\"\", \"\"Label\"\", new Date(), {\"\"mode\"\":\"\"dateAndTime\"\"});\n  p.addButton(list);\n  p.addButton(\"\"Go\"\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\"\"\", \"\"\"\", \"\"\"\",…];\n\nvar p = Prompt.create();\np.title = \"\"\"\";\np.message = \"\"\"\";\nfor (var list of lists) {\n  p.addTextField(\"\"fieldName\"\", \"\"Label\"\", \"\"\"\");\n  p.addTextView(\"\"fieldName\"\", \"\"Label\"\", \"\"\"\",{\"\"height\"\":50,\"\"keyboard\"\":\"\"default\"\");\n  p.addSwitch(\"\"fieldName\"\", \"\"Label\"\", false);\n  p.addDatePicker(\"\"name\"\", \"\"Label\"\", new Date(), {\"\"mode\"\":\"\"dateAndTime\"\"});\n  p.addButton(list);\n  p.addButton(\"\"Go\"\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}}[**_]()\",\"\",0,false,JavaScript\n\"A0C3C011-21BF-46BB-9684-96BDB97729DD\",2019-01-14T18:16:54Z,-90.15434252106598,38.58258815951513,2019-01-14T18:16:54Z,-90.15434252106598,38.58258815951513,2019-01-14T19:08:43Z,\"Log by iNetTools - Best Network Diagnose Tools on iPhone and iPad.\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:32 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:34 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:35 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:41 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:42 +0000\n\nInvalid host name or IP address. Please check your Server Name.\n\nHost Name or IP Address: https:\/\/goo.gl\/search\/Kali+Linux&hl=en Kali Linux, \nTime: 2019-01-14 18:16:42 +0000\n\nInvalid host name or IP address. Please check your Server Name.\",\"\",0,false,JavaScript\n\"8C0BB2F7-506F-44CE-9534-520C31114E3B\",2019-01-14T19:08:43Z,0.0,0.0,2019-01-15T01:17:08Z,-90.17274220542012,38.61214554125874,2019-01-15T01:40:00Z,\"\n\n>  \n# Doctest\n\nYou can use a doctest file to run automated tests that are embedded in documentation or other comments. When you run this file (by tapping the ▷ button), the `doctest` module searches for pieces of text that look like interactive Python sessions, and executes those sessions to verify that they work exactly as shown.\n\nHere's an example:\n\n\t>>> 6 * 7\n\t42\n\nTo test multi-line statements, use `...` as the prefix for the additional lines:\n\n\t>>> def hello(name):\n\t...     return 'Hello ' + name\n\t>>> hello('World')\n\t'Hello World'\n\nYou can use Markdown formatting (e.g. **bold**, *italic*) in the text surrounding the actual tests. While not strictly required, it is recommended that you indent code blocks (the test cases) with one tab or 4 spaces, so that they are recognized as code when you convert the Markdown to HTML. This also ensures that the code is syntax-highlighted in Pythonista.\n\nYou can also run doctests that are contained in actual docstrings of a regular Python file (module). To do that, tap and hold the ▷ button, and select \"\"Run Doctests\"\".\n\nTo learn more about doctests, please refer to the `doctest` module documentation.\n\",\"\",0,false,JavaScript\n\"BC291554-0EBE-4DA9-9A32-5BADAC0C8C98\",2019-01-15T01:38:10Z,-90.06825604808873,38.62651681360809,2019-01-15T01:38:11Z,-90.06825604808873,38.62651681360809,2019-01-15T01:38:12Z,\"\n\n>  \",\"\",0,false,JavaScript\n\"B14BB01C-242C-41A9-A398-52A4CBADD5A1\",2019-01-15T01:48:27Z,-90.05121865642863,38.59684195711759,2019-01-15T01:48:30Z,-90.05121865642863,38.59684195711759,2019-01-15T01:48:30Z,\"https:\/\/docs.scriptable.app\/filemanager\",\"\",0,false,JavaScript\n\"4A4C7EE9-F2CA-43EF-9151-6626301FBCCD\",2019-01-15T02:43:36Z,-90.0375617523949,38.59481260636941,2019-01-15T02:43:38Z,-90.0375617523949,38.59481260636941,2019-01-15T02:43:38Z,\"https:\/\/docs.scriptable.app\/filemanager\/#icloud\",\"\",0,false,JavaScript\n\"D8A676DB-B327-44A8-89D1-4C7F56F4CCBB\",2019-01-15T02:43:58Z,-90.0364231910709,38.594772255539695,2019-01-15T02:44:17Z,-90.0527870561024,38.59657435949376,2019-01-15T03:47:01Z,\"https:\/\/docs.scriptable.app\/filemanager[]()\",\"\",0,false,JavaScript\n\"4A0EA1D5-2D65-4F0B-B070-D786C081F5CD\",2019-01-15T03:47:01Z,0.0,0.0,2019-01-15T03:47:01Z,0.0,0.0,2019-01-15T03:47:01Z,\"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVUAzKFNdHHY2RY8700+PhNKxd++eS21bqlBfPnTbYiuxafNkjJYUszs6RfPH8qjXU9gzHM1BG\/7EOTT\/GVtoU9szY\/iSVh+DAsbZuPZ6XmGTUZgquiNysmV\/4x6imHaNlvUTXduEpEFSrpq4QWEWNruPzf4qLreeKfYGmmxV9Jk4JLbqNeXdbZrmgmmCgjbTmaSApva+qTMsSTxMBd9j\/E9f6Vk70XKAFEtoMLm6l28sAWdwA3l2TCLDbKD1jxvnBTnUoq7awbx1jZYAjn90gI8Z2FsS7E0c1pEwhAaGEjGdwTV+F2akn3d3Ywi9XLa8VF\/COhjr8sRJZn8rp+HiF WorkingCopy@iPhone-14012019\n\",\"\",0,false,JavaScript\n\"7CCC7C3E-C558-4431-A49C-EDF04034E161\",2019-01-15T04:26:21Z,0.0,0.0,2019-01-15T04:26:40Z,0.0,0.0,2019-01-15T04:26:21Z,\"l\/\/ \",\"script\",0,false,JavaScript\n\"FBF03D7D-2DAE-4C76-AB25-D16C6018337F\",2019-01-15T04:47:13Z,-90.03392503309313,38.64200891572554,2019-01-15T04:47:13Z,-90.03392503309313,38.64200891572554,2019-01-15T04:47:13Z,\"<XRDS xmlns=\"\"xri:\/\/$xrds\"\">\n  <XRD xmlns=\"\"xri:\/\/$xrd*($v*2.0)\"\">\n    <Service>\n      <Type>http:\/\/specs.openid.net\/auth\/2.0\/server<\/Type>\n      <URI>https:\/\/id.atlassian.com\/openid\/v2\/op<\/URI>\n    <\/Service>\n  <\/XRD>\n<\/XRDS>\",\"\",0,false,JavaScript\n\"99465978-F65A-420F-9A8B-798A38629D0F\",2019-01-15T05:46:56Z,-90.03186463767852,38.63842515461884,2019-01-15T11:43:36Z,-90.03214253409857,38.638587816489206,2019-01-15T10:37:54Z,\"\/\/ =if () {\n\n} else {\n\n}\/\/ Prompt\n\/* ———————g\n *\/\nvar lists = [“”, “”, “”,…];\n\nvar p = Prompt.create();\np.title = “”;\np.message = “”;\nfor (i = 0; i < lists.length; i++) {\n  p.addButton(lists[i]);\n  p.addTextField(“fieldName”, “Label”, “”);\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\",\"script\",0,false,JavaScript\n\"6847AF75-C5BC-4DEF-97C9-271F57718069\",2019-01-15T08:14:41Z,-90.03186463767852,38.63842515461884,2019-01-15T08:14:41Z,-90.03186463767852,38.63842515461884,2019-01-15T08:14:41Z,\"#  Welcome to Pythonista\n\nThank you for downloading Pythonista! You now have everything you need to build and run Python scripts directly on your iPhone or iPad. \n\nTo give you an idea of what you can do with the app, various sample scripts are included in the *Examples* folder. Feel free to use them as starting points for your own experiments. To share your creations, get help with coding problems, or just to meet fellow Pythonistas, please visit our [community forum](http:\/\/forum.omz-software.com).\n\n\n#  Getting Started\n\nIf you're new to Pythonista, here are some tips to help you get up and running:\n\n*\tTo create a new script, first tap `≡` to reveal the library, then `+` (at the bottom). You can also use left and right swipe gestures to switch between the file browser, editor, and console panels. \n\n*\tThe settings (\"\"gear\"\" button in the file browser) contain useful options to customize the editor font, color theme, indentation type (tabs\/spaces), and much more.\n\n*\tSwipe left to show the **console** panel. This is where text output appears, and you can use the prompt at the bottom to evaluate individual lines of Python code directly.\n\n*\tYou'll also find the included **documentation** in the console panel; simply tap the `(?)` button to open it in a separate tab. Reference documentation is also available while you're editing code -- simply select a word (e.g. a function name), and choose *Help…* from the menu.\n\n*\tFor easier navigation in long scripts, tap the file name at the top to show a list of classes and functions. This is also where you can rename the current file.\n\n*\tIf you enjoy coding in Pythonista, please consider leaving a rating or [review in the App Store][review]. Thank you!\n\t💚\n\n#  Tips\n\n*\tTap and hold the run (▷) button for some additional options, e.g. to pass arguments (`sys.argv`) to your scripts, or to run the integrated PEP8 style checker.\n\n*\tTap the *Edit* button in the \"\"wrench\"\" menu to add your own script shortcuts there. You can use this to launch your favorite scripts more quickly, or to extend the editor's functionality with the `editor` module.\n\n*\tA lot of keys on Pythonista's extra keyboard row have multiple mappings. For example, you can tap and hold the tab key to get an unindent option.\n\n*\tTap with two fingers in the editor to select an entire line of code.\n\n*\tYou can run Pythonista scripts directly within other apps that support the standard iOS share sheet. To get started, open the share sheet in a supported app (e.g. Safari, Notes, Maps...) and select \"\"More...\"\" to add the Pythonista action extension. You can use the `appex` module to access data that was passed to the share sheet (e.g. the current URL in Safari, location data in Maps, etc.).\n\n*\tIf you use Pythonista with an external (Bluetooth) keyboard, you can show a list of available shortcuts by pressing and holding the `Cmd` key.\n\n*\tSwipe left on a file in the script library to open it in a new tab or move it to the trash. \n\n\n#  What's New in 3.2\n\nFor full release notes, and to see what was added in previous releases, please refer to the \"\"What's New in Pythonista\"\" page in the documentation. You can also open the release notes from an empty tab. The following are just the highlights: \n\n*\tYou can now sync your scripts via iCloud Drive, and open Python files from other apps.\n\n*\tPythonista now uses Python 3.6. Among other things, this enables the use of f-strings for easier string formatting.\n\n*\tFiles in the script library can be moved via drag'n'drop (requires iOS 11).\n\n*\tThe \"\"Convert Tabs\"\" feature is now called \"\"Reformat Code\"\", and supports applying coding style guidelines, in addition to converting indentation.\n\n*\tImproved search in the script library and documentation.\n\n*\tImproved support for the iPhone X.\n\n*\tThe tab bar UI is now the same on iPhone and iPad.\n\n*\tThe Python interpreter is now built with IPv6 support (this should fix connectivity issues users were experiencing with some cellular providers). \n\n\n# Feedback\n\nI hope you enjoy coding in Pythonista. If you have any feedback, please send an email to <pythonista@omz-software.com>, or visit the [community forum][forum] to share code and get help with your programming questions. You can also find me on Twitter:[@olemoritz][twitter].\n\n---\n\n[forum]: https:\/\/forum.omz-software.com\n[twitter]: http:\/\/twitter.com\/olemoritz\n[review]: itms-apps:\/\/itunes.apple.com\/app\/id1085978097?action=write-review\n\n\",\"\",0,false,JavaScript\n\"67E8CB1B-5C1A-4ABF-81B2-41CE5E4C4A13\",2019-01-15T08:25:05Z,-90.0317415797749,38.6384087154485,2019-01-15T08:25:05Z,-90.0317415797749,38.6384087154485,2019-01-15T08:25:05Z,\"{\n  \"\"always_run_in_app\"\" : true,\n  \"\"icon\"\" : {\n    \"\"color\"\" : \"\"blue\"\",\n    \"\"glyph\"\" : \"\"magic-wand\"\"\n  },\n  \"\"name\"\" : \"\"Welcome to Scriptable\"\",\n  \"\"script\"\" : \"\"\\\/************\\n * Hi. Thank you for downloading Scriptable.\\n * This script highlights some of the\\n * features in the app. It fetches the latest\\n * news from MacStories and presents the\\n * headlines along with an image in a table. \\n * You can even run the script from a\\n * Siri Shortcut.\\n * \\n * To run the script press the \\\"\"Play\\\"\" icon in\\n * the top center of the screen.\\n * \\n * Congratulations! You've just run your\\n * first script in Scriptable. \\n * \\n * Now let's create a Siri Shortcut. \\n * Press the \\\"\"Gear\\\"\" icon in the upper left\\n * corner of the screen. This will present\\n * the script settings. Press \\\"\"Add to Siri\\\"\".\\n * Follow the instructions on the screen.\\n * \\n * If you've created a Siri Shortcut, \\n * trigger the shortcut with Siri.\\n * This presents the latest news inside\\n * of Siri without even opening the app.\\n * \\n * Alright. It's time to become familiar\\n * with some of the APIs that Scriptable\\n * provides. Remember that you can always\\n * find the documentation for these APIs\\n * by pressing the \\\"\"Book\\\"\" icon in the \\n * upper right corner.\\n * \\n * You will find comments explaining what\\n * is going on in each of the steps in the\\n * script below.\\n*\\\/\\n\\n\\\/\\\/ 1. First we need to fetch the news.\\n\\\/\\\/ We create a Request object which can\\n\\\/\\\/ make HTTP requests.\\n\\\/\\\/ MacStories provide their news in a JSON\\n\\\/\\\/ feed. The Request object can automatically\\n\\\/\\\/ parse JSON by calling the \\\"\"loadJSON()\\\"\"\\n\\\/\\\/ function. Note that \\\"\"await\\\"\" keyword here.\\n\\\/\\\/ \\\"\"loadJSON()\\\"\" returns a native JavaScript\\n\\\/\\\/ promise. This is an object which will\\n\\\/\\\/ provide a value sometime in the future.\\n\\\/\\\/ We use \\\"\"await\\\"\" to wait for this value\\n\\\/\\\/ and halt execution of the script in the \\n\\\/\\\/ mean time.\\nlet url = \\\"\"https:\\\/\\\/macstories.net\\\/feed\\\/json\\\"\"\\nlet req = new Request(url)\\nlet json = await req.loadJSON()\\n\\\/\\\/ 2. We want to present the articles in a\\n\\\/\\\/ table, so we create a new UITable.\\n\\\/\\\/ A table contains rows which are displayed\\n\\\/\\\/ vertically. A row in turn contains cells\\n\\\/\\\/ which are displayed horizontally.\\nlet table = new UITable()\\nfor (item of json.items) {\\n  \\\/\\\/ For each item, i.e. each story, we\\n  \\\/\\\/ create a row in the table.\\n  let row = new UITableRow()\\n  \\\/\\\/ Call our extractImageURL function to\\n  \\\/\\\/ extract an image URL from the HTML body\\n  \\\/\\\/ of the story.\\n  let body = item[\\\"\"content_html\\\"\"]\\n  let imageURL = extractImageURL(body)\\n  \\\/\\\/ Call our decode() function to decode\\n  \\\/\\\/ HTML entities from the title.\\n  let title = decode(item.title)\\n  \\\/\\\/ Add an image cell to the row. Cells are\\n  \\\/\\\/ displayed in the order they are added,\\n  \\\/\\\/ from left to right.\\n  let imageCell = row.addImageAtURL(imageURL)\\n  \\\/\\\/ Add the title cell to the row.\\n  let titleCell = row.addText(title)\\n  \\\/\\\/ Set the width weights of our cells.\\n  \\\/\\\/ Cell widths are relative. In this case\\n  \\\/\\\/ we have two cells, imageCell with a\\n  \\\/\\\/ widthWeight of 20 and titleCell with a\\n  \\\/\\\/ widthWeight of 80. This gives us a\\n  \\\/\\\/ total widthWeight of 20 + 80 = 100.\\n  \\\/\\\/ So the imageCell will fill 20\\\/100 (20%)\\n  \\\/\\\/ of the available screen space and the\\n  \\\/\\\/ titleCell will fill 80\\\/100 (80%) of\\n  \\\/\\\/ the available screen space.\\n  imageCell.widthWeight = 20\\n  titleCell.widthWeight = 80\\n  \\\/\\\/ Set height of the row and spacing\\n  \\\/\\\/ between cells, in pixels.\\n  row.height = 60\\n  row.cellSpacing = 10\\n  \\\/\\\/ Add the row to the table.\\n  \\\/\\\/ Rows are displayed in the order\\n  \\\/\\\/ they are added.\\n  table.addRow(row)\\n}\\n\\\/\\\/ Presents the table using the QuickLook\\n\\\/\\\/ bridge. \\\"\"Bridges\\\"\" is the concept that\\n\\\/\\\/ allows JavaScript to use native iOS\\n\\\/\\\/ APIs. For example, presenting the table\\n\\\/\\\/ with QuickLook will present a native view\\n\\\/\\\/ containing the table. The same API also\\n\\\/\\\/ works in Siri.\\nQuickLook.present(table)\\n\\\/\\\/ We want Siri to say a kind message when\\n\\\/\\\/ the script is run using a Siri Shortcut.\\n\\\/\\\/ We use the global variable \\\"\"config\\\"\" to\\n\\\/\\\/ determine how the script is being run.\\n\\\/\\\/ The Speech bridge will speak a text using\\n\\\/\\\/ Siri. While this also works when the\\n\\\/\\\/ script is run with the app, it's much\\n\\\/\\\/ more enjoyable when the script is run\\n\\\/\\\/ from a Siri Shortcut.\\nif (config.runsWithSiri) {\\n  Speech.speak(\\\"\"Here's the latest news.\\\"\")\\n}\\n\\n\\\/\\\/ Finds the first image in the HTML and\\n\\\/\\\/ returns its URL. Returns null if no \\n\\\/\\\/ image is found.\\nfunction extractImageURL(html) {\\n  let regex = \\\/<img src=\\\"\"(.*)\\\"\" alt=\\\"\"\\\/\\n  let matches = html.match(regex)\\n  if (matches && matches.length >= 2) {\\n    return matches[1]\\n  } else {\\n    return null\\n  }\\n}\\n\\n\\\/\\\/ Decodes HTML entities in the input\\n\\\/\\\/ string. Returns the result.\\nfunction decode(str) {\\n  let regex = \\\/&#(\\\\d+);\\\/g\\n  return str.replace(regex, (match, dec) => {\\n    return String.fromCharCode(dec)\\n  })\\n}\"\",\n  \"\"share_sheet_inputs\"\" : [\n    \"\"plain-text\"\",\n    \"\"image\"\",\n    \"\"url\"\",\n    \"\"file-url\"\"\n  ]\n}\",\"\",0,false,JavaScript\n\"2F86128D-EDF9-4303-9056-4D56F261C05C\",2019-01-15T08:54:32Z,-90.03364552113943,38.64673471614147,2019-01-15T08:54:32Z,-90.03364552113943,38.64673471614147,2019-01-15T08:54:32Z,\"{\n  \"\"always_run_in_app\"\" : true,\n  \"\"icon\"\" : {\n    \"\"color\"\" : \"\"deep-gray\"\",\n    \"\"glyph\"\" : \"\"magic\"\"\n  },\n  \"\"name\"\" : \"\"kiamet\"\",\n  \"\"script\"\" : \"\"$ sudo apt update\\n$ sudo apt install build-essential libmicrohttpd-dev git libpcap-dev libsqlite3-dev\\n\"\",\n  \"\"share_sheet_inputs\"\" : [\n    \"\"file-url\"\",\n    \"\"url\"\",\n    \"\"image\"\",\n    \"\"plain-text\"\"\n  ]\n}\",\"\",0,false,JavaScript\n\"8F824A87-0BD5-44FF-A022-222AC2FE475E\",2019-01-15T08:55:14Z,-90.03153540202419,38.638736894390206,2019-01-15T09:47:09Z,-90.03215642200668,38.63817609561559,2019-01-15T09:46:55Z,\"\n-\n\",\"\",0,false,JavaScript\n\"4A5C22EC-4329-4DF7-A285-BADFC0885E90\",2019-01-15T09:48:02Z,-90.03196915726089,38.638270644901695,2019-01-15T09:48:15Z,-90.03196915726089,38.638270644901695,2019-01-15T09:48:02Z,\"_[\np]()\",\"\",0,false,JavaScript\n\"58C6C56D-2356-45B4-A99C-7D4E6CECA339\",2019-01-15T10:26:46Z,-90.03203345767437,38.63823902775128,2019-01-15T10:26:52Z,-90.03203345767437,38.63823902775128,2019-01-15T10:26:52Z,\"#  Welcome to Pythonista\n\nThank you for downloading Pythonista! You now have everything you need to build and run Python scripts directly on your iPhone or iPad. \n\nTo give you an idea of what you can do with the app, various sample scripts are included in the *Examples* folder. Feel free to use them as starting points for your own experiments. To share your creations, get help with coding problems, or just to meet fellow Pythonistas, please visit our [community forum](http:\/\/forum.omz-software.com).\n\n\n#  Getting Started\n\nIf you're new to Pythonista, here are some tips to help you get up and running:\n\n*\tTo create a new script, first tap `≡` to reveal the library, then `+` (at the bottom). You can also use left and right swipe gestures to switch between the file browser, editor, and console panels. \n\n*\tThe settings (\"\"gear\"\" button in the file browser) contain useful options to customize the editor font, color theme, indentation type (tabs\/spaces), and much more.\n\n*\tSwipe left to show the **console** panel. This is where text output appears, and you can use the prompt at the bottom to evaluate individual lines of Python code directly.\n\n*\tYou'll also find the included **documentation** in the console panel; simply tap the `(?)` button to open it in a separate tab. Reference documentation is also available while you're editing code -- simply select a word (e.g. a function name), and choose *Help…* from the menu.\n\n*\tFor easier navigation in long scripts, tap the file name at the top to show a list of classes and functions. This is also where you can rename the current file.\n\n*\tIf you enjoy coding in Pythonista, please consider leaving a rating or [review in the App Store][review]. Thank you!\n\t💚\n\n#  Tips\n\n*\tTap and hold the run (▷) button for some additional options, e.g. to pass arguments (`sys.argv`) to your scripts, or to run the integrated PEP8 style checker.\n\n*\tTap the *Edit* button in the \"\"wrench\"\" menu to add your own script shortcuts there. You can use this to launch your favorite scripts more quickly, or to extend the editor's functionality with the `editor` module.\n\n*\tA lot of keys on Pythonista's extra keyboard row have multiple mappings. For example, you can tap and hold the tab key to get an unindent option.\n\n*\tTap with two fingers in the editor to select an entire line of code.\n\n*\tYou can run Pythonista scripts directly within other apps that support the standard iOS share sheet. To get started, open the share sheet in a supported app (e.g. Safari, Notes, Maps...) and select \"\"More...\"\" to add the Pythonista action extension. You can use the `appex` module to access data that was passed to the share sheet (e.g. the current URL in Safari, location data in Maps, etc.).\n\n*\tIf you use Pythonista with an external (Bluetooth) keyboard, you can show a list of available shortcuts by pressing and holding the `Cmd` key.\n\n*\tSwipe left on a file in the script library to open it in a new tab or move it to the trash. \n\n\n#  What's New in 3.2\n\nFor full release notes, and to see what was added in previous releases, please refer to the \"\"What's New in Pythonista\"\" page in the documentation. You can also open the release notes from an empty tab. The following are just the highlights: \n\n*\tYou can now sync your scripts via iCloud Drive, and open Python files from other apps.\n\n*\tPythonista now uses Python 3.6. Among other things, this enables the use of f-strings for easier string formatting.\n\n*\tFiles in the script library can be moved via drag'n'drop (requires iOS 11).\n\n*\tThe \"\"Convert Tabs\"\" feature is now called \"\"Reformat Code\"\", and supports applying coding style guidelines, in addition to converting indentation.\n\n*\tImproved search in the script library and documentation.\n\n*\tImproved support for the iPhone X.\n\n*\tThe tab bar UI is now the same on iPhone and iPad.\n\n*\tThe Python interpreter is now built with IPv6 support (this should fix connectivity issues users were experiencing with some cellular providers). \n\n\n# Feedback\n\nI hope you enjoy coding in Pythonista. If you have any feedback, please send an email to <pythonista@omz-software.com>, or visit the [community forum][forum] to share code and get help with your programming questions. You can also find me on Twitter:[@olemoritz][twitter].\n\n---\n\n[forum]: https:\/\/forum.omz-software.com\n[twitter]: http:\/\/twitter.com\/olemoritz\n[review]: itms-apps:\/\/itunes.apple.com\/app\/id1085978097?action=write-review\n\n\",\"\",0,false,JavaScript\n\"53A27213-A1F1-422E-AB27-E91A25088B84\",2019-01-15T10:37:11Z,0.0,0.0,2019-01-15T10:37:24Z,-90.0319093873178,38.63841802726182,2019-01-15T10:37:11Z,\"<!doctype html>\n<html>\n<head>\n  <meta charset=\"\"UTF-8\"\">\n  <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n  <title>hello, world<\/title>\n  <link rel=\"\"stylesheet\"\" href=\"\"vendor\/bootstrap\/css\/bootstrap.min.css\"\">\n  <link rel=\"\"stylesheet\"\" href=\"\"style.css\"\">\n<\/head>\n<body>\n  <div class=\"\"container\"\">\n    <h1>hello, world<\/h1>\n    <hr>\n    <p>\n      <a href=\"\"#\"\" class=\"\"btn btn-primary btn-lg\"\" id=\"\"alert\"\">alert<\/a>\n    <\/p>\n  <\/div>\n\n  <script src=\"\"vendor\/jquery.min.js\"\"><\/script>\n  <script src=\"\"vendor\/bootstrap\/js\/bootstrap.min.js\"\"><\/script>\n  <script src=\"\"script.js\"\"><\/script>\n<\/body>[](https:\/\/reference.getdrafts.com\/)\n<\/html>\n\n1\",\"\",0,false,JavaScript\n\"C0E131AB-6EDD-4D8A-B11C-4DD4A05D987E\",2019-01-15T10:37:27Z,-90.0319093873178,38.63841802726182,2019-01-15T10:37:38Z,-90.0319093873178,38.63841802726182,2019-01-15T10:37:27Z,\"## q\",\"\",0,false,JavaScript\n\"DB116496-FADD-4C34-890A-867354E5DCBF\",2019-01-15T19:03:36Z,0.0,0.0,2019-01-15T19:03:36Z,0.0,0.0,2019-01-15T19:03:36Z,\"2019-01-14 17:31:44.927822: [APP] App version: 0.0.20190107 (1); Go backend version: 0.0.20181222\n2019-01-15 13:02:25.119515: [APP] App version: 0.0.20190107 (1); Go backend version: 0.0.20181222\n\",\"\",0,false,JavaScript\n\"7A717533-0CE6-49AB-A65F-D3764E858D81\",2019-01-16T01:48:59Z,0.0,0.0,2019-01-16T01:49:10Z,-90.15862352220917,38.576761833386385,2019-01-16T01:48:59Z,\"\/\/ Variables used by Scriptable.[]()\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: blue; icon-glyph: fileAlt; share-sheet-inputs: url;\n)\n\/\/ Takes a URL to a WWDC session as\n\/\/ input and searches asciiwwdc.com\n\/\/ for the transcript. Works great\n\/\/ when run from the share sheet in\n\/\/ the official WWDC app.\nlet url = args.url[0]\nlet yearRegex = \/wwdc(\\d+)\/\nlet yearMatch = url.match(yearRegex)\nlet year = \"\"20\"\" + yearMatch[1]\nlet sessionRegex = \/\\d+$\/\nlet sessionMatch = url.match(sessionRegex)\nlet session = sessionMatch[0]\nlet asciiURL = \"\"https:\/\/\"\"\n  + \"\"asciiwwdc.com\/\"\" + year\n  + \"\"\/sessions\/\"\" + session\nSafari.open(asciiURL)\",\"\",0,false,JavaScript\n\"F17DF810-E885-4EB2-9140-8D295CC2F93A\",2019-11-01T03:01:13Z,0.0,0.0,2019-11-01T03:01:13Z,0.0,0.0,2019-11-01T03:01:13Z,\"[PyGithub\/PyGithub: Typed interactions with the GitHub API v3](https:\/\/github.com\/PyGithub\/PyGithub)\n\n> \",\"\",0,false,Markdown\n\"7FDAAD71-E933-4483-BFF7-FA80EE9A0D86\",2019-11-06T04:53:30Z,0.0,0.0,2019-11-06T04:53:30Z,0.0,0.0,2019-11-06T04:53:30Z,\"https:\/\/github.com\/rsumner868\/master\/network\/alerts\",\"\",0,false,Markdown\n\"D12C7A34-B1D4-4EE1-AC9F-9DC9C9D57A9E\",2019-11-12T10:54:46Z,0.0,0.0,2019-11-12T10:54:46Z,0.0,0.0,2019-11-12T10:54:46Z,\"<?xml version=\"\"1.0\"\" encoding=\"\"UTF-8\"\"?>\n<ui version=\"\"4.0\"\">\n <class>FAnalysis<\/class>\n <widget class=\"\"QFrame\"\" name=\"\"FAnalysis\"\">\n  <property name=\"\"geometry\"\">\n   <rect>\n    <x>0<\/x>\n    <y>0<\/y>\n    <width>1053<\/width>\n    <height>746<\/height>\n   <\/rect>\n  <\/property>\n  <property name=\"\"sizePolicy\"\">\n   <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Preferred\"\">\n    <horstretch>0<\/horstretch>\n    <verstretch>0<\/verstretch>\n   <\/sizepolicy>\n  <\/property>\n  <property name=\"\"minimumSize\"\">\n   <size>\n    <width>0<\/width>\n    <height>0<\/height>\n   <\/size>\n  <\/property>\n  <property name=\"\"focusPolicy\"\">\n   <enum>Qt::ClickFocus<\/enum>\n  <\/property>\n  <property name=\"\"acceptDrops\"\">\n   <bool>true<\/bool>\n  <\/property>\n  <property name=\"\"windowTitle\"\">\n   <string>Frame<\/string>\n  <\/property>\n  <property name=\"\"frameShape\"\">\n   <enum>QFrame::StyledPanel<\/enum>\n  <\/property>\n  <property name=\"\"frameShadow\"\">\n   <enum>QFrame::Raised<\/enum>\n  <\/property>\n  <property name=\"\"lineWidth\"\">\n   <number>1<\/number>\n  <\/property>\n  <property name=\"\"midLineWidth\"\">\n   <number>0<\/number>\n  <\/property>\n  <layout class=\"\"QHBoxLayout\"\" name=\"\"horizontalLayout_5\"\">\n   <item>\n    <widget class=\"\"QSplitter\"\" name=\"\"splitter\"\">\n     <property name=\"\"styleSheet\"\">\n      <string notr=\"\"true\"\">QSplitter::handle {\n    background-color: #AAAAAA;\n}<\/string>\n     <\/property>\n     <property name=\"\"orientation\"\">\n      <enum>Qt::Vertical<\/enum>\n     <\/property>\n     <property name=\"\"handleWidth\"\">\n      <number>2<\/number>\n     <\/property>\n     <widget class=\"\"QWidget\"\" name=\"\"layoutWidget\"\">\n      <layout class=\"\"QHBoxLayout\"\" name=\"\"horizontalLayout\"\">\n       <item>\n        <layout class=\"\"QVBoxLayout\"\" name=\"\"verticalLayout_4\"\">\n         <item>\n          <layout class=\"\"QHBoxLayout\"\" name=\"\"horizontalLayout_2\"\">\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lSignalNr\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Fixed\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>1:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lSignalName\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"minimumSize\"\">\n              <size>\n               <width>0<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>16777215<\/width>\n               <height>16777215<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"acceptDrops\"\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>Signalname<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QToolButton\"\" name=\"\"btnSaveProto\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Fixed\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>16777215<\/width>\n               <height>16777215<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"baseSize\"\">\n              <size>\n               <width>0<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>Save..<\/string>\n             <\/property>\n             <property name=\"\"icon\"\">\n              <iconset theme=\"\"document-save\"\">\n               <normaloff>.<\/normaloff>.<\/iconset>\n             <\/property>\n            <\/widget>\n           <\/item>\n          <\/layout>\n         <\/item>\n         <item>\n          <widget class=\"\"ProtocolTreeView\"\" name=\"\"treeViewProtocols\"\">\n           <property name=\"\"sizePolicy\"\">\n            <sizepolicy hsizetype=\"\"Minimum\"\" vsizetype=\"\"Preferred\"\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"\"acceptDrops\"\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"\"dragEnabled\"\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"\"dragDropOverwriteMode\"\">\n            <bool>false<\/bool>\n           <\/property>\n           <property name=\"\"dragDropMode\"\">\n            <enum>QAbstractItemView::DragDrop<\/enum>\n           <\/property>\n           <property name=\"\"defaultDropAction\"\">\n            <enum>Qt::IgnoreAction<\/enum>\n           <\/property>\n           <attribute name=\"\"headerVisible\"\">\n            <bool>false<\/bool>\n           <\/attribute>\n          <\/widget>\n         <\/item>\n         <item>\n          <layout class=\"\"QGridLayout\"\" name=\"\"gridLayout_2\"\">\n           <item row=\"\"0\"\" column=\"\"0\"\" colspan=\"\"3\"\">\n            <widget class=\"\"QComboBox\"\" name=\"\"cbProtoView\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"toolTip\"\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;Set the desired view here.&lt;\/p&gt;&lt;p&gt;&lt;br\/&gt;&lt;\/p&gt;&lt;p&gt;You can set the &lt;span style=&quot; font-weight:600;&quot;&gt;alignment&lt;\/span&gt; where evaluation of Hex\/ASCII starts using right-click menu in Bits-View. Use this, to correct &lt;span style=&quot; font-style:italic;&quot;&gt;slided\/missing Bits&lt;\/span&gt; or something like that.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <item>\n              <property name=\"\"text\"\">\n               <string>Bits<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"\"text\"\">\n               <string>Hex<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"\"text\"\">\n               <string>ASCII<\/string>\n              <\/property>\n             <\/item>\n            <\/widget>\n           <\/item>\n           <item row=\"\"1\"\" column=\"\"0\"\" colspan=\"\"3\"\">\n            <widget class=\"\"QComboBox\"\" name=\"\"cbDecoding\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"sizeAdjustPolicy\"\">\n              <enum>QComboBox::AdjustToContents<\/enum>\n             <\/property>\n             <item>\n              <property name=\"\"text\"\">\n               <string>NRZ<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"\"text\"\">\n               <string>Manchester<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"\"text\"\">\n               <string>Manchester II<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"\"text\"\">\n               <string>Differential Manchester<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"\"text\"\">\n               <string>...<\/string>\n              <\/property>\n             <\/item>\n            <\/widget>\n           <\/item>\n          <\/layout>\n         <\/item>\n         <item>\n          <widget class=\"\"QLabel\"\" name=\"\"lEncodingErrors\"\">\n           <property name=\"\"sizePolicy\"\">\n            <sizepolicy hsizetype=\"\"Maximum\"\" vsizetype=\"\"Preferred\"\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"\"text\"\">\n            <string>Decoding errors for block:<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"\"QLabel\"\" name=\"\"lDecodingErrorsValue\"\">\n           <property name=\"\"sizePolicy\"\">\n            <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Preferred\"\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"\"text\"\">\n            <string>0 (0.00%)     <\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"\"QPushButton\"\" name=\"\"btnAnalyze\"\">\n           <property name=\"\"text\"\">\n            <string>Analyze<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"\"QCheckBox\"\" name=\"\"cbShowDiffs\"\">\n           <property name=\"\"sizePolicy\"\">\n            <sizepolicy hsizetype=\"\"Fixed\"\" vsizetype=\"\"Fixed\"\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"\"text\"\">\n            <string>Mark diffs in protocol<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"\"QCheckBox\"\" name=\"\"chkBoxShowOnlyDiffs\"\">\n           <property name=\"\"text\"\">\n            <string>Show only diffs in protocol<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"\"QCheckBox\"\" name=\"\"chkBoxOnlyShowLabelsInProtocol\"\">\n           <property name=\"\"text\"\">\n            <string>Show only labels in protocol<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <spacer name=\"\"verticalSpacer\"\">\n           <property name=\"\"orientation\"\">\n            <enum>Qt::Vertical<\/enum>\n           <\/property>\n           <property name=\"\"sizeHint\"\" stdset=\"\"0\"\">\n            <size>\n             <width>20<\/width>\n             <height>40<\/height>\n            <\/size>\n           <\/property>\n          <\/spacer>\n         <\/item>\n        <\/layout>\n       <\/item>\n       <item>\n        <layout class=\"\"QVBoxLayout\"\" name=\"\"verticalLayout_3\"\">\n         <item>\n          <layout class=\"\"QHBoxLayout\"\" name=\"\"searchLayout\"\">\n           <item>\n            <spacer name=\"\"horizontalSpacer_3\"\">\n             <property name=\"\"orientation\"\">\n              <enum>Qt::Horizontal<\/enum>\n             <\/property>\n             <property name=\"\"sizeType\"\">\n              <enum>QSizePolicy::Fixed<\/enum>\n             <\/property>\n             <property name=\"\"sizeHint\"\" stdset=\"\"0\"\">\n              <size>\n               <width>5<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n            <\/spacer>\n           <\/item>\n           <item>\n            <widget class=\"\"QLineEdit\"\" name=\"\"lineEditSearch\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Expanding\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"acceptDrops\"\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"\"placeholderText\"\">\n              <string>Search Pattern<\/string>\n             <\/property>\n             <property name=\"\"clearButtonEnabled\"\">\n              <bool>true<\/bool>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QComboBox\"\" name=\"\"cbSearchType\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <item>\n              <property name=\"\"text\"\">\n               <string>Sequence<\/string>\n              <\/property>\n             <\/item>\n             <item>\n              <property name=\"\"text\"\">\n               <string>Number<\/string>\n              <\/property>\n             <\/item>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QPushButton\"\" name=\"\"btnFind\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Fixed\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>Find<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QToolButton\"\" name=\"\"btnPrevSearch\"\">\n             <property name=\"\"enabled\"\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>20<\/width>\n               <height>16777215<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>&lt;<\/string>\n             <\/property>\n             <property name=\"\"icon\"\">\n              <iconset theme=\"\"go-previous\"\">\n               <normaloff>.<\/normaloff>.<\/iconset>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lSearchCurrent\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Preferred\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"minimumSize\"\">\n              <size>\n               <width>40<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"styleSheet\"\">\n              <string notr=\"\"true\"\">QLabel\n{\n    qproperty-alignment: AlignCenter;\n}<\/string>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>-<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lSlash\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Preferred\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>\/<\/string>\n             <\/property>\n             <property name=\"\"alignment\"\">\n              <set>Qt::AlignCenter<\/set>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lSearchTotal\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Preferred\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"minimumSize\"\">\n              <size>\n               <width>40<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"styleSheet\"\">\n              <string notr=\"\"true\"\">QLabel\n{\n    qproperty-alignment: AlignCenter;\n}<\/string>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>-<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QToolButton\"\" name=\"\"btnNextSearch\"\">\n             <property name=\"\"enabled\"\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>20<\/width>\n               <height>16777215<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>&gt;<\/string>\n             <\/property>\n             <property name=\"\"icon\"\">\n              <iconset theme=\"\"go-next\"\">\n               <normaloff>.<\/normaloff>.<\/iconset>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QPushButton\"\" name=\"\"btnSelectAll\"\">\n             <property name=\"\"text\"\">\n              <string>Select all<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <spacer name=\"\"horizontalSpacer_2\"\">\n             <property name=\"\"orientation\"\">\n              <enum>Qt::Horizontal<\/enum>\n             <\/property>\n             <property name=\"\"sizeHint\"\" stdset=\"\"0\"\">\n              <size>\n               <width>40<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n            <\/spacer>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"label_2\"\">\n             <property name=\"\"toolTip\"\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;The &lt;span style=&quot; font-weight:600;&quot;&gt;Received Signal Strength Indicator&lt;\/span&gt; indicates the average signal power of the current block.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>RSSI:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lblRSSI\"\">\n             <property name=\"\"toolTip\"\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;The &lt;span style=&quot; font-weight:600;&quot;&gt;Received Signal Strength Indicator&lt;\/span&gt; indicates the average signal power of the current block.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>1.04<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <spacer name=\"\"horizontalSpacer_4\"\">\n             <property name=\"\"orientation\"\">\n              <enum>Qt::Horizontal<\/enum>\n             <\/property>\n             <property name=\"\"sizeHint\"\" stdset=\"\"0\"\">\n              <size>\n               <width>40<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n            <\/spacer>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"label_3\"\">\n             <property name=\"\"toolTip\"\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;The &lt;span style=&quot; font-weight:600;&quot;&gt;Block Start&lt;\/span&gt; is the point in time when a protocol block begins. Additionally the relative time (+ ...) from the previous block is shown.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>Block start:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lTime\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Expanding\"\" vsizetype=\"\"Preferred\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"toolTip\"\">\n              <string>&lt;html&gt;&lt;head\/&gt;&lt;body&gt;&lt;p&gt;The &lt;span style=&quot; font-weight:600;&quot;&gt;Block Start&lt;\/span&gt; is the point in time when a protocol block begins. Additionally the relative time (+ ...) from the previous block is shown.&lt;\/p&gt;&lt;\/body&gt;&lt;\/html&gt;<\/string>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>0 (+0)<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n          <\/layout>\n         <\/item>\n         <item>\n          <widget class=\"\"ProtocolTableView\"\" name=\"\"tblViewProtocol\"\">\n           <property name=\"\"sizePolicy\"\">\n            <sizepolicy hsizetype=\"\"Expanding\"\" vsizetype=\"\"Expanding\"\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"\"acceptDrops\"\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"\"autoFillBackground\"\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"\"frameShape\"\">\n            <enum>QFrame::NoFrame<\/enum>\n           <\/property>\n           <property name=\"\"frameShadow\"\">\n            <enum>QFrame::Sunken<\/enum>\n           <\/property>\n           <property name=\"\"lineWidth\"\">\n            <number>1<\/number>\n           <\/property>\n           <property name=\"\"autoScroll\"\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"\"dragDropMode\"\">\n            <enum>QAbstractItemView::DropOnly<\/enum>\n           <\/property>\n           <property name=\"\"alternatingRowColors\"\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"\"selectionMode\"\">\n            <enum>QAbstractItemView::ExtendedSelection<\/enum>\n           <\/property>\n           <property name=\"\"textElideMode\"\">\n            <enum>Qt::ElideNone<\/enum>\n           <\/property>\n           <property name=\"\"verticalScrollMode\"\">\n            <enum>QAbstractItemView::ScrollPerPixel<\/enum>\n           <\/property>\n           <property name=\"\"horizontalScrollMode\"\">\n            <enum>QAbstractItemView::ScrollPerPixel<\/enum>\n           <\/property>\n           <property name=\"\"showGrid\"\">\n            <bool>false<\/bool>\n           <\/property>\n           <property name=\"\"gridStyle\"\">\n            <enum>Qt::NoPen<\/enum>\n           <\/property>\n           <property name=\"\"sortingEnabled\"\">\n            <bool>false<\/bool>\n           <\/property>\n           <property name=\"\"wordWrap\"\">\n            <bool>false<\/bool>\n           <\/property>\n           <property name=\"\"cornerButtonEnabled\"\">\n            <bool>false<\/bool>\n           <\/property>\n           <attribute name=\"\"horizontalHeaderDefaultSectionSize\"\">\n            <number>40<\/number>\n           <\/attribute>\n          <\/widget>\n         <\/item>\n         <item>\n          <layout class=\"\"QHBoxLayout\"\" name=\"\"horizontalLayout_4\"\">\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lBits\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Fixed\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>16777215<\/width>\n               <height>15<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>Bit:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLineEdit\"\" name=\"\"lBitsSelection\"\">\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>16777215<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"acceptDrops\"\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"\"readOnly\"\">\n              <bool>true<\/bool>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lHex\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Fixed\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>16777215<\/width>\n               <height>15<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>Hex:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLineEdit\"\" name=\"\"lHexSelection\"\">\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>16777215<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"acceptDrops\"\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"\"readOnly\"\">\n              <bool>true<\/bool>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lDecimal\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Fixed\"\" vsizetype=\"\"Fixed\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>16777215<\/width>\n               <height>15<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>Decimal:<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLineEdit\"\" name=\"\"lDecimalSelection\"\">\n             <property name=\"\"maximumSize\"\">\n              <size>\n               <width>16777215<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"acceptDrops\"\">\n              <bool>false<\/bool>\n             <\/property>\n             <property name=\"\"readOnly\"\">\n              <bool>true<\/bool>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <spacer name=\"\"horizontalSpacer\"\">\n             <property name=\"\"orientation\"\">\n              <enum>Qt::Horizontal<\/enum>\n             <\/property>\n             <property name=\"\"sizeHint\"\" stdset=\"\"0\"\">\n              <size>\n               <width>40<\/width>\n               <height>20<\/height>\n              <\/size>\n             <\/property>\n            <\/spacer>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lNumSelectedColumns\"\">\n             <property name=\"\"sizePolicy\"\">\n              <sizepolicy hsizetype=\"\"Fixed\"\" vsizetype=\"\"Preferred\"\">\n               <horstretch>0<\/horstretch>\n               <verstretch>0<\/verstretch>\n              <\/sizepolicy>\n             <\/property>\n             <property name=\"\"minimumSize\"\">\n              <size>\n               <width>40<\/width>\n               <height>0<\/height>\n              <\/size>\n             <\/property>\n             <property name=\"\"text\"\">\n              <string>0<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n           <item>\n            <widget class=\"\"QLabel\"\" name=\"\"lColumnsSelectedText\"\">\n             <property name=\"\"text\"\">\n              <string>Column(s) selected<\/string>\n             <\/property>\n            <\/widget>\n           <\/item>\n          <\/layout>\n         <\/item>\n        <\/layout>\n       <\/item>\n      <\/layout>\n     <\/widget>\n     <widget class=\"\"QWidget\"\" name=\"\"layoutWidget\"\">\n      <layout class=\"\"QHBoxLayout\"\" name=\"\"horizontalLayout_3\"\">\n       <item>\n        <layout class=\"\"QVBoxLayout\"\" name=\"\"verticalLayout_2\"\">\n         <item>\n          <widget class=\"\"QLabel\"\" name=\"\"label\"\">\n           <property name=\"\"sizePolicy\"\">\n            <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Fixed\"\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"\"text\"\">\n            <string>Show these protocol labels:<\/string>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"\"ProtocolLabelListView\"\" name=\"\"listViewLabelNames\"\">\n           <property name=\"\"sizePolicy\"\">\n            <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Preferred\"\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"\"acceptDrops\"\">\n            <bool>false<\/bool>\n           <\/property>\n          <\/widget>\n         <\/item>\n        <\/layout>\n       <\/item>\n       <item>\n        <layout class=\"\"QVBoxLayout\"\" name=\"\"verticalLayout\"\">\n         <property name=\"\"sizeConstraint\"\">\n          <enum>QLayout::SetDefaultConstraint<\/enum>\n         <\/property>\n         <item>\n          <widget class=\"\"QLabel\"\" name=\"\"lblLabelValues\"\">\n           <property name=\"\"sizePolicy\"\">\n            <sizepolicy hsizetype=\"\"Preferred\"\" vsizetype=\"\"Fixed\"\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"\"font\"\">\n            <font>\n             <weight>75<\/weight>\n             <bold>true<\/bold>\n            <\/font>\n           <\/property>\n           <property name=\"\"text\"\">\n            <string>Label values for block<\/string>\n           <\/property>\n           <property name=\"\"alignment\"\">\n            <set>Qt::AlignCenter<\/set>\n           <\/property>\n          <\/widget>\n         <\/item>\n         <item>\n          <widget class=\"\"LabelValueTableView\"\" name=\"\"tblLabelValues\"\">\n           <property name=\"\"sizePolicy\"\">\n            <sizepolicy hsizetype=\"\"Expanding\"\" vsizetype=\"\"Preferred\"\">\n             <horstretch>0<\/horstretch>\n             <verstretch>0<\/verstretch>\n            <\/sizepolicy>\n           <\/property>\n           <property name=\"\"alternatingRowColors\"\">\n            <bool>true<\/bool>\n           <\/property>\n           <property name=\"\"showGrid\"\">\n            <bool>false<\/bool>\n           <\/property>\n           <attribute name=\"\"horizontalHeaderVisible\"\">\n            <bool>true<\/bool>\n           <\/attribute>\n           <attribute name=\"\"horizontalHeaderCascadingSectionResizes\"\">\n            <bool>false<\/bool>\n           <\/attribute>\n           <attribute name=\"\"horizontalHeaderStretchLastSection\"\">\n            <bool>true<\/bool>\n           <\/attribute>\n           <attribute name=\"\"verticalHeaderVisible\"\">\n            <bool>false<\/bool>\n           <\/attribute>\n          <\/widget>\n         <\/item>\n        <\/layout>\n       <\/item>\n      <\/layout>\n     <\/widget>\n    <\/widget>\n   <\/item>\n  <\/layout>\n <\/widget>\n <customwidgets>\n  <customwidget>\n   <class>ProtocolLabelListView<\/class>\n   <extends>QListView<\/extends>\n   <header>urh.ui.views.ProtocolLabelListView.h<\/header>\n  <\/customwidget>\n  <customwidget>\n   <class>ProtocolTableView<\/class>\n   <extends>QTableView<\/extends>\n   <header>urh.ui.views.ProtocolTableView.h<\/header>\n  <\/customwidget>\n  <customwidget>\n   <class>LabelValueTableView<\/class>\n   <extends>QTableView<\/extends>\n   <header>urh.ui.views.LabelValueTableView.h<\/header>\n  <\/customwidget>\n  <customwidget>\n   <class>ProtocolTreeView<\/class>\n   <extends>QTreeView<\/extends>\n   <header>urh.ui.views.ProtocolTreeView.h<\/header>\n  <\/customwidget>\n <\/customwidgets>\n <resources>\n  <include location=\"\"..\/urh.qrc\"\"\/>\n <\/resources>\n <connections\/>\n<\/ui>\n\",\"\",0,false,Markdown\n\"1267948D-7C7C-47FE-A4FE-743A6C50B1E2\",2019-11-14T08:18:11Z,0.0,0.0,2019-11-14T08:18:11Z,0.0,0.0,2019-11-14T08:18:11Z,\"[github-syntax-theme-generator\/LICENSE at master · primer\/github-syntax-theme-generator](https:\/\/github.com\/primer\/github-syntax-theme-generator\/blob\/master\/LICENSE)\n\n> \",\"\",0,false,Markdown\n\"B2F6610B-E931-4981-8361-EBDEAAAB8EFA\",2019-11-14T08:38:09Z,0.0,0.0,2019-11-14T08:38:09Z,0.0,0.0,2019-11-14T08:38:09Z,\"[Installing Review Notebook App](https:\/\/github.com\/apps\/review-notebook-app\/installations\/new\/permissions?target_id=40968075)\n\n> \",\"\",0,false,Markdown\n\"6A0220DE-D1D3-40D8-9EC9-7AFA36BCF98C\",2019-11-16T00:30:55Z,0.0,0.0,2019-11-16T00:30:55Z,0.0,0.0,2019-11-16T00:30:55Z,\"[Collection: Learn to Code](https:\/\/github.com\/collections\/learn-to-code)\n\n> \",\"\",0,false,Markdown\n\"88205377-6C63-48C3-8409-6121D7864CB7\",2019-11-16T02:15:59Z,0.0,0.0,2019-11-16T02:15:59Z,0.0,0.0,2019-11-16T02:15:59Z,\"couldn’t\",\"\",0,false,Markdown\n\"2B4F243E-3655-47D2-97AC-C882A68D4F88\",2019-11-23T12:42:08Z,0.0,0.0,2019-11-23T12:42:08Z,0.0,0.0,2019-11-23T12:42:08Z,\"[G Suite: Collaboration & Productivity Apps for Business](https:\/\/gsuite.google.com\/?utm_source=gdn&utm_medium=display&utm_campaign=na-US_CA-en-dr-rmkt-xsell-gmb-trial-none-gdn-1003894&utm_content=image-freetrial-none-none-DEV_all-CRE_%7Bcreative%7D-ADGP_gmail&gclid=EAIaIQobChMI1O681q2A5gIVIyWtBh3xBw6SEAEYASAAEgJwPvD_BwE&gclsrc=aw.ds)\n\n> \",\"\",0,false,Markdown\n\"80D677F8-ACA6-4937-A5EE-60D27EDB879D\",2019-11-24T21:49:46Z,0.0,0.0,2019-11-24T21:49:46Z,0.0,0.0,2019-11-24T21:49:46Z,\"function runAsync(obj, method, args) {\n  return new Promise((resolve, reject) => {\n    const cb = (err, ...returnValues) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(returnValues);\n      }\n    };\n    method.apply(obj, [...args, cb]);\n  });\n}\n\nfunction muteStderr() {\n  const original = process.stderr.write;\n  process.stderr.write = () => {};\n  return () => {\n    process.stderr.write = original;\n  };\n}\n\nmodule.exports = {\n  runAsync,\n  muteStderr\n};\n\",\"\",0,false,Markdown\n\"D8DF5D88-D2E8-417D-BDD0-6CCC9B834563\",2019-11-28T14:03:43Z,0.0,0.0,2019-11-28T14:05:31Z,0.0,0.0,2019-11-28T14:03:51Z,\"[Restore access to your Parallels licenses after Sign In With Apple](https:\/\/kb.parallels.com\/en\/124725)\n\n>MAGGIES14902 \n\n\",\"\",0,false,Markdowns ",
    "modified_longitude" : 0,
    "modified_at" : "2019-11-29T01:23:02Z",
    "folder" : 0,
    "flagged" : false,
    "uuid" : "505D3496-19B8-47DA-A5A1-FCF8CD6394CC",
    "modified_latitude" : 0,
    "tags" : [

    ],
    "languageGrammar" : "Markdown",
    "created_longitude" : 0,
    "created_at" : "2019-11-28T15:11:20Z"
  },
  {
    "created_longitude" : 0,
    "languageGrammar" : "Markdown",
    "created_at" : "2019-11-28T15:19:07Z",
    "uuid" : "86DD7702-4BB8-4063-B56D-7353FCF48C1C",
    "accessed_at" : "2019-11-28T15:19:11Z",
    "content" : "[Amazon Web Services Sign-In](https:\/\/signin.aws.amazon.com\/signin?redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fsupport%2Fplans%2Fhome%3Fstate%3DhashArgs%2523%252F%26isauthcode%3Dtrue&client_id=arn%3Aaws%3Aiam%3A%3A015428540659%3Auser%2Fsupportcenter&forceMobileApp=0)\n\n> ",
    "modified_at" : "2019-11-28T15:19:11Z",
    "modified_latitude" : 0,
    "folder" : 0,
    "created_latitude" : 0,
    "tags" : [

    ],
    "flagged" : false,
    "modified_longitude" : 0
  },
  {
    "folder" : 0,
    "created_longitude" : 0,
    "created_at" : "2019-11-29T01:28:00Z",
    "accessed_at" : "2019-11-29T22:26:50Z",
    "flagged" : false,
    "created_latitude" : 0,
    "uuid" : "4C35DE10-58DD-4400-A139-8DE7664F8491",
    "tags" : [

    ],
    "modified_longitude" : 0,
    "content" : "\n",
    "modified_latitude" : 0,
    "modified_at" : "2019-11-29T01:28:05Z",
    "languageGrammar" : "Markdown"
  },
  {
    "created_longitude" : 0,
    "created_latitude" : 0,
    "folder" : 0,
    "accessed_at" : "2019-11-30T13:14:48Z",
    "content" : "commit 1e18cdb7511ca4e692a170b51082ebaafbc7bbd7\nAuthor:     Johannes Pohl <Johannes.Pohl90@gmail.com>\nAuthorDate: Mon May 20 03:41:21 CDT 2019\nCommit:     GitHub <noreply@github.com>\nCommitDate: Mon May 20 03:41:21 CDT 2019\n\n    More accurate logic analysis (#403)\n    \n    \n\ndiff --git a\/data\/azure-pipelines.yml b\/data\/azure-pipelines.yml\nindex 22f85c5..3eecef0 100644\n--- a\/data\/azure-pipelines.yml\n+++ b\/data\/azure-pipelines.yml\n@@ -56,9 +56,13 @@\n       touch tests\/show_gui\n       cp tests\/.coveragerc .\n       pytest --junitxml=junit\/test-results.xml --cov=src --cov-config=.coveragerc tests\n+    displayName: 'Run pytest with coverage'\n+    condition: eq(variables['python.version'], '3.7')\n+\n+  - script: |\n       coverage xml\n       coverage html\n-    displayName: 'Run pytest with coverage'\n+    displayName: 'Generate coverage report'\n     condition: eq(variables['python.version'], '3.7')\n \n   - script: pytest --junitxml=junit\/test-results.xml tests\ndiff --git a\/data\/requirements.txt b\/data\/requirements.txt\nindex 644ca14..b366703 100644\n--- a\/data\/requirements.txt\n+++ b\/data\/requirements.txt\n@@ -1,8 +1,8 @@\n-numpy; sys_platform != 'win32'\n-numpy!=1.16.0; sys_platform == 'win32'\n+numpy>=1.9; sys_platform != 'win32'\n+numpy>=1.9,!=1.16.0; sys_platform == 'win32'\n pyqt5; sys_platform != 'win32' and sys_platform != 'linux'\n pyqt5!=5.11.1,!=5.11.2,!=5.11.3; sys_platform == 'win32'\n-pyqt5!=5.12,!=5.12.1; sys_platform == 'linux'\n+pyqt5!=5.12,!=5.12.1,!=5.12.2; sys_platform == 'linux'\n psutil\n pyzmq\n cython\ndiff --git a\/src\/urh\/awre\/AutoAssigner.py b\/src\/urh\/awre\/AutoAssigner.py\nnew file mode 100644\nindex 0000000..6b37d9a\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/AutoAssigner.py\n@@ -0,0 +1,65 @@\n+import numpy as np\n+\n+from urh.cythonext import util\n+from urh.signalprocessing.Message import Message\n+\n+\n+def auto_assign_participants(messages, participants):\n+    \"\"\"\n+\n+    :type messages: list of Message\n+    :type participants: list of Participant\n+    :return:\n+    \"\"\"\n+    if len(participants) == 0:\n+        return\n+\n+    if len(participants) == 1:\n+        for message in messages:  # type: Message\n+            message.participant = participants[0]\n+        return\n+\n+    # Try to assign participants based on SRC_ADDRESS label and participant address\n+    for msg in filter(lambda m: m.participant is None, messages):\n+        src_address = msg.get_src_address_from_data()\n+        if src_address:\n+            try:\n+                msg.participant = next(p for p in participants if p.address_hex == src_address)\n+            except StopIteration:\n+                pass\n+\n+    # Assign remaining participants based on RSSI of messages\n+    rssis = np.array([msg.rssi for msg in messages], dtype=np.float32)\n+    min_rssi, max_rssi = util.minmax(rssis)\n+    center_spacing = (max_rssi - min_rssi) \/ (len(participants) - 1)\n+    centers = [min_rssi + i * center_spacing for i in range(0, len(participants))]\n+    rssi_assigned_centers = []\n+\n+    for rssi in rssis:\n+        center_index = np.argmin(np.abs(rssi - centers))\n+        rssi_assigned_centers.append(int(center_index))\n+\n+    participants.sort(key=lambda participant: participant.relative_rssi)\n+    for message, center_index in zip(messages, rssi_assigned_centers):\n+        if message.participant is None:\n+            message.participant = participants[center_index]\n+\n+\n+def auto_assign_participant_addresses(messages, participants):\n+    \"\"\"\n+\n+    :type messages: list of Message\n+    :type participants: list of Participant\n+    :return:\n+    \"\"\"\n+    participants_without_address = [p for p in participants if not p.address_hex]\n+\n+    if len(participants_without_address) == 0:\n+        return\n+\n+    for msg in messages:\n+        if msg.participant in participants_without_address:\n+            src_address = msg.get_src_address_from_data()\n+            if src_address:\n+                participants_without_address.remove(msg.participant)\n+                msg.participant.address_hex = src_address\ndiff --git a\/src\/urh\/awre\/CommonRange.py b\/src\/urh\/awre\/CommonRange.py\nindex bffe369..a7f1c50 100644\n--- a\/src\/urh\/awre\/CommonRange.py\n+++ b\/src\/urh\/awre\/CommonRange.py\n@@ -1,65 +1,296 @@\n+import copy\n+import itertools\n+\n+import numpy as np\n+\n+from urh.util import util\n+from urh.util.GenericCRC import GenericCRC\n+\n+\n class CommonRange(object):\n-\n-    __slots__ = [\"start\", \"end\", \"__bits\", \"__hex\", \"messages\"]\n-\n-    def __init__(self, start: int, end: int, bits: str):\n+    def __init__(self, start, length, value: np.ndarray = None, score=0, field_type=\"Generic\", message_indices=None,\n+                 range_type=\"bit\", byte_order=\"big\"):\n         \"\"\"\n \n-        :param start: Start of the common range\n-        :param end: End of the common range\n-        :param bits: Value of the common range\n+        :param start:\n+        :param length:\n+        :param value: Value for this common range as string\n         \"\"\"\n         self.start = start\n-        self.end = end\n-        self.__bits = bits\n-        self.__hex = (\"{0:0\"+str(len(self.__bits)\/\/4)+\"x}\").format(int(self.__bits, 2))\n-        self.messages = set()\n-        \"\"\":type: set of int \"\"\"\n+        self.length = length\n+\n+        self.__byte_order = byte_order\n+        self.sync_end = 0\n+\n+        if isinstance(value, str):\n+            value = np.array(list(map(lambda x: int(x, 16), value)), dtype=np.uint8)\n+\n+        self.values = [value] if value is not None else []\n+        self.score = score\n+        self.field_type = field_type  # can also be length, address etc.\n+\n+        self.range_type = range_type.lower()  # one of bit\/hex\/byte\n+\n+        self.message_indices = set() if message_indices is None else set(message_indices)\n+        \"\"\"\n+        Set of message indices, this range applies to\n+        \"\"\"\n \n     @property\n-    def bits(self) -> str:\n-        return self.__bits\n+    def end(self):\n+        return self.start + self.length - 1\n \n     @property\n-    def hex_value(self) -> str:\n-        return self.__hex\n+    def bit_start(self):\n+        return self.__convert_number(self.start) + self.sync_end\n \n     @property\n-    def byte_len(self) -> int:\n-        return (self.end - self.start) \/\/ 8\n+    def bit_end(self):\n+        return self.__convert_number(self.start) + self.__convert_number(self.length) - 1 + self.sync_end\n \n-    def __len__(self):\n-        return self.end - self.start\n+    @property\n+    def length_in_bits(self):\n+        return self.bit_end - self.bit_start - 1\n \n-    def __hash__(self):\n-        return hash(self.start) + hash(self.end) + hash(self.bits)\n-\n-    def pos_of_hex(self, hex_str) -> tuple:\n-        try:\n-            start = 4 * self.hex_value.index(hex_str)\n-            return start, start + 4 * len(hex_str)\n-        except ValueError:\n+    @property\n+    def value(self):\n+        if len(self.values) == 0:\n             return None\n-\n-    @staticmethod\n-    def from_hex(hex_str):\n-        return CommonRange(start=0, end=0, bits=\"{0:b}\".format(int(hex_str, 16)))\n-\n-    def __eq__(self, other):\n-        if isinstance(other, CommonRange):\n-            return self.start == other.start and self.end == other.end and self.bits == other.bits\n+        elif len(self.values) == 1:\n+            return self.values[0]\n         else:\n-            return False\n+            raise ValueError(\"This range has multiple values!\")\n \n-    def __lt__(self, other):\n-        if isinstance(other, CommonRange):\n-            if self.start != other.start:\n-                return self.start < other.start\n-            else:\n-                return self.end <= other.end\n+    @value.setter\n+    def value(self, val):\n+        if len(self.values) == 0:\n+            self.values = [val]\n+        elif len(self.values) == 1:\n+            self.values[0] = val\n         else:\n-            return -1\n+            raise ValueError(\"This range has multiple values!\")\n+\n+    @property\n+    def byte_order(self):\n+        if self.byte_order_is_unknown:\n+            return \"big\"\n+        return self.__byte_order\n+\n+    @byte_order.setter\n+    def byte_order(self, val: str):\n+        self.__byte_order = val\n+\n+    @property\n+    def byte_order_is_unknown(self) -> bool:\n+        return self.__byte_order is None\n+\n+    def matches(self, start: int, value: np.ndarray):\n+        return self.start == start and \\\n+               self.length == len(value) and \\\n+               self.value.tobytes() == value.tobytes()\n+\n+    def __convert_number(self, n):\n+        if self.range_type == \"bit\":\n+            return n\n+        elif self.range_type == \"hex\":\n+            return n * 4\n+        elif self.range_type == \"byte\":\n+            return n * 8\n+        else:\n+            raise ValueError(\"Unknown range type {}\".format(self.range_type))\n \n     def __repr__(self):\n-        return \"{}-{} {} ({})\".format(self.start,  self.end, self.hex_value, self.messages)\n-        \n+        result = \"{} {}-{} ({} {})\".format(self.field_type, self.bit_start,\n+                                           self.bit_end, self.length, self.range_type)\n+\n+        result += \" Values: \" + \" \".join(map(util.convert_numbers_to_hex_string, self.values))\n+        if self.score is not None:\n+            result += \" Score: \" + str(self.score)\n+        result += \" Message indices: {\" + \",\".join(map(str, sorted(self.message_indices))) + \"}\"\n+        return result\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, CommonRange):\n+            return False\n+\n+        return self.bit_start == other.bit_start and \\\n+               self.bit_end == other.bit_end and \\\n+               self.field_type == other.field_type\n+\n+    def __hash__(self):\n+        return hash((self.start, self.length, self.field_type))\n+\n+    def __lt__(self, other):\n+        return self.bit_start < other.bit_start\n+\n+    def overlaps_with(self, other) -> bool:\n+        if not isinstance(other, CommonRange):\n+            raise ValueError(\"Need another bit range to compare\")\n+        return any(i in range(self.bit_start, self.bit_end)\n+                   for i in range(other.bit_start, other.bit_end))\n+\n+    def ensure_not_overlaps(self, start: int, end: int):\n+        \"\"\"\n+\n+        :param start:\n+        :param end:\n+        :rtype: list of CommonRange\n+        \"\"\"\n+        if end < self.start or start > self.end:\n+            # Other range is right or left of our range -> no overlapping\n+            return [copy.deepcopy(self)]\n+\n+        if start <= self.start < end < self.end:\n+            # overlaps on the left\n+            result = copy.deepcopy(self)\n+            result.length -= end - result.start\n+            result.start = end\n+            result.value = result.value[result.start-self.start:(result.start-self.start)+result.length]\n+            return [result]\n+\n+        if self.start < start <= self.end <= end:\n+            # overlaps on the right\n+            result = copy.deepcopy(self)\n+            result.length -= self.end + 1 - start\n+            result.value = result.value[:result.length]\n+            return [result]\n+\n+        if self.start < start and self.end > end:\n+            # overlaps in the middle\n+            left = copy.deepcopy(self)\n+            right = copy.deepcopy(self)\n+\n+            left.length -= (left.end + 1 - start)\n+            left.value = self.value[:left.length]\n+\n+            right.start = end + 1\n+            right.length = self.end - end\n+            right.value = self.value[right.start-self.start:(right.start-self.start)+right.length]\n+            return [left, right]\n+\n+        return []\n+\n+\n+class ChecksumRange(CommonRange):\n+    def __init__(self, start, length, crc: GenericCRC, data_range_start, data_range_end, value: np.ndarray = None,\n+                 score=0, field_type=\"Generic\", message_indices=None, range_type=\"bit\"):\n+        super().__init__(start, length, value, score, field_type, message_indices, range_type)\n+        self.data_range_start = data_range_start\n+        self.data_range_end = data_range_end\n+        self.crc = crc\n+\n+    @property\n+    def data_range_bit_start(self):\n+        return self.data_range_start + self.sync_end\n+\n+    @property\n+    def data_range_bit_end(self):\n+        return self.data_range_end + self.sync_end\n+\n+    def __eq__(self, other):\n+        return super().__eq__(other) \\\n+               and self.data_range_start == other.data_range_start \\\n+               and self.data_range_end == other.data_range_end \\\n+               and self.crc == other.crc\n+\n+    def __hash__(self):\n+        return hash((self.start, self.length, self.data_range_start, self.data_range_end, self.crc))\n+\n+    def __repr__(self):\n+        return super().__repr__() + \" \\t\" + \\\n+               \"{}\".format(self.crc.caption) + \\\n+               \" Datarange: {}-{} \".format(self.data_range_start, self.data_range_end)\n+\n+\n+class EmptyCommonRange(CommonRange):\n+    \"\"\"\n+    Empty Common Bit Range, to indicate, that no common Bit Range was found\n+    \"\"\"\n+\n+    def __init__(self, field_type=\"Generic\"):\n+        super().__init__(0, 0, \"\")\n+        self.field_type = field_type\n+\n+    def __eq__(self, other):\n+        return isinstance(other, EmptyCommonRange) \\\n+               and other.field_type == self.field_type\n+\n+    def __repr__(self):\n+        return \"No \" + self.field_type\n+\n+    def __hash__(self):\n+        return hash(super)\n+\n+\n+class CommonRangeContainer(object):\n+    \"\"\"\n+    This is the raw equivalent of a Message Type:\n+    A container of common ranges\n+    \"\"\"\n+\n+    def __init__(self, ranges: list, message_indices: set = None):\n+\n+        assert isinstance(ranges, list)\n+\n+        self.__ranges = ranges  # type: list[CommonRange]\n+        self.__ranges.sort()\n+\n+        if message_indices is None:\n+            self.update_message_indices()\n+        else:\n+            self.message_indices = message_indices\n+\n+    @property\n+    def ranges_overlap(self) -> bool:\n+        return self.has_overlapping_ranges(self.__ranges)\n+\n+    def update_message_indices(self):\n+        if len(self) == 0:\n+            self.message_indices = set()\n+        else:\n+            self.message_indices = set(self[0].message_indices)\n+            for i in range(1, len(self)):\n+                self.message_indices.intersection_update(self[i].message_indices)\n+\n+    def add_range(self, rng: CommonRange):\n+        self.__ranges.append(rng)\n+        self.__ranges.sort()\n+\n+    def add_ranges(self, ranges: list):\n+        self.__ranges.extend(ranges)\n+        self.__ranges.sort()\n+\n+    def has_same_ranges(self, ranges: list) -> bool:\n+        return self.__ranges == ranges\n+\n+    def has_same_ranges_as_container(self, container):\n+        if not isinstance(container, CommonRangeContainer):\n+            return False\n+\n+        return self.__ranges == container.__ranges\n+\n+    @staticmethod\n+    def has_overlapping_ranges(ranges: list) -> bool:\n+        for rng1, rng2 in itertools.combinations(ranges, 2):\n+            if rng1.overlaps_with(rng2):\n+                return True\n+        return False\n+\n+    def __len__(self):\n+        return len(self.__ranges)\n+\n+    def __iter__(self):\n+        return self.__ranges.__iter__()\n+\n+    def __getitem__(self, item):\n+        return self.__ranges[item]\n+\n+    def __repr__(self):\n+        from pprint import pformat\n+        return pformat(self.__ranges)\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, CommonRangeContainer):\n+            return False\n+\n+        return self.__ranges == other.__ranges and self.message_indices == other.message_indices\ndiff --git a\/src\/urh\/awre\/FormatFinder.py b\/src\/urh\/awre\/FormatFinder.py\nindex c78aa5e..119ab83 100644\n--- a\/src\/urh\/awre\/FormatFinder.py\n+++ b\/src\/urh\/awre\/FormatFinder.py\n@@ -1,112 +1,427 @@\n+import copy\n+import math\n+from collections import defaultdict\n+\n import numpy as np\n-import time\n \n+from urh.awre import AutoAssigner\n+from urh.awre.CommonRange import CommonRange, EmptyCommonRange, CommonRangeContainer, ChecksumRange\n+from urh.awre.Preprocessor import Preprocessor\n+from urh.awre.engines.AddressEngine import AddressEngine\n+from urh.awre.engines.ChecksumEngine import ChecksumEngine\n+from urh.awre.engines.LengthEngine import LengthEngine\n+from urh.awre.engines.SequenceNumberEngine import SequenceNumberEngine\n+from urh.cythonext import awre_util\n+from urh.signalprocessing.ChecksumLabel import ChecksumLabel\n from urh.signalprocessing.FieldType import FieldType\n-from urh.util.Logger import logger\n+from urh.signalprocessing.Message import Message\n+from urh.signalprocessing.MessageType import MessageType\n+from urh.signalprocessing.ProtocoLabel import ProtocolLabel\n+from urh.util.WSPChecksum import WSPChecksum\n \n-from urh.awre.components.Address import Address\n-from urh.awre.components.Component import Component\n-from urh.awre.components.Flags import Flags\n-from urh.awre.components.Length import Length\n-from urh.awre.components.Preamble import Preamble\n-from urh.awre.components.SequenceNumber import SequenceNumber\n-from urh.awre.components.Type import Type\n-from urh.cythonext import util\n \n class FormatFinder(object):\n-    MIN_MESSAGES_PER_CLUSTER = 2 # If there is only one message per cluster it is not very significant\n+    MIN_MESSAGES_PER_CLUSTER = 2\n \n-    def __init__(self, protocol, participants=None, field_types=None):\n+    def __init__(self, messages, participants=None, shortest_field_length=None):\n         \"\"\"\n \n-        :type protocol: urh.signalprocessing.ProtocolAnalyzer.ProtocolAnalyzer\n+        :type messages: list of Message\n         :param participants:\n         \"\"\"\n         if participants is not None:\n-            protocol.auto_assign_participants(participants)\n+            AutoAssigner.auto_assign_participants(messages, participants)\n \n-        self.protocol = protocol\n-        self.bitvectors = [np.array(msg.decoded_bits, dtype=np.int8) for msg in self.protocol.messages]\n-        self.len_cluster = self.cluster_lengths()\n-        self.xor_matrix = self.build_xor_matrix()\n+        existing_message_types_by_msg = {i: msg.message_type for i, msg in enumerate(messages)}\n+        self.existing_message_types = defaultdict(list)\n+        for i, message_type in existing_message_types_by_msg.items():\n+            self.existing_message_types[message_type].append(i)\n \n+        preprocessor = Preprocessor(self.get_bitvectors_from_messages(messages), existing_message_types_by_msg)\n+        self.preamble_starts, self.preamble_lengths, sync_len = preprocessor.preprocess()\n+        self.sync_ends = self.preamble_starts + self.preamble_lengths + sync_len\n \n-        mt = self.protocol.message_types\n+        n = shortest_field_length\n+        if n is None:\n+            # 0 = no sync found\n+            n = 8 if sync_len >= 8 else 4 if sync_len >= 4 else 1 if sync_len >= 1 else 0\n \n-        field_types = FieldType.load_from_xml() if field_types is None else field_types\n+        for i, value in enumerate(self.sync_ends):\n+            # In doubt it is better to under estimate the sync end\n+            if n > 0:\n+                self.sync_ends[i] = n * max(int(math.floor((value - self.preamble_starts[i]) \/ n)), 1) + \\\n+                                    self.preamble_starts[i]\n+            else:\n+                self.sync_ends[i] = self.preamble_starts[i]\n \n-        self.preamble_component = Preamble(fieldtypes=field_types, priority=0, messagetypes=mt)\n-        self.length_component = Length(fieldtypes=field_types, length_cluster=self.len_cluster, priority=1,\n-                                       predecessors=[self.preamble_component], messagetypes=mt)\n-        self.address_component = Address(fieldtypes=field_types, xor_matrix=self.xor_matrix, priority=2,\n-                                         predecessors=[self.preamble_component], messagetypes=mt)\n-        self.sequence_number_component = SequenceNumber(fieldtypes=field_types, priority=3,\n-                                                        predecessors=[self.preamble_component])\n-        self.type_component = Type(priority=4, predecessors=[self.preamble_component])\n-        self.flags_component = Flags(priority=5, predecessors=[self.preamble_component])\n+            if self.sync_ends[i] - self.preamble_starts[i] < self.preamble_lengths[i]:\n+                self.preamble_lengths[i] = self.sync_ends[i] - self.preamble_starts[i]\n \n-    def build_component_order(self):\n+        self.bitvectors = self.get_bitvectors_from_messages(messages, self.sync_ends)\n+        self.hexvectors = self.get_hexvectors(self.bitvectors)\n+        self.current_iteration = 0\n+\n+        participants = list(sorted(set(msg.participant for msg in messages if msg.participant is not None)))\n+        self.participant_indices = [participants.index(msg.participant) if msg.participant is not None else -1\n+                                    for msg in messages]\n+        self.known_participant_addresses = {\n+            participants.index(p): np.array([int(h, 16) for h in p.address_hex], dtype=np.uint8)\n+            for p in participants if p and p.address_hex\n+        }\n+\n+    @property\n+    def message_types(self):\n         \"\"\"\n-        Build the order of component based on their priority and predecessors\n \n-        :rtype: list of Component\n+        :rtype: list of MessageType\n         \"\"\"\n-        present_components = [item for item in self.__dict__.values() if isinstance(item, Component) and item.enabled]\n-        result = [None] * len(present_components)\n-        used_prios = set()\n-        for component in present_components:\n-            index = component.priority % len(present_components)\n-            if index in used_prios:\n-                raise ValueError(\"Duplicate priority: {}\".format(component.priority))\n-            used_prios.add(index)\n+        return sorted(self.existing_message_types.keys(), key=lambda x: x.name)\n \n-            result[index] = component\n+    def perform_iteration_for_message_type(self, message_type: MessageType):\n+        \"\"\"\n+        Perform a field inference iteration for messages of the given message type\n+        This routine will return newly found fields as a set of Common Ranges\n \n-        # Check if predecessors are valid\n-        for i, component in enumerate(result):\n-            if any(i < result.index(pre) for pre in component.predecessors):\n-                raise ValueError(\"Component {} comes before at least one of its predecessors\".format(component))\n+        :param message_type:\n+        :rtype: set of CommonRange\n+        \"\"\"\n+        indices = self.existing_message_types[message_type]\n+        engines = []\n+\n+        # We can take an arbitrary sync end to correct the already labeled fields for this message type,\n+        # because if the existing labels would have different sync positions,\n+        # they would not belong to the same message type in the first place\n+        sync_end = self.sync_ends[indices[0]] if indices else 0\n+        already_labeled = [(lbl.start - sync_end, lbl.end - sync_end) for lbl in message_type if lbl.start >= sync_end]\n+\n+        if not message_type.get_first_label_with_type(FieldType.Function.LENGTH):\n+            engines.append(LengthEngine([self.bitvectors[i] for i in indices], already_labeled=already_labeled))\n+\n+        if not message_type.get_first_label_with_type(FieldType.Function.SRC_ADDRESS):\n+            engines.append(AddressEngine([self.hexvectors[i] for i in indices],\n+                                         [self.participant_indices[i] for i in indices],\n+                                         self.known_participant_addresses,\n+                                         already_labeled=already_labeled))\n+        elif not message_type.get_first_label_with_type(FieldType.Function.DST_ADDRESS):\n+            engines.append(AddressEngine([self.hexvectors[i] for i in indices],\n+                                         [self.participant_indices[i] for i in indices],\n+                                         self.known_participant_addresses,\n+                                         already_labeled=already_labeled,\n+                                         src_field_present=True))\n+\n+        if not message_type.get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER):\n+            engines.append(SequenceNumberEngine([self.bitvectors[i] for i in indices], already_labeled=already_labeled))\n+        if not message_type.get_first_label_with_type(FieldType.Function.CHECKSUM):\n+            # If checksum was not found in first iteration, it will also not be found in next one\n+            if self.current_iteration == 0:\n+                engines.append(ChecksumEngine([self.bitvectors[i] for i in indices], already_labeled=already_labeled))\n+\n+        result = set()\n+        for engine in engines:\n+            high_scored_ranges = engine.find()  # type: list[CommonRange]\n+            high_scored_ranges = self.retransform_message_indices(high_scored_ranges, indices, self.sync_ends)\n+            merged_ranges = self.merge_common_ranges(high_scored_ranges)\n+            result.update(merged_ranges)\n+        return result\n+\n+    def perform_iteration(self) -> bool:\n+        new_field_found = False\n+\n+        for message_type in self.existing_message_types.copy():\n+            new_fields_for_message_type = self.perform_iteration_for_message_type(message_type)\n+            new_fields_for_message_type.update(\n+                self.get_preamble_and_sync(self.preamble_starts, self.preamble_lengths, self.sync_ends,\n+                                           message_type_indices=self.existing_message_types[message_type])\n+            )\n+\n+            self.remove_overlapping_fields(new_fields_for_message_type, message_type)\n+            containers = self.create_common_range_containers(new_fields_for_message_type)\n+\n+            # Store addresses of participants if we found a SRC address field\n+            participants_with_unknown_address = set(self.participant_indices) - set(self.known_participant_addresses)\n+            participants_with_unknown_address.discard(-1)\n+\n+            if participants_with_unknown_address:\n+                for container in containers:\n+                    src_range = next((rng for rng in container if rng.field_type == \"source address\"), None)\n+                    if src_range is None:\n+                        continue\n+                    for msg_index in src_range.message_indices:\n+                        if len(participants_with_unknown_address) == 0:\n+                            break\n+                        p = self.participant_indices[msg_index]\n+                        if p not in self.known_participant_addresses:\n+                            hex_vector = self.hexvectors[msg_index]\n+                            self.known_participant_addresses[p] = hex_vector[src_range.start:src_range.end + 1]\n+                            participants_with_unknown_address.discard(p)\n+\n+            new_field_found |= len(containers) > 0\n+\n+            if len(containers) == 1:\n+                for rng in containers[0]:\n+                    self.add_range_to_message_type(rng, message_type)\n+            elif len(containers) > 1:\n+                del self.existing_message_types[message_type]\n+\n+                for i, container in enumerate(containers):\n+                    new_message_type = copy.deepcopy(message_type)  # type: MessageType\n+\n+                    if i > 0:\n+                        new_message_type.name = \"Inferred #{}\".format(i)\n+                        new_message_type.give_new_id()\n+\n+                    for rng in container:\n+                        self.add_range_to_message_type(rng, new_message_type)\n+\n+                    self.existing_message_types[new_message_type].extend(sorted(container.message_indices))\n+\n+        return new_field_found\n+\n+    def run(self, max_iterations=10):\n+        self.current_iteration = 0\n+        while self.perform_iteration() and self.current_iteration < max_iterations:\n+            self.current_iteration += 1\n+\n+    @staticmethod\n+    def remove_overlapping_fields(common_ranges, message_type: MessageType):\n+        \"\"\"\n+        Remove all fields from a set of CommonRanges which overlap with fields of the existing message type\n+\n+        :type common_ranges: set of CommonRange\n+        :param message_type:\n+        :return:\n+        \"\"\"\n+        if len(message_type) == 0:\n+            return\n+\n+        for rng in common_ranges.copy():\n+            for lbl in message_type:  # type: ProtocolLabel\n+                if any(i in range(rng.bit_start, rng.bit_end) for i in range(lbl.start, lbl.end)):\n+                    common_ranges.discard(rng)\n+                    break\n+\n+    @staticmethod\n+    def merge_common_ranges(common_ranges):\n+        \"\"\"\n+        Merge common ranges if possible\n+\n+        :type common_ranges: list of CommonRange\n+        :rtype: list of CommonRange\n+        \"\"\"\n+        merged_ranges = []\n+        for common_range in common_ranges:\n+            assert isinstance(common_range, CommonRange)\n+            try:\n+                same_range = next(rng for rng in merged_ranges\n+                                  if rng.bit_start == common_range.bit_start\n+                                  and rng.bit_end == common_range.bit_end\n+                                  and rng.field_type == common_range.field_type)\n+                same_range.values.extend(common_range.values)\n+                same_range.message_indices.update(common_range.message_indices)\n+            except StopIteration:\n+                merged_ranges.append(common_range)\n+\n+        return merged_ranges\n+\n+    @staticmethod\n+    def add_range_to_message_type(common_range: CommonRange, message_type: MessageType):\n+        field_type = FieldType.from_caption(common_range.field_type)\n+        label = message_type.add_protocol_label(name=common_range.field_type,\n+                                                start=common_range.bit_start, end=common_range.bit_end,\n+                                                auto_created=True,\n+                                                type=field_type\n+                                                )\n+        label.display_endianness = common_range.byte_order\n+\n+        if field_type.function == FieldType.Function.CHECKSUM:\n+            assert isinstance(label, ChecksumLabel)\n+            assert isinstance(common_range, ChecksumRange)\n+            label.data_ranges = [(common_range.data_range_bit_start, common_range.data_range_bit_end)]\n+\n+            if isinstance(common_range.crc, WSPChecksum):\n+                label.category = ChecksumLabel.Category.wsp\n+            else:\n+                label.checksum = copy.copy(common_range.crc)\n+\n+    @staticmethod\n+    def get_hexvectors(bitvectors: list):\n+        result = awre_util.get_hexvectors(bitvectors)\n+        return result\n+\n+    @staticmethod\n+    def get_bitvectors_from_messages(messages: list, sync_ends: np.ndarray = None):\n+        if sync_ends is None:\n+            sync_ends = defaultdict(lambda: None)\n+\n+        return [np.array(msg.decoded_bits[sync_ends[i]:], dtype=np.uint8, order=\"C\") for i, msg in enumerate(messages)]\n+\n+    @staticmethod\n+    def create_common_range_containers(label_set: set, num_messages: int = None):\n+        \"\"\"\n+        Create message types from set of labels.\n+        Handle overlapping conflicts and create multiple message types if needed\n+\n+        :param label_set:\n+        :param num_messages:\n+        :return:\n+        :rtype: list of CommonRangeContainer\n+        \"\"\"\n+        if num_messages is None:\n+            message_indices = sorted(set(i for rng in label_set for i in rng.message_indices))\n+        else:\n+            message_indices = range(num_messages)\n+\n+        result = []\n+        for i in message_indices:\n+            labels = sorted(set(rng for rng in label_set if i in rng.message_indices\n+                                and not isinstance(rng, EmptyCommonRange)))\n+\n+            container = next((container for container in result if container.has_same_ranges(labels)), None)\n+            if container is None:\n+                result.append(CommonRangeContainer(labels, message_indices={i}))\n+            else:\n+                container.message_indices.add(i)\n+\n+        result = FormatFinder.handle_overlapping_conflict(result)\n \n         return result\n \n-    def perform_iteration(self):\n-        for component in self.build_component_order():\n-            # OPEN: Create new message types e.g. for addresses\n-            component.find_field(self.protocol.messages)\n-\n-    def cluster_lengths(self):\n+    @staticmethod\n+    def handle_overlapping_conflict(containers):\n         \"\"\"\n-        This method clusters some bitvectors based on their length. An example output is\n+        Handle overlapping conflicts for a list of CommonRangeContainers\n \n-        2: [0.5, 1]\n-        4: [1, 0.75, 1, 1]\n-\n-        Meaning there were two message lengths: 2 and 4 bit.\n-        (0.5, 1) means, the first bit was equal in 50% of cases (meaning maximum difference) and bit 2 was equal in all messages\n-\n-        A simple XOR would not work as it would be error prone.\n-\n-        :rtype: dict[int, tuple[np.ndarray, int]]\n+        :type containers: list of CommonRangeContainer\n+        :return:\n         \"\"\"\n+        result = []\n+        for container in containers:\n+            if container.ranges_overlap:\n+                conflicted_handled = FormatFinder.__handle_container_overlapping_conflict(container)\n+            else:\n+                conflicted_handled = container\n \n-        number_ones = dict()  # dict of tuple. 0 = number ones vector, 1 = number of blocks for this vector\n-        for vector in self.bitvectors:\n-            vec_len = 4 * (len(vector) \/\/ 4)\n-            if vec_len == 0:\n+            try:\n+                same_rng_container = next(c for c in result if c.has_same_ranges_as_container(conflicted_handled))\n+                same_rng_container.message_indices.update(conflicted_handled.message_indices)\n+            except StopIteration:\n+                result.append(conflicted_handled)\n+\n+        return result\n+\n+    @staticmethod\n+    def __handle_container_overlapping_conflict(container: CommonRangeContainer):\n+        \"\"\"\n+        Handle overlapping conflict for a CommRangeContainer.\n+        We can assert that all labels in the container share the same message indices\n+        because we partitioned them in a step before.\n+        If two or more labels overlap we have three ways to resolve the conflict:\n+\n+        1. Choose the range with the highest score\n+        2. If multiple ranges overlap choose the ranges that maximize the overall (cumulated) score\n+        3. If the overlapping is very small i.e. only 1 or 2 bits we can adjust the start\/end of the conflicting ranges\n+\n+        The ranges inside the container _must_ be sorted i.e. the range with lowest start must be at front\n+\n+        :param container:\n+        :return:\n+        \"\"\"\n+        partitions = []  # type: list[list[CommonRange]]\n+        # partition the container into overlapping partitions\n+        # results in something like [[A], [B,C], [D], [E,F,G]]] where B and C and E, F, G are overlapping\n+        for cur_rng in container:\n+            if len(partitions) == 0:\n+                partitions.append([cur_rng])\n                 continue\n \n-            if vec_len not in number_ones:\n-                number_ones[vec_len] = [np.zeros(vec_len, dtype=int), 0]\n+            last_rng = partitions[-1][-1]  # type: CommonRange\n+            if cur_rng.overlaps_with(last_rng):\n+                partitions[-1].append(cur_rng)\n+            else:\n+                partitions.append([cur_rng])\n \n-            number_ones[vec_len][0] += vector[0:vec_len]\n-            number_ones[vec_len][1] += 1\n+        # Todo: Adjust start\/end of conflicting ranges if overlapping is very small (i.e. 1 or 2 bits)\n \n-        # Calculate the relative numbers and normalize the equalness so e.g. 0.3 becomes 0.7\n-        return {vl: (np.vectorize(lambda x: x if x >= 0.5 else 1 - x)(number_ones[vl][0] \/ number_ones[vl][1]))\n-                for vl in number_ones if number_ones[vl][1] >= self.MIN_MESSAGES_PER_CLUSTER}\n+        result = []\n+        # Go through these partitions and handle overlapping conflicts\n+        for partition in partitions:\n+            possible_solutions = []\n+            for i, rng in enumerate(partition):\n+                # Append every range to this solution that does not overlap with current rng\n+                solution = [rng] + [r for r in partition[i + 1:] if not rng.overlaps_with(r)]\n+                possible_solutions.append(solution)\n \n-    def build_xor_matrix(self):\n-        t = time.time()\n-        xor_matrix = util.build_xor_matrix(self.bitvectors)\n-        logger.debug(\"XOR matrix: {}s\".format(time.time()-t))\n-        return xor_matrix\n+            # Take solution that maximizes score. In case of tie, choose solution with shorter total length.\n+            # if there is still a tie prefer solution that contains a length field as is is very likely to be correct\n+            # if nothing else helps break tie by names of field types to prevent randomness\n+            best_solution = max(possible_solutions,\n+                                key=lambda sol: (sum(r.score for r in sol),\n+                                                 -sum(r.length_in_bits for r in sol),\n+                                                 \"length\" in {r.field_type for r in sol},\n+                                                 \"\".join(r.field_type[0] for r in sol)))\n+            result.extend(best_solution)\n+\n+        return CommonRangeContainer(result, message_indices=container.message_indices)\n+\n+    @staticmethod\n+    def retransform_message_indices(common_ranges, message_type_indices: list, sync_ends) -> list:\n+        \"\"\"\n+        Retransform the found message indices of an engine to the original index space\n+        based on the message indices of the message type.\n+\n+        Furthermore, set the sync_end of the common ranges so bit_start and bit_end\n+        match the position in the original space\n+\n+        :type common_ranges: list of CommonRange\n+        :param message_type_indices: Messages belonging to the message type the engine ran for\n+        :type sync_ends: np.ndarray\n+        :return:\n+        \"\"\"\n+        result = []\n+        for common_range in common_ranges:\n+            # Retransform message indices into original space\n+            message_indices = np.fromiter((message_type_indices[i] for i in common_range.message_indices),\n+                                          dtype=int, count=len(common_range.message_indices))\n+\n+            # If we have different sync_ends we need to create a new common range for each different sync_length\n+            matching_sync_ends = sync_ends[message_indices]\n+            for sync_end in np.unique(matching_sync_ends):\n+                rng = copy.deepcopy(common_range)\n+                rng.sync_end = sync_end\n+                rng.message_indices = set(message_indices[np.nonzero(matching_sync_ends == sync_end)])\n+                result.append(rng)\n+\n+        return result\n+\n+    @staticmethod\n+    def get_preamble_and_sync(preamble_starts, preamble_lengths, sync_ends, message_type_indices):\n+        \"\"\"\n+        Get preamble and sync common ranges based on the data\n+\n+        :type preamble_starts: np.ndarray\n+        :type preamble_lengths: np.ndarray\n+        :type sync_ends: np.ndarray\n+        :type message_type_indices: list\n+        :rtype: set of CommonRange\n+        \"\"\"\n+        assert len(preamble_starts) == len(preamble_lengths) == len(sync_ends)\n+\n+        result = set()  # type: set[CommonRange]\n+        for i in message_type_indices:\n+            preamble = CommonRange(preamble_starts[i], preamble_lengths[i], field_type=\"preamble\", message_indices={i})\n+            existing_preamble = next((rng for rng in result if preamble == rng), None)\n+            if existing_preamble is not None:\n+                existing_preamble.message_indices.add(i)\n+            elif preamble_lengths[i] > 0:\n+                result.add(preamble)\n+\n+            preamble_end = preamble_starts[i] + preamble_lengths[i]\n+            sync_end = sync_ends[i]\n+            sync = CommonRange(preamble_end, sync_end - preamble_end, field_type=\"synchronization\", message_indices={i})\n+            existing_sync = next((rng for rng in result if sync == rng), None)\n+            if existing_sync is not None:\n+                existing_sync.message_indices.add(i)\n+            elif sync_end - preamble_end > 0:\n+                result.add(sync)\n+\n+        return result\ndiff --git a\/src\/urh\/awre\/Histogram.py b\/src\/urh\/awre\/Histogram.py\nnew file mode 100644\nindex 0000000..b863de6\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/Histogram.py\n@@ -0,0 +1,116 @@\n+from collections import defaultdict\n+\n+import numpy as np\n+\n+from urh.awre.CommonRange import CommonRange\n+from urh.cythonext import awre_util\n+\n+\n+class Histogram(object):\n+    \"\"\"\n+    Create a histogram based on the equalness of vectors\n+    \"\"\"\n+\n+    def __init__(self, vectors, indices=None, normalize=True, debug=False):\n+        \"\"\"\n+\n+        :type vectors: list of np.ndarray\n+        :param indices: Indices of vectors for which the Histogram shall be created.\n+                        This is useful for clustering.\n+                        If None Histogram will be created over all bitvectors\n+        :type: list of int\n+        :param normalize:\n+        \"\"\"\n+        self.__vectors = vectors  # type: list[np.ndarray]\n+        self.__active_indices = list(range(len(vectors))) if indices is None else indices\n+\n+        self.normalize = normalize\n+        self.data = self.__create_histogram()\n+\n+    def __create_histogram(self):\n+        return awre_util.create_difference_histogram(self.__vectors, self.__active_indices)\n+\n+    def __repr__(self):\n+        return str(self.data.tolist())\n+\n+    def find_common_ranges(self, alpha=0.95, range_type=\"bit\"):\n+        \"\"\"\n+        Find all common ranges where at least alpha percent of numbers are equal\n+\n+        :param range_type: on of bit\/hex\/byte\n+        :param alpha:\n+        :return:\n+        \"\"\"\n+        data_indices = np.argwhere(self.data >= alpha).flatten()\n+\n+        if len(data_indices) < 2:\n+            return []\n+\n+        result = []\n+        start, length = None, 0\n+        for i in range(1, len(data_indices)):\n+            if start is None:\n+                start = data_indices[i - 1]\n+                length = 1\n+\n+            if data_indices[i] - data_indices[i - 1] == 1:\n+                length += 1\n+            else:\n+                if length >= 2:\n+                    value = self.__get_value_for_common_range(start, length)\n+                    result.append(CommonRange(start, length, value, message_indices=set(self.__active_indices),\n+                                              range_type=range_type))\n+\n+                start, length = None, 0\n+\n+            if i == len(data_indices) - 1 and length >= 2:\n+                value = self.__get_value_for_common_range(start, length)\n+                result.append(CommonRange(start, length, value, message_indices=set(self.__active_indices),\n+                                          range_type=range_type))\n+\n+        return result\n+\n+    def __get_value_for_common_range(self, start: int, length: int):\n+        \"\"\"\n+        Get the value for a range of common numbers. This is the value that appears most.\n+\n+        :param start: Start of the common bit range\n+        :param length: Length of the common bit range\n+        :return:\n+        \"\"\"\n+        values = defaultdict(list)\n+        for i in self.__active_indices:\n+            vector = self.__vectors[i]\n+            values[vector[start:start + length].tostring()].append(i)\n+        value = max(values, key=lambda x: len(x))\n+        indices = values[value]\n+        return self.__vectors[indices[0]][start:start + length]\n+\n+    def __vector_to_string(self, data_vector) -> str:\n+        lut = {i: \"{0:x}\".format(i) for i in range(16)}\n+        return \"\".join(lut[x] if x in lut else \" {} \".format(x) for x in data_vector)\n+\n+    def plot(self):\n+        import matplotlib.pyplot as plt\n+        self.subplot_on(plt)\n+        plt.show()\n+\n+    def subplot_on(self, plt):\n+        plt.grid()\n+        plt.plot(self.data)\n+        plt.xticks(np.arange(4, len(self.data), 4))\n+        plt.xlabel(\"Bit position\")\n+        if self.normalize:\n+            plt.ylabel(\"Number common bits (normalized)\")\n+        else:\n+            plt.ylabel(\"Number common bits\")\n+        plt.ylim(ymin=0)\n+\n+\n+if __name__ == \"__main__\":\n+    bv1 = np.array([1, 0, 1, 0, 1, 1, 1, 1], dtype=np.int8)\n+    bv2 = np.array([1, 0, 1, 0, 1, 0, 0, 0], dtype=np.int8)\n+    bv3 = np.array([1, 0, 1, 0, 1, 1, 1, 1], dtype=np.int8)\n+    bv4 = np.array([1, 0, 1, 0, 0, 0, 0, 0], dtype=np.int8)\n+    h = Histogram([bv1, bv2, bv3, bv4])\n+    h.plot()\ndiff --git a\/src\/urh\/awre\/MessageTypeBuilder.py b\/src\/urh\/awre\/MessageTypeBuilder.py\nnew file mode 100644\nindex 0000000..a35a02a\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/MessageTypeBuilder.py\n@@ -0,0 +1,55 @@\n+from urh.signalprocessing.ChecksumLabel import ChecksumLabel\n+\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.MessageType import MessageType\n+from urh.signalprocessing.ProtocoLabel import ProtocolLabel\n+\n+\n+class MessageTypeBuilder(object):\n+    def __init__(self, name: str):\n+        self.name = name\n+        self.message_type = MessageType(name)\n+\n+    def add_label(self, label_type: FieldType.Function, length: int, name: str=None):\n+        try:\n+            start = self.message_type[-1].end\n+            color_index = self.message_type[-1].color_index + 1\n+        except IndexError:\n+            start, color_index = 0, 0\n+\n+        if name is None:\n+            name = label_type.value\n+\n+        lbl = ProtocolLabel(name, start, start+length-1, color_index, field_type=FieldType(label_type.name, label_type))\n+        self.message_type.append(lbl)\n+\n+    def add_checksum_label(self, length, checksum, data_start=None, data_end=None, name: str=None):\n+        label_type = FieldType.Function.CHECKSUM\n+        try:\n+            start = self.message_type[-1].end\n+            color_index = self.message_type[-1].color_index + 1\n+        except IndexError:\n+            start, color_index = 0, 0\n+\n+        if name is None:\n+            name = label_type.value\n+\n+        if data_start is None:\n+            # End of sync or preamble\n+            sync_label = self.message_type.get_first_label_with_type(FieldType.Function.SYNC)\n+            if sync_label:\n+                data_start = sync_label.end\n+            else:\n+                preamble_label = self.message_type.get_first_label_with_type(FieldType.Function.PREAMBLE)\n+                if preamble_label:\n+                    data_start = preamble_label.end\n+                else:\n+                    data_start = 0\n+\n+        if data_end is None:\n+            data_end = start\n+\n+        lbl = ChecksumLabel(name, start, start+length-1, color_index, field_type=FieldType(label_type.name, label_type))\n+        lbl.data_ranges = [(data_start, data_end)]\n+        lbl.checksum = checksum\n+        self.message_type.append(lbl)\ndiff --git a\/src\/urh\/awre\/Preprocessor.py b\/src\/urh\/awre\/Preprocessor.py\nnew file mode 100644\nindex 0000000..8503b19\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/Preprocessor.py\n@@ -0,0 +1,271 @@\n+import itertools\n+import math\n+import os\n+import time\n+from collections import defaultdict\n+\n+import numpy as np\n+\n+from urh.cythonext import awre_util\n+from urh.signalprocessing.FieldType import FieldType\n+\n+\n+class Preprocessor(object):\n+    \"\"\"\n+    This class preprocesses the messages in the following ways\n+    1) Identify preamble \/ length of preamble\n+    2) Identify sync word(s)\n+    3) Align all given messages on the identified preamble information\n+    \"\"\"\n+\n+    _DEBUG_ = False\n+\n+    def __init__(self, bitvectors: list, existing_message_types: dict = None):\n+        self.bitvectors = bitvectors  # type: list[np.ndarray]\n+        self.existing_message_types = existing_message_types if existing_message_types is not None else dict()\n+\n+    def preprocess(self) -> (np.ndarray, int):\n+        raw_preamble_positions = self.get_raw_preamble_positions()\n+        existing_sync_words = self.__get_existing_sync_words()\n+        if len(existing_sync_words) == 0:\n+            sync_words = self.find_possible_syncs(raw_preamble_positions)\n+        else:\n+            # NOTE: This does not cover the case if protocol has multiple sync words and not all of them were labeled\n+            sync_words = existing_sync_words\n+\n+        preamble_starts = raw_preamble_positions[:, 0]\n+        preamble_lengths = self.get_preamble_lengths_from_sync_words(sync_words, preamble_starts=preamble_starts)\n+        sync_len = len(sync_words[0]) if len(sync_words) > 0 else 0\n+        return preamble_starts, preamble_lengths, sync_len\n+\n+    def get_preamble_lengths_from_sync_words(self, sync_words: list, preamble_starts: np.ndarray):\n+        \"\"\"\n+        Get the preamble lengths based on the found sync words for all messages.\n+        If there should be more than one sync word in a message, use the first one.\n+\n+        :param sync_words:\n+        :param preamble_starts:\n+        :return:\n+        \"\"\"\n+        # If there should be varying sync word lengths we need to return an array of sync lengths per message\n+        assert all(len(sync_word) == len(sync_words[0]) for sync_word in sync_words)\n+\n+        byte_sync_words = [bytes(map(int, sync_word)) for sync_word in sync_words]\n+\n+        result = np.zeros(len(self.bitvectors), dtype=np.uint32)\n+\n+        for i, bitvector in enumerate(self.bitvectors):\n+            preamble_lengths = []\n+            bits = bitvector.tobytes()\n+\n+            for sync_word in byte_sync_words:\n+                sync_start = bits.find(sync_word)\n+                if sync_start != -1:\n+                    if sync_start - preamble_starts[i] >= 2:\n+                        preamble_lengths.append(sync_start - preamble_starts[i])\n+\n+                    # Consider case where sync word starts with preamble pattern\n+                    sync_start = bits.find(sync_word, sync_start + 1, sync_start + 2 * len(sync_word))\n+\n+                    if sync_start != -1:\n+                        if sync_start - preamble_starts[i] >= 2:\n+                            preamble_lengths.append(sync_start - preamble_starts[i])\n+\n+            preamble_lengths.sort()\n+\n+            if len(preamble_lengths) == 0:\n+                result[i] = 0\n+            elif len(preamble_lengths) == 1:\n+                result[i] = preamble_lengths[0]\n+            else:\n+                # consider all indices not more than one byte before first one\n+                preamble_lengths = list(filter(lambda x: x < preamble_lengths[0] + 7, preamble_lengths))\n+\n+                # take the smallest preamble_length, but prefer a greater one if it is divisible by 8 (or 4)\n+                preamble_length = next((pl for pl in preamble_lengths if pl % 8 == 0), None)\n+                if preamble_length is None:\n+                    preamble_length = next((pl for pl in preamble_lengths if pl % 4 == 0), None)\n+                if preamble_length is None:\n+                    preamble_length = preamble_lengths[0]\n+                result[i] = preamble_length\n+\n+        return result\n+\n+    def find_possible_syncs(self, raw_preamble_positions=None):\n+        difference_matrix = self.get_difference_matrix()\n+        if raw_preamble_positions is None:\n+            raw_preamble_positions = self.get_raw_preamble_positions()\n+        return self.determine_sync_candidates(raw_preamble_positions, difference_matrix, n_gram_length=4)\n+\n+    @staticmethod\n+    def merge_possible_sync_words(possible_sync_words: dict, n_gram_length: int):\n+        \"\"\"\n+        Merge possible sync words by looking for common prefixes\n+\n+        :param possible_sync_words: dict of possible sync words and their frequencies\n+        :return:\n+        \"\"\"\n+        result = defaultdict(int)\n+        if len(possible_sync_words) < 2:\n+            return possible_sync_words.copy()\n+\n+        for sync1, sync2 in itertools.combinations(possible_sync_words, 2):\n+            common_prefix = os.path.commonprefix([sync1, sync2])\n+            if len(common_prefix) > n_gram_length:\n+                result[common_prefix] += possible_sync_words[sync1] + possible_sync_words[sync2]\n+            else:\n+                result[sync1] += possible_sync_words[sync1]\n+                result[sync2] += possible_sync_words[sync2]\n+        return result\n+\n+    def determine_sync_candidates(self,\n+                                  raw_preamble_positions: np.ndarray,\n+                                  difference_matrix: np.ndarray,\n+                                  n_gram_length=4) -> list:\n+\n+        possible_sync_words = awre_util.find_possible_sync_words(difference_matrix, raw_preamble_positions,\n+                                                                 self.bitvectors, n_gram_length)\n+\n+        self.__debug(\"Possible sync words\", possible_sync_words)\n+        if len(possible_sync_words) == 0:\n+            return []\n+\n+        possible_sync_words = self.merge_possible_sync_words(possible_sync_words, n_gram_length)\n+        self.__debug(\"Merged sync words\", possible_sync_words)\n+\n+        scores = self.__score_sync_lengths(possible_sync_words)\n+\n+        sorted_scores = sorted(scores, reverse=True, key=scores.get)\n+        estimated_sync_length = sorted_scores[0]\n+        if estimated_sync_length % 8 != 0:\n+            for other in filter(lambda x: 0 < estimated_sync_length-x < 7, sorted_scores):\n+                if other % 8 == 0:\n+                    estimated_sync_length = other\n+                    break\n+\n+        # Now we look at all possible sync words with this length\n+        sync_words = {word: frequency for word, frequency in possible_sync_words.items()\n+                      if len(word) == estimated_sync_length}\n+        self.__debug(\"Sync words\", sync_words)\n+\n+        additional_syncs = self.__find_additional_sync_words(estimated_sync_length, sync_words, possible_sync_words)\n+\n+        if additional_syncs:\n+            self.__debug(\"Found addtional sync words\", additional_syncs)\n+            sync_words.update(additional_syncs)\n+\n+        result = []\n+        for sync_word in sorted(sync_words, key=sync_words.get, reverse=True):\n+            # Convert bytes back to string\n+            result.append(\"\".join(str(c) for c in sync_word))\n+\n+        return result\n+\n+    def __find_additional_sync_words(self, sync_length: int, present_sync_words, possible_sync_words) -> dict:\n+        \"\"\"\n+        Look for additional sync words, in case we had varying preamble lengths and multiple sync words\n+        (see test_with_three_syncs_different_preamble_lengths for an example)\n+\n+        :param sync_length:\n+        :type present_sync_words: dict\n+        :type possible_sync_words: dict\n+        :return:\n+        \"\"\"\n+        np_syn = [np.fromiter(map(int, sync_word), dtype=np.uint8, count=len(sync_word))\n+                  for sync_word in present_sync_words]\n+\n+        messages_without_sync = [i for i, bv in enumerate(self.bitvectors)\n+                                 if not any(awre_util.find_occurrences(bv, s, return_after_first=True) for s in np_syn)]\n+\n+        result = dict()\n+        if len(messages_without_sync) == 0:\n+            return result\n+\n+        # Is there another sync word that applies to all messages without sync?\n+        additional_candidates = {word: score for word, score in possible_sync_words.items()\n+                                 if len(word) > sync_length and not any(s in word for s in present_sync_words)}\n+\n+        for sync in sorted(additional_candidates, key=additional_candidates.get, reverse=True):\n+            if len(messages_without_sync) == 0:\n+                break\n+\n+            score = additional_candidates[sync]\n+            s = sync[:sync_length]\n+            np_s = np.fromiter(s, dtype=np.uint8, count=len(s))\n+            matching = [i for i in messages_without_sync\n+                        if awre_util.find_occurrences(self.bitvectors[i], np_s, return_after_first=True)]\n+            if matching:\n+                result[s] = score\n+                for m in matching:\n+                    messages_without_sync.remove(m)\n+\n+        return result\n+\n+    def get_raw_preamble_positions(self) -> np.ndarray:\n+        \"\"\"\n+        Return a 2D numpy array where first column is the start of preamble\n+        second and third columns are lower and upper bound for preamble length by message, respectively\n+        \"\"\"\n+        result = np.zeros((len(self.bitvectors), 3), dtype=np.uint32)\n+\n+        for i, bitvector in enumerate(self.bitvectors):\n+            if i in self.existing_message_types:\n+                preamble_label = self.existing_message_types[i].get_first_label_with_type(FieldType.Function.PREAMBLE)\n+            else:\n+                preamble_label = None\n+\n+            if preamble_label is None:\n+                start, lower, upper = awre_util.get_raw_preamble_position(bitvector)\n+            else:\n+                # If this message is already labeled with a preamble we just use it's values\n+                start, lower, upper = preamble_label.start, preamble_label.end, preamble_label.end\n+\n+            result[i, 0] = start\n+            result[i, 1] = lower - start\n+            result[i, 2] = upper - start\n+\n+        return result\n+\n+    def get_difference_matrix(self) -> np.ndarray:\n+        \"\"\"\n+        Return a matrix of the first difference index between all messages\n+        :return:\n+        \"\"\"\n+        return awre_util.get_difference_matrix(self.bitvectors)\n+\n+    def __score_sync_lengths(self, possible_sync_words: dict):\n+        sync_lengths = defaultdict(int)\n+        for sync_word, score in possible_sync_words.items():\n+            sync_lengths[len(sync_word)] += score\n+\n+        self.__debug(\"Sync lengths\", sync_lengths)\n+\n+        return sync_lengths\n+\n+    def __get_existing_sync_words(self) -> list:\n+        result = []\n+        for i, bitvector in enumerate(self.bitvectors):\n+            if i in self.existing_message_types:\n+                sync_label = self.existing_message_types[i].get_first_label_with_type(FieldType.Function.SYNC)\n+            else:\n+                sync_label = None\n+\n+            if sync_label is not None:\n+                result.append(\"\".join(map(str, bitvector[sync_label.start:sync_label.end])))\n+        return result\n+\n+    def __debug(self, *args):\n+        if self._DEBUG_:\n+            print(\"[PREPROCESSOR]\", *args)\n+\n+    @staticmethod\n+    def get_next_multiple_of_n(number: int, n: int):\n+        return n * int(math.ceil(number \/ n))\n+\n+    @staticmethod\n+    def lower_multiple_of_n(number: int, n: int):\n+        return n * int(math.floor(number \/ n))\n+\n+    @staticmethod\n+    def get_next_lower_multiple_of_two(number: int):\n+        return number if number % 2 == 0 else number - 1\ndiff --git a\/src\/urh\/awre\/ProtocolGenerator.py b\/src\/urh\/awre\/ProtocolGenerator.py\nnew file mode 100644\nindex 0000000..b17003d\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/ProtocolGenerator.py\n@@ -0,0 +1,260 @@\n+import math\n+import struct\n+from array import array\n+from collections import defaultdict\n+\n+from urh.util import util\n+\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.signalprocessing.ChecksumLabel import ChecksumLabel\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.Message import Message\n+from urh.signalprocessing.MessageType import MessageType\n+from urh.signalprocessing.Participant import Participant\n+from urh.signalprocessing.ProtocoLabel import ProtocolLabel\n+from urh.signalprocessing.ProtocolAnalyzer import ProtocolAnalyzer\n+\n+\n+class ProtocolGenerator(object):\n+    DEFAULT_PREAMBLE = \"10101010\"\n+    DEFAULT_SYNC = \"1001\"\n+    BROADCAST_ADDRESS = \"0xffff\"\n+\n+    def __init__(self, message_types: list, participants: list = None, preambles_by_mt=None,\n+                 syncs_by_mt=None, little_endian=False, length_in_bytes=True, sequence_numbers=None,\n+                 sequence_number_increment=1, message_type_codes=None):\n+        \"\"\"\n+\n+        :param message_types:\n+        :param participants:\n+        :param preambles_by_mt:\n+        :param syncs_by_mt:\n+        :param byte_order:\n+        :param length_in_bytes: If false length will be given in bit\n+        \"\"\"\n+        self.participants = participants if participants is not None else []\n+\n+        self.protocol = ProtocolAnalyzer(None)\n+        self.protocol.message_types = message_types\n+\n+        self.length_in_bytes = length_in_bytes\n+        self.little_endian = little_endian\n+\n+        preambles_by_mt = dict() if preambles_by_mt is None else preambles_by_mt\n+\n+        self.preambles_by_message_type = defaultdict(lambda: self.DEFAULT_PREAMBLE)\n+        for mt, preamble in preambles_by_mt.items():\n+            self.preambles_by_message_type[mt] = self.to_bits(preamble)\n+\n+        syncs_by_mt = dict() if syncs_by_mt is None else syncs_by_mt\n+\n+        self.syncs_by_message_type = defaultdict(lambda: self.DEFAULT_SYNC)\n+        for mt, sync in syncs_by_mt.items():\n+            self.syncs_by_message_type[mt] = self.to_bits(sync)\n+\n+        sequence_numbers = dict() if sequence_numbers is None else sequence_numbers\n+        self.sequence_numbers = defaultdict(lambda: 0)\n+        self.sequence_number_increment = sequence_number_increment\n+\n+        for mt, seq in sequence_numbers.items():\n+            self.sequence_numbers[mt] = seq\n+\n+        if message_type_codes is None:\n+            message_type_codes = dict()\n+            for i, mt in enumerate(self.message_types):\n+                message_type_codes[mt] = i\n+        self.message_type_codes = message_type_codes\n+\n+\n+    @property\n+    def messages(self):\n+        return self.protocol.messages\n+\n+    @property\n+    def message_types(self):\n+        return self.protocol.message_types\n+\n+    def __get_address_for_participant(self, participant: Participant):\n+        if participant is None:\n+            return self.to_bits(self.BROADCAST_ADDRESS)\n+\n+        address = \"0x\" + participant.address_hex if not participant.address_hex.startswith(\n+            \"0x\") else participant.address_hex\n+        return self.to_bits(address)\n+\n+    @staticmethod\n+    def to_bits(bit_or_hex_str: str):\n+        if bit_or_hex_str.startswith(\"0x\"):\n+            lut = {\"{0:x}\".format(i): \"{0:04b}\".format(i) for i in range(16)}\n+            return \"\".join(lut[c] for c in bit_or_hex_str[2:])\n+        else:\n+            return bit_or_hex_str\n+\n+    def decimal_to_bits(self, number: int, num_bits: int) -> str:\n+        len_formats = {8: \"B\", 16: \"H\", 32: \"I\", 64: \"Q\"}\n+        if num_bits not in len_formats:\n+            raise ValueError(\"Invalid length for length field: {} bits\".format(num_bits))\n+\n+        struct_format = \"<\" if self.little_endian else \">\"\n+        struct_format += len_formats[num_bits]\n+\n+        byte_length = struct.pack(struct_format, number)\n+        return \"\".join(\"{0:08b}\".format(byte) for byte in byte_length)\n+\n+    def generate_message(self, message_type=None, data=\"0x00\", source: Participant = None,\n+                         destination: Participant = None):\n+        for participant in (source, destination):\n+            if isinstance(participant, Participant) and participant not in self.participants:\n+                self.participants.append(participant)\n+\n+        if isinstance(message_type, MessageType):\n+            message_type_index = self.protocol.message_types.index(message_type)\n+        elif isinstance(message_type, int):\n+            message_type_index = message_type\n+        else:\n+            message_type_index = 0\n+\n+        data = self.to_bits(data)\n+\n+        mt = self.protocol.message_types[message_type_index]  # type: MessageType\n+        mt.sort()\n+\n+        bits = []\n+\n+        start = 0\n+\n+        data_label_present = mt.get_first_label_with_type(FieldType.Function.DATA) is not None\n+\n+        if data_label_present:\n+            message_length = mt[-1].end - 1\n+        else:\n+            message_length = mt[-1].end - 1 + len(data)\n+\n+        checksum_labels = []\n+\n+        for lbl in mt:  # type: ProtocolLabel\n+            bits.append(\"0\" * (lbl.start - start))\n+            len_field = lbl.end - lbl.start  # in bits\n+\n+            if isinstance(lbl, ChecksumLabel):\n+                checksum_labels.append(lbl)\n+                continue  # processed last\n+\n+            if lbl.field_type.function == FieldType.Function.PREAMBLE:\n+                preamble = self.preambles_by_message_type[mt]\n+                assert len(preamble) == len_field\n+                bits.append(preamble)\n+                message_length -= len(preamble)\n+            elif lbl.field_type.function == FieldType.Function.SYNC:\n+                sync = self.syncs_by_message_type[mt]\n+                assert len(sync) == len_field\n+                bits.append(sync)\n+                message_length -= len(sync)\n+            elif lbl.field_type.function == FieldType.Function.LENGTH:\n+                value = int(math.ceil(message_length \/ 8))\n+\n+                if not self.length_in_bytes:\n+                    value *= 8\n+\n+                bits.append(self.decimal_to_bits(value, len_field))\n+            elif lbl.field_type.function == FieldType.Function.TYPE:\n+                bits.append(self.decimal_to_bits(self.message_type_codes[mt] % (2 ** len_field), len_field))\n+            elif lbl.field_type.function == FieldType.Function.SEQUENCE_NUMBER:\n+                bits.append(self.decimal_to_bits(self.sequence_numbers[mt] % (2 ** len_field), len_field))\n+            elif lbl.field_type.function == FieldType.Function.DST_ADDRESS:\n+                dst_bits = self.__get_address_for_participant(destination)\n+\n+                if len(dst_bits) != len_field:\n+                    raise ValueError(\n+                        \"Length of dst ({0} bits) != length dst field ({1} bits)\".format(len(dst_bits), len_field))\n+\n+                bits.append(dst_bits)\n+            elif lbl.field_type.function == FieldType.Function.SRC_ADDRESS:\n+                src_bits = self.__get_address_for_participant(source)\n+\n+                if len(src_bits) != len_field:\n+                    raise ValueError(\n+                        \"Length of src ({0} bits) != length src field ({1} bits)\".format(len(src_bits), len_field))\n+\n+                bits.append(src_bits)\n+            elif lbl.field_type.function == FieldType.Function.DATA:\n+                if len(data) != len_field:\n+                    raise ValueError(\n+                        \"Length of data ({} bits) != length data field ({} bits)\".format(len(data), len_field))\n+                bits.append(data)\n+\n+            start = lbl.end\n+\n+        if not data_label_present:\n+            bits.append(data)\n+\n+        msg = Message.from_plain_bits_str(\"\".join(bits))\n+        msg.message_type = mt\n+        msg.participant = source\n+        self.sequence_numbers[mt] += self.sequence_number_increment\n+\n+        for checksum_label in checksum_labels:\n+            msg[checksum_label.start:checksum_label.end] = checksum_label.calculate_checksum_for_message(msg, False)\n+\n+        self.protocol.messages.append(msg)\n+\n+    def to_file(self, filename: str):\n+        self.protocol.to_xml_file(filename, [], self.participants, write_bits=True)\n+\n+    def export_to_latex(self, filename: str, number: int):\n+        def export_message_type_to_latex(message_type, f):\n+            f.write(\"  \\\\begin{itemize}\\n\")\n+            for lbl in message_type:  # type: ProtocolLabel\n+                if lbl.field_type.function == FieldType.Function.SYNC:\n+                    sync = array(\"B\", map(int, self.syncs_by_message_type[message_type]))\n+                    f.write(\"    \\\\item {}: \\\\texttt{{0x{}}}\\n\".format(lbl.name, util.bit2hex(sync)))\n+                elif lbl.field_type.function == FieldType.Function.PREAMBLE:\n+                    preamble = array(\"B\", map(int, self.preambles_by_message_type[message_type]))\n+                    f.write(\"    \\\\item {}: \\\\texttt{{0x{}}}\\n\".format(lbl.name, util.bit2hex(preamble)))\n+                elif lbl.field_type.function == FieldType.Function.CHECKSUM:\n+                    f.write(\"    \\\\item {}: {}\\n\".format(lbl.name, lbl.checksum.caption))\n+                elif lbl.field_type.function in (FieldType.Function.LENGTH, FieldType.Function.SEQUENCE_NUMBER) and lbl.length > 8:\n+                    f.write(\"    \\\\item {}: {} bit (\\\\textbf{{{} endian}})\\n\".format(lbl.name, lbl.length, \"little\" if self.little_endian else \"big\"))\n+                elif lbl.field_type.function == FieldType.Function.DATA:\n+                    f.write(\"    \\\\item payload: {} byte\\n\".format(lbl.length \/\/ 8))\n+                else:\n+                    f.write(\"    \\\\item {}: {} bit\\n\".format(lbl.name, lbl.length))\n+            f.write(\"  \\\\end{itemize}\\n\")\n+\n+        with open(filename, \"a\") as f:\n+            f.write(\"\\\\subsection{{Protocol {}}}\\n\".format(number))\n+\n+            if len(self.participants) > 1:\n+                f.write(\"There were {} participants involved in communication: \".format(len(self.participants)))\n+                f.write(\", \".join(\"{} (\\\\texttt{{0x{}}})\".format(p.name, p.address_hex) for p in self.participants[:-1]))\n+                f.write(\" and {} (\\\\texttt{{0x{}}})\".format(self.participants[-1].name, self.participants[-1].address_hex))\n+                f.write(\".\\n\")\n+\n+            if len(self.message_types) == 1:\n+                f.write(\"The protocol has one message type with the following fields:\\n\")\n+                export_message_type_to_latex(self.message_types[0], f)\n+            else:\n+                f.write(\"The protocol has {} message types with the following fields:\\n\".format(len(self.message_types)))\n+                f.write(\"\\\\begin{itemize}\\n\")\n+                for mt in self.message_types:\n+                    f.write(\"  \\\\item \\\\textbf{{{}}}\\n\".format(mt.name))\n+                    export_message_type_to_latex(mt, f)\n+                f.write(\"\\\\end{itemize}\\n\")\n+\n+            f.write(\"\\n\")\n+\n+\n+if __name__ == '__main__':\n+    mb = MessageTypeBuilder(\"test\")\n+    mb.add_label(FieldType.Function.PREAMBLE, 8)\n+    mb.add_label(FieldType.Function.SYNC, 4)\n+    mb.add_label(FieldType.Function.LENGTH, 8)\n+    mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+    mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+    mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+    pg = ProtocolGenerator([mb.message_type], [], little_endian=False)\n+    pg.generate_message(data=\"1\" * 8)\n+    pg.generate_message(data=\"1\" * 16)\n+    pg.generate_message(data=\"0xab\", source=Participant(\"Alice\", \"A\", \"1234\"),\n+                        destination=Participant(\"Bob\", \"B\", \"4567\"))\n+    pg.to_file(\"\/tmp\/test.proto\")\ndiff --git a\/src\/urh\/awre\/components\/Address.py b\/src\/urh\/awre\/components\/Address.py\ndeleted file mode 100644\nindex 8df6d82..0000000\n--- a\/src\/urh\/awre\/components\/Address.py\n+++ \/dev\/null\n@@ -1,315 +0,0 @@\n-from collections import defaultdict\n-\n-import numpy as np\n-from urh import constants\n-from urh.awre.CommonRange import CommonRange\n-from urh.cythonext import util\n-from urh.awre.components.Component import Component\n-from urh.signalprocessing.MessageType import MessageType\n-\n-\n-class Address(Component):\n-    MIN_ADDRESS_LENGTH = 8  # Address should be at least one byte\n-\n-    def __init__(self, fieldtypes, xor_matrix, priority=2, predecessors=None, enabled=True, backend=None, messagetypes=None):\n-        super().__init__(priority, predecessors, enabled, backend, messagetypes)\n-        self.xor_matrix = xor_matrix\n-\n-        self.dst_field_type = next((ft for ft in fieldtypes if ft.function == ft.Function.DST_ADDRESS), None)\n-        self.src_field_type = next((ft for ft in fieldtypes if ft.function == ft.Function.SRC_ADDRESS), None)\n-\n-        self.dst_field_name = self.dst_field_type.caption if self.dst_field_type else \"DST address\"\n-        self.src_field_name = self.src_field_type.caption if self.src_field_type else \"SRC address\"\n-\n-    def _py_find_field(self, messages, verbose=False):\n-        \"\"\"\n-\n-        :type messages: list of urh.signalprocessing.Message.Message\n-        :return:\n-        \"\"\"\n-        msg_indices_per_participant = defaultdict(list)\n-        \"\"\":type : dict[urh.signalprocessing.Participant.Participant, list[int]] \"\"\"\n-\n-        for i, msg in enumerate(messages):\n-            msg_indices_per_participant[msg.participant].append(i)\n-\n-\n-        # Cluster participants\n-        equal_ranges_per_participant = defaultdict(list)\n-        \"\"\":type : dict[urh.signalprocessing.Participant.Participant, list[CommonRange]] \"\"\"\n-\n-        alignment = 8\n-\n-        # Step 1: Find equal ranges for participants by evaluating the XOR matrix participant wise\n-        for participant, participant_msg_indices in msg_indices_per_participant.items():\n-            for i, msg_index in enumerate(participant_msg_indices):\n-                msg = messages[msg_index]\n-                bitvector_str = msg.decoded_bits_str\n-\n-                for other_index in participant_msg_indices[i+1:]:\n-                    other_msg = messages[other_index]\n-                    xor_vec = self.xor_matrix[msg_index, other_index][self.xor_matrix[msg_index, other_index] != -1] # -1 = End of Vector\n-\n-                    # addresses are searched across message types, as we assume them to be in almost every message\n-                    # therefore we need to consider message types of both messages we compare and ignore already labeled areas\n-                    unlabeled_ranges = msg.message_type.unlabeled_ranges_with_other_mt(other_msg.message_type)\n-                    for rng_start, rng_end in unlabeled_ranges:\n-                        start = 0\n-                        # The last 1 marks end of sequence, and prevents swallowing long zero sequences at the end\n-                        cmp_vector = np.append(xor_vec[rng_start:rng_end], 1)\n-                        for end in np.where(cmp_vector == 1)[0]:\n-                            if end - start >= self.MIN_ADDRESS_LENGTH:\n-                                equal_range_start = alignment * ((rng_start + start) \/\/ alignment)\n-                                equal_range_end = alignment * ((rng_start + end) \/\/ alignment)\n-                                bits = bitvector_str[equal_range_start:equal_range_end]\n-\n-                                # Did we already found this range?\n-                                cr = next((cr for cr in equal_ranges_per_participant[participant] if\n-                                          cr.start == equal_range_start and cr.end == equal_range_end\n-                                          and cr.bits == bits), None)\n-\n-                                # If not: Create it\n-                                if cr is None:\n-                                    cr = CommonRange(equal_range_start, equal_range_end, bits)\n-                                    equal_ranges_per_participant[participant].append(cr)\n-\n-                                cr.messages.add(msg_index)\n-                                cr.messages.add(other_index)\n-\n-                            start = end + alignment\n-\n-        if verbose:\n-            print(constants.color.BOLD + \"Result after Step 1\" +constants.color.END)\n-            self.__print_ranges(equal_ranges_per_participant)\n-\n-        # Step 2: Now we want to find our address candidates.\n-        # We do this by weighting them in order of LCS they share with each other\n-        scored_candidates = self.find_candidates([cr for crl in equal_ranges_per_participant.values() for cr in crl])\n-        \"\"\":type : dict[str, int] \"\"\"\n-\n-        try:\n-            highscored = next(self.choose_candidate_pair(scored_candidates))\n-            assert len(highscored[0]) == len(highscored[1])\n-        except (StopIteration, AssertionError):\n-            return\n-\n-        if verbose:\n-            print(scored_candidates)\n-            print(sorted(scored_candidates, key=scored_candidates.get, reverse=True))\n-\n-        # Now get the common_ranges we need\n-        scored_candidates_per_participant = defaultdict(list)\n-        \"\"\":type : dict[urh.signalprocessing.Participant.Participant, list[CommonRange]] \"\"\"\n-\n-        for participant, ranges in equal_ranges_per_participant.items():\n-            for equal_range in ranges:\n-                for h in highscored:\n-                    rng = equal_range.pos_of_hex(h)\n-                    if rng is not None:\n-                        start, end = rng\n-                        bits = equal_range.bits[start:end]\n-                        rel_start = equal_range.start + start\n-                        rel_end = rel_start + (end - start)\n-                        cr = next((cr for cr in scored_candidates_per_participant[participant] if cr.start == rel_start\n-                                                                                               and cr.end == rel_end and\n-                                                                                               cr.bits == bits), None)\n-                        if cr is None:\n-                            cr = CommonRange(rel_start, rel_end, bits)\n-                            scored_candidates_per_participant[participant].append(cr)\n-\n-                        cr.messages.update(equal_range.messages)\n-\n-        # Now we have the highscored ranges per participant\n-        # If there is a crossmatch of the ranges we are good and found the addresses!\n-        # We have something like:\n-        #\n-        # Participant: Alice (A):                               Participant: Bob (B):\n-        # =======================                               =====================\n-        #\n-        # Range\t   Value     Messages                           Range\t   Value     Messages\n-        # -----    -----     --------                           -----      -----     --------\n-        # 72-96    1b6033    {1, 5, 9, 13, 17, 20}              72-96      78e289    {11, 3, 15, 7}\n-        # 88-112   1b6033    {2, 6, 10, 14, 18}                 88-112     78e289    {4, 8, 12, 16, 19}\n-        # 112-136  78e289    {2, 6, 10, 14, 18}                 112-136    1b6033    {0, 4, 8, 12, 16, 19}\n-        #\n-\n-        # If the value doubles for the same participant in other range, then we need to create a new message type\n-        # We consider the default case (=default message type) to have addresses followed by each other\n-        # Furthermore, we assume if there is only one address per message type, it is the destination address\n-        clusters = {\"default\": defaultdict(set), \"ack\": defaultdict(set)}\n-        \"\"\":type: dict[str, dict[tuple[int.int],set[int]]]\"\"\"\n-\n-        all_candidates = [cr for crl in scored_candidates_per_participant.values() for cr in crl]\n-        # Check for crossmatch and cluster in together and splitted addresses\n-        # Perform a merge by only saving the ranges and applying messages\n-        for candidate in sorted(all_candidates):\n-            if any(c.start == candidate.start and c.end == candidate.end and c.bits != candidate.bits for c in all_candidates):\n-                # Crossmatch! This is a address\n-                if any(c.start == candidate.end or c.end == candidate.start for c in all_candidates):\n-                     clusters[\"default\"][(candidate.start, candidate.end)].update(candidate.messages)\n-                else:\n-                    clusters[\"ack\"][(candidate.start, candidate.end)].update(candidate.messages)\n-\n-        msg_clusters =  {cname: set(i for s in ranges.values() for i in s) for cname, ranges in clusters.items()}\n-\n-        # If there are no addresses in default message type prevent evaluating everything as ACK\n-        if not msg_clusters[\"default\"]:\n-            msg_clusters[\"ack\"] = set()\n-            scored_candidates_per_participant.clear()\n-\n-        self.assign_messagetypes(messages, msg_clusters)\n-\n-        # Now try to find the addresses of the participants to separate SRC and DST address later\n-        self.assign_participant_addresses(messages, list(scored_candidates_per_participant.keys()), highscored)\n-\n-        for participant, ranges in scored_candidates_per_participant.items():\n-            for rng in ranges:\n-                for msg_index in rng.messages:\n-                    msg = messages[msg_index]\n-\n-                    if msg.message_type.name == \"ack\":\n-                       field_type = self.dst_field_type\n-                       name = self.dst_field_name\n-                    elif msg.participant:\n-                        if rng.hex_value == msg.participant.address_hex:\n-                            name = self.src_field_name\n-                            field_type = self.src_field_type\n-                        else:\n-                            name = self.dst_field_name\n-                            field_type = self.dst_field_type\n-                    else:\n-                        name = \"Address\"\n-                        field_type = None\n-\n-                    if not any(lbl.name == name and lbl.auto_created for lbl in msg.message_type):\n-                        msg.message_type.add_protocol_label(rng.start, rng.end - 1, name=name,\n-                                                            auto_created=True, type=field_type)\n-\n-\n-    @staticmethod\n-    def find_candidates(candidates):\n-        \"\"\"\n-        Find candidate addresses using LCS algorithm\n-        perform a scoring based on how often a candidate appears in a longer candidate\n-\n-        Input is something like\n-        ------------------------\n-        ['1b6033', '1b6033fd57', '701b603378e289', '20701b603378e289000c62',\n-        '1b603300', '78e289757e', '7078e2891b6033000000', '207078e2891b6033000000']\n-\n-        Output like\n-        -----------\n-        {'1b6033': 18, '1b6033fd57': 1, '701b603378e289': 2, '207078e2891b6033000000': 1,\n-        '57': 1, '7078e2891b6033000000': 2, '78e289757e': 1, '20701b603378e289000c62': 1,\n-        '78e289': 4, '1b603300': 3}\n-\n-        :type candidates: list of CommonRange\n-        :return:\n-        \"\"\"\n-\n-        result = defaultdict(int)\n-        for i, c_i in enumerate(candidates):\n-            for j in range(i, len(candidates)):\n-                lcs = util.longest_common_substring(c_i.hex_value, candidates[j].hex_value)\n-                if lcs:\n-                    result[lcs] += 1\n-\n-        return result\n-\n-    @staticmethod\n-    def choose_candidate_pair(candidates):\n-        \"\"\"\n-        Choose a pair of address candidates ensuring they have the same length and starting with the highest scored ones\n-\n-        :type candidates: dict[str, int]\n-        :param candidates: Count how often the longest common substrings appeared in the messages\n-        :return:\n-        \"\"\"\n-        highscored = sorted(candidates, key=candidates.get, reverse=True)\n-        for i, h_i in enumerate(highscored):\n-            for h_j in highscored[i+1:]:\n-                if len(h_i) == len(h_j):\n-                    yield (h_i, h_j)\n-\n-    @staticmethod\n-    def assign_participant_addresses(messages, participants, hex_addresses):\n-        \"\"\"\n-\n-        :type participants: list[urh.signalprocessing.Participant.Participant]\n-        :type hex_addresses: tuple[str]\n-        :type messages: list[urh.signalprocessing.Message.Message]\n-        :return:\n-        \"\"\"\n-        try:\n-            participants.remove(None)\n-        except ValueError:\n-            pass\n-\n-        if len(participants) != len(hex_addresses):\n-            return\n-\n-        if len(participants) == 0:\n-            return #  No chance\n-\n-\n-        score = {p: {addr: 0 for addr in hex_addresses} for p in participants}\n-\n-        for i in range(1, len(messages)):\n-            msg = messages[i]\n-            prev_msg = messages[i-1]\n-\n-            if msg.message_type.name == \"ack\":\n-                addr = next(addr for addr in hex_addresses if addr in msg.decoded_hex_str)\n-                if addr in prev_msg.decoded_hex_str:\n-                    score[prev_msg.participant][addr] += 1\n-\n-        for p in participants:\n-            p.address_hex = max(score[p], key=score[p].get)\n-\n-    def __print_clustered(self, clustered_addresses):\n-        for bl in sorted(clustered_addresses):\n-            print(constants.color.BOLD + \"Byte length \" + str(bl) + constants.color.END)\n-            for (start, end), bits in sorted(clustered_addresses[bl].items()):\n-                print(start, end, bits)\n-\n-    def __print_ranges(self, equal_ranges_per_participant):\n-        for parti in sorted(equal_ranges_per_participant):\n-            if parti is None:\n-                continue\n-\n-            print(\"\\n\" + constants.color.UNDERLINE + str(parti.name) + \" (\" + parti.shortname+ \")\" + constants.color.END)\n-            address1 = \"000110110110000000110011\"\n-            address2 = \"011110001110001010001001\"\n-\n-            assert len(address1) % 8 == 0\n-            assert len(address2) % 8 == 0\n-\n-            print(\"address1\", constants.color.BLUE, address1 + \" (\" +hex(int(\"\".join(map(str, address1)), 2)) +\")\", constants.color.END)\n-            print(\"address2\", constants.color.GREEN, address2 + \" (\" + hex(int(\"\".join(map(str, address2)), 2)) + \")\",\n-                  constants.color.END)\n-\n-            print()\n-\n-            for common_range in sorted(equal_ranges_per_participant[parti]):\n-                assert isinstance(common_range, CommonRange)\n-                bits_str = common_range.bits\n-                format_start = \"\"\n-                if address1 in bits_str and address2 not in bits_str:\n-                    format_start = constants.color.BLUE\n-                if address2 in bits_str and address1 not in bits_str:\n-                    format_start = constants.color.GREEN\n-                if address1 in bits_str and address2 in bits_str:\n-                    format_start = constants.color.RED + constants.color.BOLD\n-\n-                # For Bob the adress 1b60330 is found to be 0x8db0198000 which is correct,\n-                # as it starts with a leading 1 in all messages.\n-                # This is the last Bit of e0003 (Broadcast) or 78e289  (Other address)\n-                # Code to verify: hex(int(\"1000\"+bin(int(\"1b6033\",16))[2:]+\"000\",2))\n-                # Therefore we need to check for partial bits inside the address candidates to be sure we find the correct ones\n-                occurences = len(common_range.messages)\n-                print(common_range.start, common_range.end,\n-                      \"({})\\t\".format(occurences),\n-                      format_start + common_range.hex_value + \"\\033[0m\", common_range.byte_len,\n-                      bits_str, \"(\" + \",\".join(map(str, common_range.messages)) + \")\")\n-\n-\ndiff --git a\/src\/urh\/awre\/components\/Component.py b\/src\/urh\/awre\/components\/Component.py\ndeleted file mode 100644\nindex 1566135..0000000\n--- a\/src\/urh\/awre\/components\/Component.py\n+++ \/dev\/null\n@@ -1,112 +0,0 @@\n-from abc import ABCMeta\n-\n-from urh.signalprocessing.Message import Message\n-from urh.signalprocessing.MessageType import MessageType\n-from urh.signalprocessing.ProtocoLabel import ProtocolLabel\n-from enum import Enum\n-\n-from urh.util.Logger import logger\n-\n-\n-class Component(metaclass=ABCMeta):\n-    \"\"\"\n-    A component is the basic building block of our AWRE algorithm.\n-    A component can be a Preamble or Sync or Length Field finding routine.\n-    Components can have a priority which determines the order in which they are processed by the algorithm.\n-    Additionally, components can have a set of predecessors to define hard dependencies.\n-    \"\"\"\n-\n-\n-    EQUAL_BIT_TRESHOLD = 0.9\n-\n-    class Backend(Enum):\n-        python = 1\n-        cython = 2\n-        plainc = 3\n-\n-    def __init__(self, priority=0, predecessors=None, enabled=True, backend=None, messagetypes=None):\n-        \"\"\"\n-\n-        :param priority: Priority for this Component. 0 is highest priority\n-        :type priority: int\n-        :param predecessors: List of preceding components, that need to be run before this one\n-        :type predecessors: list of Component or None\n-        :param messagetypes: Message types of the examined protocol\n-        :type messagetypes: list[MessageType]\n-        \"\"\"\n-        self.enabled = enabled\n-        self.backend = backend if backend is not None else self.Backend.python\n-        self.priority = abs(priority)\n-        self.predecessors = predecessors if isinstance(predecessors, list) else []\n-        \"\"\":type: list of Component \"\"\"\n-\n-        self.messagetypes = messagetypes\n-\n-    def find_field(self, messages):\n-        \"\"\"\n-        Wrapper method selecting the backend to assign the protocol field.\n-        Various strategies are possible e.g.:\n-        1) Heuristics e.g. for Preamble\n-        2) Scoring based e.g. for Length\n-        3) Fulltext search for addresses based on participant subgroups\n-\n-        :param messages: messages a field shall be searched for\n-        :type messages: list of Message\n-        \"\"\"\n-        try:\n-            if self.backend == self.Backend.python:\n-                self._py_find_field(messages)\n-            elif self.backend == self.Backend.cython:\n-                self._cy_find_field(messages)\n-            elif self.backend == self.Backend.plainc:\n-                self._c_find_field(messages)\n-            else:\n-                raise ValueError(\"Unsupported backend {}\".format(self.backend))\n-        except NotImplementedError:\n-            logger.info(\"Skipped {} because not implemented yet\".format(self.__class__.__name__))\n-\n-    def _py_find_field(self, messages):\n-        raise NotImplementedError()\n-\n-    def _cy_find_field(self, messages):\n-        raise NotImplementedError()\n-\n-    def _c_find_field(self, messages):\n-        raise NotImplementedError()\n-\n-\n-    def assign_messagetypes(self, messages, clusters):\n-        \"\"\"\n-        Assign message types based on the clusters. Following rules:\n-        1) Messages from different clusters will get different message types\n-        2) Messages from same clusters will get same message type\n-        3) The new message type will copy over the existing labels\n-        4) No new message type will be set for messages, that already have a custom message type assigned\n-\n-        For messages with clustername \"default\" no new message type will be created\n-\n-        :param messages: Messages, that messagetype needs to be clustered\n-        :param clusters: clusters for the messages\n-        :type messages: list[Message]\n-        :type clusters: dict[str, set[int]]\n-        :return:\n-        \"\"\"\n-        for clustername, clustercontent in clusters.items():\n-            if clustername == \"default\":\n-                # Do not force the default message type\n-                continue\n-\n-            for msg_i in clustercontent:\n-                msg = messages[msg_i]\n-                if msg.message_type == self.messagetypes[0]:\n-                    # Message has default message type\n-                    # Copy the existing labels and create a new message type\n-                    # if it was not already done\n-                    try:\n-                        msg_type = next(mtype for mtype in self.messagetypes if mtype.name == clustername)\n-                    except StopIteration:\n-                        msg_type = MessageType(name=clustername, iterable=msg.message_type)\n-                        msg_type.assigned_by_logic_analyzer = True\n-                        self.messagetypes.append(msg_type)\n-                    msg.message_type = msg_type\n-\ndiff --git a\/src\/urh\/awre\/components\/Flags.py b\/src\/urh\/awre\/components\/Flags.py\ndeleted file mode 100644\nindex f9ec755..0000000\n--- a\/src\/urh\/awre\/components\/Flags.py\n+++ \/dev\/null\n@@ -1,8 +0,0 @@\n-from urh.awre.components.Component import Component\n-\n-class Flags(Component):\n-    def __init__(self, priority=2, predecessors=None, enabled=True, backend=None):\n-        super().__init__(priority, predecessors, enabled, backend)\n-\n-    def _py_find_field(self, messages):\n-        raise NotImplementedError(\"Todo\")\n\\ No newline at end of file\ndiff --git a\/src\/urh\/awre\/components\/Length.py b\/src\/urh\/awre\/components\/Length.py\ndeleted file mode 100644\nindex a357c6e..0000000\n--- a\/src\/urh\/awre\/components\/Length.py\n+++ \/dev\/null\n@@ -1,139 +0,0 @@\n-import math\n-from collections import defaultdict\n-\n-import numpy as np\n-\n-from urh.awre.components.Component import Component\n-from urh.signalprocessing.FieldType import FieldType\n-from urh.signalprocessing.Interval import Interval\n-from urh.signalprocessing.MessageType import MessageType\n-from urh.signalprocessing.ProtocoLabel import ProtocolLabel\n-\n-\n-class Length(Component):\n-    \"\"\"\n-    The length is defined as byte length and found by finding equal ranges in the length clustered blocks.\n-    A length field should be a common equal range in all clusters.\n-    \"\"\"\n-\n-    def __init__(self, fieldtypes, length_cluster, priority=2, predecessors=None,\n-                 enabled=True, backend=None, messagetypes=None):\n-        super().__init__(priority, predecessors, enabled, backend, messagetypes)\n-\n-        self.length_field_type = next((ft for ft in fieldtypes if ft.function == ft.Function.LENGTH), None)\n-        self.length_field_name = self.length_field_type.caption if self.length_field_type else \"Length\"\n-\n-        self.length_cluster = length_cluster\n-        \"\"\"\n-        An example length cluster is\n-\n-        2: [0.5, 1]\n-        4: [1, 0.75, 1, 1]\n-\n-        Meaning there were two message lengths: 2 and 4 bit.\n-        (0.5, 1) means, the first bit was equal in 50% of cases (meaning maximum difference) and bit 2 was equal in all messages\n-\n-        A simple XOR would not work as it would be very error prone.\n-        \"\"\"\n-\n-    def _py_find_field(self, messages):\n-        \"\"\"\n-\n-        :type messages: list of urh.signalprocessing.Message.Message\n-        :return:\n-        \"\"\"\n-        messages_by_type = defaultdict(list)\n-        \"\"\":type : dict[urh.signalprocessing.MessageType.MessageType, list[urh.signalprocessing.Message.Message]] \"\"\"\n-\n-        for msg in messages:\n-            messages_by_type[msg.message_type].append(msg)\n-\n-        # First we get the common ranges per message length\n-        common_ranges_by_length = defaultdict(lambda: defaultdict(list))\n-        \"\"\":type: dict[urh.signalprocessing.MessageType.MessageType, dict[int, List[(int,int)]]]\"\"\"\n-\n-        for message_type in messages_by_type.keys():\n-            unlabeled_ranges = message_type.unlabeled_ranges\n-            for vec_len in set(4 * (len(msg.decoded_bits) \/\/ 4) for msg in messages_by_type[message_type]):\n-                try:\n-                    cluster = self.length_cluster[vec_len]\n-                except KeyError:\n-                    continue  # Skip message lengths that appear only once\n-\n-                for rng_start, rng_end in unlabeled_ranges:\n-                    start = 0\n-                    for end in np.where(cluster[rng_start:rng_end] < self.EQUAL_BIT_TRESHOLD)[0]:\n-                        if start < end - 1:\n-                            common_ranges_by_length[message_type][vec_len].append(\n-                                (rng_start + start, rng_start + end - 1))\n-                        start = end + 1\n-\n-        # Now we merge the ranges together to get our candidate ranges\n-        common_intervals_by_type = {message_type: [] for message_type in common_ranges_by_length.keys()}\n-        \"\"\":type: dict[urh.signalprocessing.MessageType.MessageType, list[Interval]]\"\"\"\n-\n-        for message_type in common_intervals_by_type.keys():\n-            msg_lens = sorted(common_ranges_by_length[message_type].keys())\n-            for interval in common_ranges_by_length[message_type][msg_lens[0]]:\n-                candidate = Interval(interval[0], interval[1])\n-                for other_len in msg_lens[1:]:\n-                    matches = []\n-                    for other_interval in common_ranges_by_length[message_type][other_len]:\n-                        oi = Interval(other_interval[0], other_interval[1])\n-                        if oi.overlaps_with(candidate):\n-                            candidate = candidate.find_common_interval(oi)\n-                            matches.append(candidate)\n-\n-                    if not matches:\n-                        candidate = None\n-                        break\n-                    else:\n-                        candidate = Interval.find_greatest(matches)\n-\n-                if candidate:\n-                    common_intervals_by_type[message_type].append(candidate)\n-\n-        # Now we have the common intervals and need to check which one is the length\n-        for message_type, intervals in common_intervals_by_type.items():\n-            assert isinstance(message_type, MessageType)\n-            # Exclude Synchronization (or preamble if not present) from length calculation\n-            sync_lbl = self.find_lbl_function_in(FieldType.Function.SYNC, message_type)\n-            if sync_lbl:\n-                sync_len = self.__nbits2bytes(sync_lbl.end)\n-            else:\n-                preamble_lbl = self.find_lbl_function_in(FieldType.Function.PREAMBLE, message_type)\n-                sync_len = self.__nbits2bytes(preamble_lbl.end) if preamble_lbl is not None else 0\n-\n-            scores = defaultdict(int)\n-            weights = {-4: 1, -3: 2, -2: 3, -1: 4, 0: 5}\n-\n-            for common_interval in intervals:\n-                for msg in messages_by_type[message_type]:\n-                    bits = msg.decoded_bits\n-                    byte_len = self.__nbits2bytes(len(bits)) - sync_len\n-                    start, end = common_interval.start, common_interval.end\n-                    for byte_start in range(start, end, 8):\n-                        byte_end = byte_start + 8 if byte_start + 8 <= end else end\n-                        try:\n-                            byte = int(\"\".join([\"1\" if bit else \"0\" for bit in bits[byte_start:byte_end]]), 2)\n-                            diff = byte - byte_len\n-                            if diff in weights:\n-                                scores[(byte_start, byte_end)] += weights[diff]\n-                        except ValueError:\n-                            pass  # Byte_end or byte_start was out of bits --> too close on the end\n-\n-            try:\n-                start, end = max(scores, key=scores.__getitem__)\n-                if not any((lbl.field_type.function == FieldType.Function.LENGTH or lbl.name == \"Length\") and lbl.auto_created\n-                           for lbl in message_type):\n-                    message_type.add_protocol_label(start=start, end=end - 1, name=self.length_field_name,\n-                                                    auto_created=True, type=self.length_field_type)\n-            except ValueError:\n-                continue\n-\n-    def __nbits2bytes(self, nbits):\n-        return int(math.ceil(nbits \/ 8))\n-\n-    @staticmethod\n-    def find_lbl_function_in(function: FieldType.Function, message_type: MessageType) -> ProtocolLabel:\n-        return next((lbl for lbl in message_type if lbl.field_type and lbl.field_type.function == function), None)\ndiff --git a\/src\/urh\/awre\/components\/Preamble.py b\/src\/urh\/awre\/components\/Preamble.py\ndeleted file mode 100644\nindex fb129ba..0000000\n--- a\/src\/urh\/awre\/components\/Preamble.py\n+++ \/dev\/null\n@@ -1,121 +0,0 @@\n-from collections import defaultdict\n-from urh.awre.components.Component import Component\n-from urh.signalprocessing.FieldType import FieldType\n-from urh.signalprocessing.Message import Message\n-\n-\n-class Preamble(Component):\n-    \"\"\"\n-    Assign Preamble and SoF.\n-\n-    \"\"\"\n-    def __init__(self, fieldtypes, priority=0, predecessors=None, enabled=True, backend=None, messagetypes=None):\n-        \"\"\"\n-\n-        :type fieldtypes: list of FieldType\n-        :param priority:\n-        :param predecessors:\n-        :param enabled:\n-        :param backend:\n-        :param messagetypes:\n-        \"\"\"\n-        super().__init__(priority, predecessors, enabled, backend, messagetypes)\n-\n-        self.preamble_field_type = next((ft for ft in fieldtypes if ft.function == ft.Function.PREAMBLE), None)\n-        self.sync_field_type = next((ft for ft in fieldtypes if ft.function == ft.Function.SYNC), None)\n-\n-        self.preamble_name = self.preamble_field_type.caption if self.preamble_field_type else \"Preamble\"\n-        self.sync_name = self.sync_field_type.caption if self.sync_field_type else \"Synchronization\"\n-\n-    def _py_find_field(self, messages):\n-        \"\"\"\n-\n-        :type messages: list of Message\n-        :return:\n-        \"\"\"\n-        preamble_ranges = defaultdict(list)\n-        \"\"\":type: dict[MessageType, list] \"\"\"\n-\n-        for msg in messages:\n-            rng = self.__find_preamble_range(msg)\n-            if rng:\n-                preamble_ranges[msg.message_type].append(rng)\n-\n-        preamble_ends = defaultdict(int)\n-        for message_type, ranges in preamble_ranges.items():\n-            start, end = max(ranges, key=ranges.count)\n-            message_type.add_protocol_label(start=start, end=end, name=self.preamble_name,\n-                                            auto_created=True, type=self.preamble_field_type)\n-\n-            preamble_ends[message_type] = end + 1\n-\n-        for message_type in preamble_ranges.keys():\n-            messages = [msg for msg in messages if msg.message_type == message_type]\n-            first_field = next((field for field in message_type if field.start > preamble_ends[message_type]), None)\n-            search_end = first_field.start if first_field is not None else None\n-            sync_range = self.__find_sync_range(messages, preamble_ends[message_type], search_end)\n-\n-            if sync_range:\n-                message_type.add_protocol_label(start=sync_range[0], end=sync_range[1]-1, name=self.sync_name,\n-                                                auto_created=True, type=self.sync_field_type)\n-\n-\n-    def __find_preamble_range(self, message: Message):\n-        search_start = 0\n-\n-        if len(message.message_type) == 0:\n-            search_end = len(message.decoded_bits)\n-        else:\n-            search_end = message.message_type[0].start\n-\n-        bits = message.decoded_bits\n-\n-        # Skip sequences of equal bits\n-        try:\n-            first_difference = next((i for i in range(search_start, search_end-1) if bits[i] != bits[i+1]), None)\n-        except IndexError:\n-            # see: https:\/\/github.com\/jopohl\/urh\/issues\/290\n-            first_difference = None\n-\n-        if first_difference is None:\n-            return None\n-\n-        try:\n-            preamble_end = next((i-1 for i in range(first_difference, search_end, 4)\n-                if bits[i] == bits[i+1] or bits[i] != bits[i+2] or bits[i] == bits[i+3]), search_end)\n-        except IndexError:\n-            return None\n-\n-        if preamble_end - first_difference > 4:\n-            return first_difference, preamble_end\n-        else:\n-            return None\n-\n-\n-    def __find_sync_range(self, messages, preamble_end: int, search_end: int):\n-        \"\"\"\n-        Finding the synchronization works by finding the first difference between two messages.\n-        This is performed for all messages and the most frequent first difference is chosen\n-\n-        :type messages: list of Message\n-        :param preamble_end: End of preamble = start of search\n-        :param search_end: End of search = start of first other label\n-        \"\"\"\n-\n-        possible_sync_pos = defaultdict(int)\n-\n-\n-        for i, msg in enumerate(messages):\n-            bits_i = msg.decoded_bits[preamble_end:search_end]\n-            for j in range(i, len(messages)):\n-                bits_j = messages[j].decoded_bits[preamble_end:search_end]\n-                first_diff = next((k for k, (bit_i, bit_j) in enumerate(zip(bits_i, bits_j)) if bit_i != bit_j), None)\n-                if first_diff is not None:\n-                    first_diff = preamble_end + 4 * (first_diff \/\/ 4)\n-                    if (first_diff - preamble_end) >= 4:\n-                        possible_sync_pos[(preamble_end, first_diff)] += 1\n-        try:\n-            sync_interval = max(possible_sync_pos, key=possible_sync_pos.__getitem__)\n-            return sync_interval\n-        except ValueError:\n-            return None\ndiff --git a\/src\/urh\/awre\/components\/SequenceNumber.py b\/src\/urh\/awre\/components\/SequenceNumber.py\ndeleted file mode 100644\nindex 30d06ad..0000000\n--- a\/src\/urh\/awre\/components\/SequenceNumber.py\n+++ \/dev\/null\n@@ -1,21 +0,0 @@\n-from urh.awre.components.Component import Component\n-\n-class SequenceNumber(Component):\n-    def __init__(self, fieldtypes, priority=2, predecessors=None, enabled=True, backend=None):\n-        \"\"\"\n-\n-        :type fieldtypes: list of FieldType\n-        :param priority:\n-        :param predecessors:\n-        :param enabled:\n-        :param backend:\n-        :param messagetypes:\n-        \"\"\"\n-        super().__init__(priority, predecessors, enabled, backend)\n-\n-        self.seqnr_field_type = next((ft for ft in fieldtypes if ft.function == ft.Function.SEQUENCE_NUMBER), None)\n-        self.seqnr_field_name = self.seqnr_field_type.caption if self.seqnr_field_type else \"Sequence Number\"\n-\n-\n-    def _py_find_field(self, messages):\n-        raise NotImplementedError(\"Todo\")\n\\ No newline at end of file\ndiff --git a\/src\/urh\/awre\/components\/Type.py b\/src\/urh\/awre\/components\/Type.py\ndeleted file mode 100644\nindex fc40d59..0000000\n--- a\/src\/urh\/awre\/components\/Type.py\n+++ \/dev\/null\n@@ -1,8 +0,0 @@\n-from urh.awre.components.Component import Component\n-\n-class Type(Component):\n-    def __init__(self, priority=2, predecessors=None, enabled=True, backend=None):\n-        super().__init__(priority, predecessors, enabled, backend)\n-\n-    def _py_find_field(self, messages):\n-        raise NotImplementedError(\"Todo\")\n\\ No newline at end of file\ndiff --git a\/src\/urh\/awre\/components\/__init__.py b\/src\/urh\/awre\/components\/__init__.py\ndeleted file mode 100644\nindex e69de29..0000000\n--- a\/src\/urh\/awre\/components\/__init__.py\n+++ \/dev\/null\ndiff --git a\/src\/urh\/awre\/engines\/AddressEngine.py b\/src\/urh\/awre\/engines\/AddressEngine.py\nnew file mode 100644\nindex 0000000..7aa50f1\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/engines\/AddressEngine.py\n@@ -0,0 +1,399 @@\n+import itertools\n+import math\n+from array import array\n+from collections import defaultdict, Counter\n+\n+import numpy as np\n+\n+from urh.awre.CommonRange import CommonRange\n+from urh.awre.engines.Engine import Engine\n+from urh.cythonext import awre_util\n+from urh.util.Logger import logger\n+\n+\n+class AddressEngine(Engine):\n+    def __init__(self, msg_vectors, participant_indices, known_participant_addresses: dict = None,\n+                 already_labeled: list = None, src_field_present=False):\n+        \"\"\"\n+\n+        :param msg_vectors: Message data behind synchronization\n+        :type msg_vectors: list of np.ndarray\n+        :param participant_indices: list of participant indices\n+                                    where ith position holds participants index for ith messages\n+        :type participant_indices: list of int\n+        \"\"\"\n+        assert len(msg_vectors) == len(participant_indices)\n+\n+        self.minimum_score = 0.1\n+\n+        self.msg_vectors = msg_vectors\n+        self.participant_indices = participant_indices\n+        self.already_labeled = []\n+\n+        self.src_field_present = src_field_present\n+\n+        if already_labeled is not None:\n+            for start, end in already_labeled:\n+                # convert it to hex\n+                self.already_labeled.append((int(math.ceil(start \/ 4)), int(math.ceil(end \/ 4))))\n+\n+        self.message_indices_by_participant = defaultdict(list)\n+        for i, participant_index in enumerate(self.participant_indices):\n+            self.message_indices_by_participant[participant_index].append(i)\n+\n+        if known_participant_addresses is None:\n+            self.known_addresses_by_participant = dict()  # type: dict[int, np.ndarray]\n+        else:\n+            self.known_addresses_by_participant = known_participant_addresses  # type: dict[int, np.ndarray]\n+\n+    @staticmethod\n+    def cross_swap_check(rng1: CommonRange, rng2: CommonRange):\n+        return (rng1.start == rng2.start + rng1.length or rng1.start == rng2.start - rng1.length) \\\n+               and rng1.value.tobytes() == rng2.value.tobytes()\n+\n+    @staticmethod\n+    def ack_check(rng1: CommonRange, rng2: CommonRange):\n+        return rng1.start == rng2.start and rng1.length == rng2.length and rng1.value.tobytes() != rng2.value.tobytes()\n+\n+    def find(self):\n+        addresses_by_participant = {p: [addr.tostring()] for p, addr in self.known_addresses_by_participant.items()}\n+        addresses_by_participant.update(self.find_addresses())\n+        self._debug(\"Addresses by participant\", addresses_by_participant)\n+\n+        # Find the address candidates by participant in messages\n+        ranges_by_participant = defaultdict(list)  # type: dict[int, list[CommonRange]]\n+\n+        addresses = [np.array(np.frombuffer(a, dtype=np.uint8))\n+                     for address_list in addresses_by_participant.values()\n+                     for a in address_list]\n+\n+        already_labeled_cols = array(\"L\", [e for rng in self.already_labeled for e in range(*rng)])\n+\n+        # Find occurrences of address candidates in messages and create common ranges over matching positions\n+        for i, msg_vector in enumerate(self.msg_vectors):\n+            participant = self.participant_indices[i]\n+            for address in addresses:\n+                for index in awre_util.find_occurrences(msg_vector, address, already_labeled_cols):\n+                    common_ranges = ranges_by_participant[participant]\n+                    rng = next((cr for cr in common_ranges if cr.matches(index, address)), None)  # type: CommonRange\n+                    if rng is not None:\n+                        rng.message_indices.add(i)\n+                    else:\n+                        common_ranges.append(CommonRange(index, len(address), address,\n+                                                         message_indices={i},\n+                                                         range_type=\"hex\"))\n+\n+        num_messages_by_participant = defaultdict(int)\n+        for participant in self.participant_indices:\n+            num_messages_by_participant[participant] += 1\n+\n+        # Look for cross swapped values between participant clusters\n+        for p1, p2 in itertools.combinations(ranges_by_participant, 2):\n+            ranges1_set, ranges2_set = set(ranges_by_participant[p1]), set(ranges_by_participant[p2])\n+\n+            for rng1, rng2 in itertools.product(ranges_by_participant[p1], ranges_by_participant[p2]):\n+                if rng1 in ranges2_set and rng2 in ranges1_set:\n+                    if self.cross_swap_check(rng1, rng2):\n+                        rng1.score += len(rng2.message_indices) \/ num_messages_by_participant[p2]\n+                        rng2.score += len(rng1.message_indices) \/ num_messages_by_participant[p1]\n+                    elif self.ack_check(rng1, rng2):\n+                        # Add previous score in divisor to add bonus to ranges that apply to all messages\n+                        rng1.score += len(rng2.message_indices) \/ (num_messages_by_participant[p2] + rng1.score)\n+                        rng2.score += len(rng1.message_indices) \/ (num_messages_by_participant[p1] + rng2.score)\n+\n+        if len(ranges_by_participant) == 1 and not self.src_field_present:\n+            for p, ranges in ranges_by_participant.items():\n+                for rng in sorted(ranges):\n+                    try:\n+                        if np.array_equal(rng.value, self.known_addresses_by_participant[p]):\n+                            # Only one participant in this iteration and address already known -> Highscore\n+                            rng.score = 1\n+                            break  # Take only the first (leftmost) range\n+                    except KeyError:\n+                        pass\n+\n+        high_scored_ranges_by_participant = defaultdict(list)\n+\n+        address_length = self.__estimate_address_length(ranges_by_participant)\n+\n+        # Get highscored ranges by participant\n+        for participant, common_ranges in ranges_by_participant.items():\n+            # Sort by negative score so ranges with highest score appear first\n+            # Secondary sort by tuple to ensure order when ranges have same score\n+            sorted_ranges = sorted(filter(lambda cr: cr.score > self.minimum_score, common_ranges),\n+                                   key=lambda cr: (-cr.score, cr))\n+            if len(sorted_ranges) == 0:\n+                addresses_by_participant[participant] = dict()\n+                continue\n+\n+            addresses_by_participant[participant] = {a for a in addresses_by_participant.get(participant, [])\n+                                                     if len(a) == address_length}\n+\n+            for rng in filter(lambda r: r.length == address_length, sorted_ranges):\n+                rng.score = min(rng.score, 1.0)\n+                high_scored_ranges_by_participant[participant].append(rng)\n+\n+        # Now we find the most probable address for all participants\n+        self.__assign_participant_addresses(addresses_by_participant, high_scored_ranges_by_participant)\n+\n+        # Eliminate participants for which we could not assign an address\n+        for participant, address in addresses_by_participant.copy().items():\n+            if address is None:\n+                del addresses_by_participant[participant]\n+\n+        # Now we can separate SRC and DST\n+        for participant, ranges in high_scored_ranges_by_participant.items():\n+            try:\n+                address = addresses_by_participant[participant]\n+            except KeyError:\n+                high_scored_ranges_by_participant[participant] = []\n+                continue\n+\n+            result = []\n+\n+            for rng in sorted(ranges, key=lambda r: r.score, reverse=True):\n+                rng.field_type = \"source address\" if rng.value.tostring() == address else \"destination address\"\n+                if len(result) == 0:\n+                    result.append(rng)\n+                else:\n+                    subset = next((r for r in result if rng.message_indices.issubset(r.message_indices)), None)\n+                    if subset is not None:\n+                        if rng.field_type == subset.field_type:\n+                            # Avoid adding same address type twice\n+                            continue\n+\n+                        if rng.length != subset.length or (rng.start != subset.end + 1 and rng.end + 1 != subset.start):\n+                            # Ensure addresses are next to each other\n+                            continue\n+\n+                    result.append(rng)\n+\n+            high_scored_ranges_by_participant[participant] = result\n+\n+        self.__find_broadcast_fields(high_scored_ranges_by_participant, addresses_by_participant)\n+\n+        result = [rng for ranges in high_scored_ranges_by_participant.values() for rng in ranges]\n+        # If we did not find a SRC address, lower the score a bit,\n+        # so DST fields do not win later e.g. again length fields in case of tie\n+        if not any(rng.field_type == \"source address\" for rng in result):\n+            for rng in result:\n+                rng.score *= 0.95\n+\n+        return result\n+\n+    def __estimate_address_length(self, ranges_by_participant: dict):\n+        \"\"\"\n+        Estimate the address length which is assumed to be the same for all participants\n+\n+        :param ranges_by_participant:\n+        :return:\n+        \"\"\"\n+        address_lengths = []\n+        for participant, common_ranges in ranges_by_participant.items():\n+            sorted_ranges = sorted(filter(lambda cr: cr.score > self.minimum_score, common_ranges),\n+                                   key=lambda cr: (-cr.score, cr))\n+\n+            max_scored = [r for r in sorted_ranges if r.score == sorted_ranges[0].score]\n+\n+            # Prevent overestimation of address length by looking for substrings\n+            for rng in max_scored[:]:\n+                same_message_rng = [r for r in sorted_ranges\n+                                    if r not in max_scored and r.score > 0 and r.message_indices == rng.message_indices]\n+\n+                if len(same_message_rng) > 1 and all(\n+                        r.value.tobytes() in rng.value.tobytes() for r in same_message_rng):\n+                    # remove the longer range and add the smaller ones\n+                    max_scored.remove(rng)\n+                    max_scored.extend(same_message_rng)\n+\n+            possible_address_lengths = [r.length for r in max_scored]\n+\n+            # Count possible address lengths.\n+            frequencies = Counter(possible_address_lengths)\n+            # Take the most common one. On tie, take the shorter one\n+            try:\n+                addr_len = max(frequencies, key=lambda x: (frequencies[x], -x))\n+                address_lengths.append(addr_len)\n+            except ValueError:  # max() arg is an empty sequence\n+                pass\n+\n+        # Take most common address length of participants, to ensure they all have same address length\n+        counted = Counter(address_lengths)\n+        try:\n+            address_length = max(counted, key=lambda x: (counted[x], -x))\n+            return address_length\n+        except ValueError:  # max() arg is an empty sequence\n+            return 0\n+\n+    def __assign_participant_addresses(self, addresses_by_participant, high_scored_ranges_by_participant):\n+        scored_participants_addresses = dict()\n+        for participant in addresses_by_participant:\n+            scored_participants_addresses[participant] = defaultdict(int)\n+\n+        for participant, addresses in addresses_by_participant.items():\n+            if participant in self.known_addresses_by_participant:\n+                address = self.known_addresses_by_participant[participant].tostring()\n+                scored_participants_addresses[participant][address] = 9999999999\n+                continue\n+\n+            for i in self.message_indices_by_participant[participant]:\n+                matching = [rng for rng in high_scored_ranges_by_participant[participant]\n+                            if i in rng.message_indices and rng.value.tostring() in addresses]\n+\n+                if len(matching) == 1:\n+                    address = matching[0].value.tostring()\n+                    # only one address, so probably a destination and not a source\n+                    scored_participants_addresses[participant][address] *= 0.9\n+\n+                    # Since this is probably an ACK, the address is probably SRC of participant of previous message\n+                    if i > 0 and self.participant_indices[i - 1] != participant:\n+                        prev_participant = self.participant_indices[i - 1]\n+                        prev_matching = [rng for rng in high_scored_ranges_by_participant[prev_participant]\n+                                         if i - 1 in rng.message_indices and rng.value.tostring() in addresses]\n+                        if len(prev_matching) > 1:\n+                            for prev_rng in filter(lambda r: r.value.tostring() == address, prev_matching):\n+                                scored_participants_addresses[prev_participant][address] += prev_rng.score\n+\n+                elif len(matching) > 1:\n+                    # more than one address, so there must be a source address included\n+                    for rng in matching:\n+                        scored_participants_addresses[participant][rng.value.tostring()] += rng.score\n+\n+        minimum_score = 0.5\n+        taken_addresses = set()\n+        self._debug(\"Scored addresses\", scored_participants_addresses)\n+\n+        # If all participants have exactly one possible address and they all differ, we can assign them right away\n+        if all(len(addresses) == 1 for addresses in scored_participants_addresses.values()):\n+            all_addresses = [list(addresses)[0] for addresses in scored_participants_addresses.values()]\n+            if len(all_addresses) == len(set(all_addresses)):  # ensure all addresses are different\n+                for p, addresses in scored_participants_addresses.items():\n+                    addresses_by_participant[p] = list(addresses)[0]\n+                return\n+\n+        for participant, addresses in sorted(scored_participants_addresses.items()):\n+            try:\n+                # sort filtered results to prevent randomness for equal scores\n+                found_address = max(sorted(\n+                    filter(lambda a: a not in taken_addresses and addresses[a] >= minimum_score, addresses),\n+                    reverse=True\n+                ), key=addresses.get)\n+            except ValueError:\n+                # Could not assign address for this participant\n+                addresses_by_participant[participant] = None\n+                continue\n+\n+            addresses_by_participant[participant] = found_address\n+            taken_addresses.add(found_address)\n+\n+    def __find_broadcast_fields(self, high_scored_ranges_by_participant, addresses_by_participant: dict):\n+        \"\"\"\n+        Last we check for messages that were sent to broadcast\n+          1. we search for messages that have a SRC address but no DST address\n+          2. we look at other messages that have this SRC field and find the corresponding DST position\n+          3. we evaluate the value of message without DST from 1 and compare these values with each other.\n+             if they match, we found the broadcast address\n+        :param high_scored_ranges_by_participant:\n+        :return:\n+        \"\"\"\n+        if -1 in addresses_by_participant:\n+            # broadcast address is already known\n+            return\n+\n+        broadcast_bag = defaultdict(list)  # type: dict[CommonRange, list[int]]\n+        for common_ranges in high_scored_ranges_by_participant.values():\n+            src_address_fields = sorted(filter(lambda r: r.field_type == \"source address\", common_ranges))\n+            dst_address_fields = sorted(filter(lambda r: r.field_type == \"destination address\", common_ranges))\n+            msg_with_dst = {i for dst_address_field in dst_address_fields for i in dst_address_field.message_indices}\n+\n+            for src_address_field in src_address_fields:  # type: CommonRange\n+                msg_without_dst = {i for i in src_address_field.message_indices if i not in msg_with_dst}\n+                if len(msg_without_dst) == 0:\n+                    continue\n+                try:\n+                    matching_dst = next(dst for dst in dst_address_fields\n+                                        if all(i in dst.message_indices\n+                                               for i in src_address_field.message_indices - msg_without_dst))\n+                except StopIteration:\n+                    continue\n+                for msg in msg_without_dst:\n+                    broadcast_bag[matching_dst].append(msg)\n+\n+        if len(broadcast_bag) == 0:\n+            return\n+\n+        broadcast_address = None\n+        for dst, messages in broadcast_bag.items():\n+            for msg_index in messages:\n+                value = self.msg_vectors[msg_index][dst.start:dst.end + 1]\n+                if broadcast_address is None:\n+                    broadcast_address = value\n+                elif value.tobytes() != broadcast_address.tobytes():\n+                    # Address is not common across messages so it can't be a broadcast address\n+                    return\n+\n+        addresses_by_participant[-1] = broadcast_address.tobytes()\n+        for dst, messages in broadcast_bag.items():\n+            dst.values.append(broadcast_address)\n+            dst.message_indices.update(messages)\n+\n+    def find_addresses(self) -> dict:\n+        already_assigned = list(self.known_addresses_by_participant.keys())\n+        if len(already_assigned) == len(self.message_indices_by_participant):\n+            self._debug(\"Skipping find addresses as already known.\")\n+            return dict()\n+\n+        common_ranges_by_participant = dict()\n+        for participant, message_indices in self.message_indices_by_participant.items():\n+            # Cluster by length\n+            length_clusters = defaultdict(list)\n+            for i in message_indices:\n+                length_clusters[len(self.msg_vectors[i])].append(i)\n+\n+            common_ranges_by_length = self.find_common_ranges_by_cluster(self.msg_vectors, length_clusters, range_type=\"hex\")\n+            common_ranges_by_participant[participant] = []\n+            for ranges in common_ranges_by_length.values():\n+                common_ranges_by_participant[participant].extend(self.ignore_already_labeled(ranges,\n+                                                                                             self.already_labeled))\n+\n+        self._debug(\"Common ranges by participant:\", common_ranges_by_participant)\n+\n+        result = defaultdict(set)\n+        participants = sorted(common_ranges_by_participant)  # type: list[int]\n+\n+        if len(participants) < 2:\n+            return result\n+\n+        # If we already know the address length we do not need to bother with other candidates\n+        if len(already_assigned) > 0:\n+            addr_len = len(self.known_addresses_by_participant[already_assigned[0]])\n+            if any(len(self.known_addresses_by_participant[i]) != addr_len for i in already_assigned):\n+                logger.warning(\"Addresses do not have a common length. Assuming length of {}\".format(addr_len))\n+        else:\n+            addr_len = None\n+\n+        for p1, p2 in itertools.combinations(participants, 2):\n+            p1_already_assigned = p1 in already_assigned\n+            p2_already_assigned = p2 in already_assigned\n+\n+            if p1_already_assigned and p2_already_assigned:\n+                continue\n+\n+            # common ranges are not merged yet, so there is only one element in values\n+            values1 = [cr.value for cr in common_ranges_by_participant[p1]]\n+            values2 = [cr.value for cr in common_ranges_by_participant[p2]]\n+            for seq1, seq2 in itertools.product(values1, values2):\n+                lcs = self.find_longest_common_sub_sequences(seq1, seq2)\n+                vals = lcs if len(lcs) > 0 else [seq1, seq2]\n+                # Address candidate must be at least 2 values long\n+                for val in filter(lambda v: len(v) >= 2, vals):\n+                    if addr_len is not None and len(val) != addr_len:\n+                        continue\n+                    if not p1_already_assigned and not p2_already_assigned:\n+                        result[p1].add(val.tostring())\n+                        result[p2].add(val.tostring())\n+                    elif p1_already_assigned and val.tostring() != self.known_addresses_by_participant[p1].tostring():\n+                        result[p2].add(val.tostring())\n+                    elif p2_already_assigned and val.tostring() != self.known_addresses_by_participant[p2].tostring():\n+                        result[p1].add(val.tostring())\n+        return result\ndiff --git a\/src\/urh\/awre\/engines\/ChecksumEngine.py b\/src\/urh\/awre\/engines\/ChecksumEngine.py\nnew file mode 100644\nindex 0000000..9ad5d7a\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/engines\/ChecksumEngine.py\n@@ -0,0 +1,121 @@\n+import copy\n+import math\n+from collections import defaultdict\n+\n+import numpy as np\n+from urh.util.WSPChecksum import WSPChecksum\n+\n+from urh.awre.CommonRange import ChecksumRange\n+from urh.awre.engines.Engine import Engine\n+from urh.cythonext import awre_util\n+from urh.util.GenericCRC import GenericCRC\n+\n+\n+class ChecksumEngine(Engine):\n+    def __init__(self, bitvectors, n_gram_length=8, minimum_score=0.9, already_labeled: list = None):\n+        \"\"\"\n+        :type bitvectors: list of np.ndarray\n+        :param bitvectors: bitvectors behind the synchronization\n+        \"\"\"\n+        self.bitvectors = bitvectors\n+        self.n_gram_length = n_gram_length\n+        self.minimum_score = minimum_score\n+        if already_labeled is None:\n+            self.already_labeled_cols = set()\n+        else:\n+            self.already_labeled_cols = {e for rng in already_labeled for e in range(*rng)}\n+\n+    def find(self):\n+        result = list()\n+        bitvectors_by_n_gram_length = defaultdict(list)\n+        for i, bitvector in enumerate(self.bitvectors):\n+            bin_num = int(math.ceil(len(bitvector) \/ self.n_gram_length))\n+            bitvectors_by_n_gram_length[bin_num].append(i)\n+\n+        crc = GenericCRC()\n+        for length, message_indices in bitvectors_by_n_gram_length.items():\n+            checksums_for_length = []\n+            for index in message_indices:\n+                bits = self.bitvectors[index]\n+                data_start, data_stop, crc_start, crc_stop = WSPChecksum.search_for_wsp_checksum(bits)\n+                if (data_start, data_stop, crc_start, crc_stop) != (0, 0, 0, 0):\n+                    checksum_range = ChecksumRange(start=crc_start, length=crc_stop-crc_start,\n+                                                   data_range_start=data_start, data_range_end=data_stop,\n+                                                   crc=WSPChecksum(), score=1\/len(message_indices),\n+                                                   field_type=\"checksum\", message_indices={index})\n+                    try:\n+                        present = next(c for c in checksums_for_length if c == checksum_range)\n+                        present.message_indices.add(index)\n+                    except StopIteration:\n+                        checksums_for_length.append(checksum_range)\n+                    continue\n+\n+                crc_object, data_start, data_stop, crc_start, crc_stop = crc.guess_all(bits,\n+                                                                                       ignore_positions=self.already_labeled_cols)\n+\n+                if (crc_object, data_start, data_stop, crc_start, crc_stop) != (0, 0, 0, 0, 0):\n+                    checksum_range = ChecksumRange(start=crc_start, length=crc_stop - crc_start,\n+                                                   data_range_start=data_start, data_range_end=data_stop,\n+                                                   crc=copy.copy(crc_object), score=1 \/ len(message_indices),\n+                                                   field_type=\"checksum\", message_indices={index}\n+                                                   )\n+\n+                    try:\n+                        present = next(rng for rng in checksums_for_length if rng == checksum_range)\n+                        present.message_indices.add(index)\n+                        continue\n+                    except StopIteration:\n+                        pass\n+\n+                    checksums_for_length.append(checksum_range)\n+\n+                    matching = awre_util.check_crc_for_messages(message_indices, self.bitvectors,\n+                                                                data_start, data_stop,\n+                                                                crc_start, crc_stop,\n+                                                                *crc_object.get_parameters())\n+\n+                    checksum_range.message_indices.update(matching)\n+\n+            # Score ranges\n+            for rng in checksums_for_length:\n+                rng.score = len(rng.message_indices) \/ len(message_indices)\n+\n+            try:\n+                result.append(max(checksums_for_length, key=lambda x: x.score))\n+            except ValueError:\n+                pass  # no checksums found for this length\n+\n+        self._debug(\"Found Checksums\", result)\n+        try:\n+            max_scored = max(filter(lambda x: len(x.message_indices) >= 2 and x.score >= self.minimum_score, result),\n+                             key=lambda x: x.score)\n+        except ValueError:\n+            return []\n+\n+        result = list(filter(lambda x: x.crc == max_scored.crc, result))\n+        self._debug(\"Filtered Checksums\", result)\n+\n+        return result\n+\n+    @staticmethod\n+    def calc_score(diff_frequencies: dict) -> float:\n+        \"\"\"\n+        Calculate the score based on the distribution of differences\n+          1. high if one constant (!= zero) dominates\n+          2. Other constants (!= zero) should lower the score, zero means sequence number stays same for some messages\n+\n+        :param diff_frequencies: Frequencies of decimal differences between columns of subsequent messages\n+                                 e.g. {-255: 3, 1: 1020} means -255 appeared 3 times and 1 appeared 1020 times\n+        :return: a score between 0 and 1\n+        \"\"\"\n+        total = sum(diff_frequencies.values())\n+        num_zeros = sum(v for k, v in diff_frequencies.items() if k == 0)\n+        if num_zeros == total:\n+            return 0\n+\n+        try:\n+            most_frequent = ChecksumEngine.get_most_frequent(diff_frequencies)\n+        except ValueError:\n+            return 0\n+\n+        return diff_frequencies[most_frequent] \/ (total - num_zeros)\ndiff --git a\/src\/urh\/awre\/engines\/Engine.py b\/src\/urh\/awre\/engines\/Engine.py\nnew file mode 100644\nindex 0000000..3198797\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/engines\/Engine.py\n@@ -0,0 +1,85 @@\n+from urh.awre.CommonRange import CommonRange\n+from urh.awre.Histogram import Histogram\n+import numpy as np\n+from urh.cythonext import awre_util\n+import itertools\n+\n+\n+class Engine(object):\n+    _DEBUG_ = False\n+\n+    def _debug(self, *args):\n+        if self._DEBUG_:\n+            print(\"[{}]\".format(self.__class__.__name__), *args)\n+\n+    @staticmethod\n+    def find_common_ranges_by_cluster(msg_vectors, clustered_bitvectors, alpha=0.95, range_type=\"bit\"):\n+        \"\"\"\n+\n+        :param alpha: How many percent of values must be equal per range?\n+        :param range_type: Describes what kind of range this is: bit, hex or byte.\n+                           Needed for conversion of range start \/ end later\n+        :type msg_vectors: list of np.ndarray\n+        :type clustered_bitvectors: dict\n+        :rtype: dict[int, list of CommonRange]\n+        \"\"\"\n+        histograms = {\n+            cluster: Histogram(msg_vectors, message_indices)\n+            for cluster, message_indices in clustered_bitvectors.items()\n+        }\n+\n+        common_ranges_by_cluster = {\n+            cluster: histogram.find_common_ranges(alpha=alpha, range_type=range_type)\n+            for cluster, histogram in histograms.items()\n+        }\n+\n+        return common_ranges_by_cluster\n+\n+    @staticmethod\n+    def find_common_ranges_exhaustive(msg_vectors, msg_indices, range_type=\"bit\") -> list:\n+        result = []\n+\n+        for i, j in itertools.combinations(msg_indices, 2):\n+            for rng in Histogram(msg_vectors, indices=[i, j]).find_common_ranges(alpha=1, range_type=range_type):\n+                try:\n+                    common_range = next(cr for cr in result if cr.start == rng.start and cr.value.tobytes() == rng.value.tobytes())\n+                    common_range.message_indices.update({i, j})\n+                except StopIteration:\n+                    result.append(rng)\n+\n+        return result\n+\n+    @staticmethod\n+    def ignore_already_labeled(common_ranges, already_labeled):\n+        \"\"\"\n+        Shrink the common ranges so that they not overlap with already labeled ranges.\n+        Empty common ranges are removed after shrinking\n+\n+        :type common_ranges: list of CommonRange\n+        :type already_labeled: list of tuple\n+        :return: list of CommonRange\n+        \"\"\"\n+        result = []\n+        for common_range in common_ranges:\n+            range_result = [common_range]\n+            for start, end in already_labeled:\n+                for rng in range_result[:]:\n+                    range_result.remove(rng)\n+                    range_result.extend(rng.ensure_not_overlaps(start, end))\n+            result.extend(range_result)\n+\n+        return result\n+\n+    @staticmethod\n+    def find_longest_common_sub_sequences(seq1, seq2) -> list:\n+        result = []\n+        if seq1 is None or seq2 is None:\n+            return result\n+\n+        indices = awre_util.find_longest_common_sub_sequence_indices(seq1, seq2)\n+        for ind in indices:\n+            s = seq1[slice(*ind)]\n+            if len(s) > 0:\n+                result.append(s)\n+\n+        return result\ndiff --git a\/src\/urh\/awre\/engines\/LengthEngine.py b\/src\/urh\/awre\/engines\/LengthEngine.py\nnew file mode 100644\nindex 0000000..413a6fa\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/engines\/LengthEngine.py\n@@ -0,0 +1,193 @@\n+import math\n+from collections import defaultdict\n+\n+import numpy as np\n+\n+from urh.awre.CommonRange import CommonRange, EmptyCommonRange\n+from urh.awre.engines.Engine import Engine\n+from urh.cythonext import awre_util\n+\n+\n+class LengthEngine(Engine):\n+    def __init__(self, bitvectors, already_labeled=None):\n+        \"\"\"\n+\n+        :type bitvectors: list of np.ndarray\n+        :param bitvectors: bitvectors behind the synchronization\n+        \"\"\"\n+        self.bitvectors = bitvectors\n+        self.already_labeled = [] if already_labeled is None else already_labeled\n+\n+    def find(self, n_gram_length=8, minimum_score=0.1):\n+        # Consider the n_gram_length\n+        bitvectors_by_n_gram_length = defaultdict(list)\n+        for i, bitvector in enumerate(self.bitvectors):\n+            bin_num = int(math.ceil(len(bitvector) \/ n_gram_length))\n+            bitvectors_by_n_gram_length[bin_num].append(i)\n+\n+        common_ranges_by_length = self.find_common_ranges_by_cluster(self.bitvectors,\n+                                                                     bitvectors_by_n_gram_length,\n+                                                                     alpha=0.7)\n+\n+        for length, ranges in common_ranges_by_length.items():\n+            common_ranges_by_length[length] = self.ignore_already_labeled(ranges, self.already_labeled)\n+\n+        self.filter_common_ranges(common_ranges_by_length)\n+        self._debug(\"Common Ranges:\", common_ranges_by_length)\n+\n+        scored_ranges = self.score_ranges(common_ranges_by_length, n_gram_length)\n+        self._debug(\"Scored Ranges\", scored_ranges)\n+\n+        # Take the ranges with highest score per cluster if it's score surpasses the minimum score\n+        high_scores_by_length = self.choose_high_scored_ranges(scored_ranges, bitvectors_by_n_gram_length,\n+                                                               minimum_score)\n+        self._debug(\"Highscored Ranges\", high_scores_by_length)\n+        return high_scores_by_length.values()\n+\n+    @staticmethod\n+    def filter_common_ranges(common_ranges_by_length: dict):\n+        \"\"\"\n+        Ranges must be common along length clusters\n+        but their values must differ, so now we rule out all ranges that are\n+          1. common across clusters AND\n+          2. have same value\n+\n+        :return:\n+        \"\"\"\n+\n+        ranges = [r for rng in common_ranges_by_length.values() for r in rng]\n+        for rng in ranges:\n+            count = len([r for r in ranges if rng.start == r.start\n+                         and rng.length == r.length\n+                         and rng.value.tobytes() == r.value.tobytes()]\n+                        )\n+            if count < 2:\n+                continue\n+\n+            for length in common_ranges_by_length:\n+                try:\n+                    common_ranges_by_length[length].remove(rng)\n+                except ValueError:\n+                    pass\n+\n+    @staticmethod\n+    def score_ranges(common_ranges_by_length: dict, n_gram_length: int):\n+        \"\"\"\n+        Calculate score for the common ranges\n+\n+        :param common_ranges_by_length:\n+        :param n_gram_length:\n+        :return:\n+        \"\"\"\n+\n+        # The window length must be smaller than common range's length\n+        # and is something like 8 in case of on 8 bit integer.\n+        # We make this generic so e.g. 4 bit integers are supported as well\n+        if n_gram_length == 8:\n+            window_lengths = [8, 16, 32, 64]\n+        else:\n+            window_lengths = [n_gram_length * i for i in range(1, 5)]\n+\n+        scored_ranges = dict()\n+        for length in common_ranges_by_length:\n+            scored_ranges[length] = dict()\n+            for window_length in window_lengths:\n+                scored_ranges[length][window_length] = []\n+\n+        byteorders = [\"big\", \"little\"] if n_gram_length == 8 else [\"big\"]\n+        for window_length in window_lengths:\n+            for length, common_ranges in common_ranges_by_length.items():\n+                for common_range in filter(lambda cr: cr.length >= window_length, common_ranges):\n+                    bits = common_range.value\n+                    rng_byte_order = \"big\"\n+\n+                    max_score = max_start = -1\n+                    for start in range(0, len(bits) + 1 - window_length, n_gram_length):\n+                        for byteorder in byteorders:\n+                            score = LengthEngine.score_bits(bits[start:start + window_length],\n+                                                            length, position=start, byteorder=byteorder)\n+\n+                            if score > max_score:\n+                                max_score = score\n+                                max_start = start\n+                                rng_byte_order = byteorder\n+\n+                    rng = CommonRange(common_range.start + max_start, window_length,\n+                                      common_range.value[max_start:max_start + window_length],\n+                                      score=max_score, field_type=\"length\",\n+                                      message_indices=common_range.message_indices,\n+                                      range_type=common_range.range_type,\n+                                      byte_order=rng_byte_order)\n+                    scored_ranges[length][window_length].append(rng)\n+\n+        return scored_ranges\n+\n+    def choose_high_scored_ranges(self, scored_ranges: dict, bitvectors_by_n_gram_length: dict, minimum_score: float):\n+\n+        # Set for every window length the highest scored range as candidate\n+        possible_window_lengths = defaultdict(int)\n+        for length, ranges_by_window_length in scored_ranges.items():\n+            for window_length, ranges in ranges_by_window_length.items():\n+                try:\n+                    ranges_by_window_length[window_length] = max(filter(lambda x: x.score >= minimum_score, ranges),\n+                                                                 key=lambda x: x.score)\n+                    possible_window_lengths[window_length] += 1\n+                except ValueError:\n+                    ranges_by_window_length[window_length] = None\n+\n+        try:\n+            # Choose window length -> window length that has a result most often and choose greater on tie\n+            chosen_window_length = max(possible_window_lengths, key=lambda x: (possible_window_lengths[x], x))\n+        except ValueError:\n+            return dict()\n+\n+        high_scores_by_length = dict()\n+\n+        # Choose all ranges with highest score per cluster if score surpasses the minimum score\n+        for length, ranges_by_window_length in scored_ranges.items():\n+            try:\n+                if ranges_by_window_length[chosen_window_length]:\n+                    high_scores_by_length[length] = ranges_by_window_length[chosen_window_length]\n+            except KeyError:\n+                continue\n+\n+        # If there are length clusters with only one message see if we can assign a range from other clusters\n+        for length, msg_indices in bitvectors_by_n_gram_length.items():\n+            if len(msg_indices) != 1:\n+                continue\n+\n+            msg_index = msg_indices[0]\n+            bitvector = self.bitvectors[msg_index]\n+            max_score, best_match = 0, None\n+\n+            for rng in high_scores_by_length.values():\n+                bits = bitvector[rng.start:rng.end + 1]\n+                if len(bits) > 0:\n+                    score = self.score_bits(bits, length, rng.start)\n+                    if score > max_score:\n+                        best_match, max_score = rng, score\n+\n+            if best_match is not None:\n+                high_scores_by_length[length] = CommonRange(best_match.start, best_match.length,\n+                                                            value=bitvector[best_match.start:best_match.end + 1],\n+                                                            score=max_score, field_type=\"length\",\n+                                                            message_indices={msg_index}, range_type=\"bit\")\n+\n+        return high_scores_by_length\n+\n+    @staticmethod\n+    def score_bits(bits: np.ndarray, target_length: int, position: int, byteorder=\"big\"):\n+        value = awre_util.bit_array_to_number(bits, len(bits))\n+        if byteorder == \"little\":\n+            if len(bits) > 8 and len(bits) % 8 == 0:\n+                n = len(bits) \/\/ 8\n+                value = int.from_bytes(value.to_bytes(n, byteorder=\"big\"), byteorder=\"little\", signed=False)\n+\n+        # Length field should be at front, so we give lower scores for large starts\n+        f = (1 \/ (1 + 0.25 * position))\n+\n+        return f * LengthEngine.gauss(value, target_length)\n+\n+    @staticmethod\n+    def gauss(x, mu, sigma=2):\n+        return np.exp(-0.5 * np.power((x - mu) \/ sigma, 2))\ndiff --git a\/src\/urh\/awre\/engines\/SequenceNumberEngine.py b\/src\/urh\/awre\/engines\/SequenceNumberEngine.py\nnew file mode 100644\nindex 0000000..aa64406\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/engines\/SequenceNumberEngine.py\n@@ -0,0 +1,137 @@\n+import numpy as np\n+\n+from urh.awre.CommonRange import CommonRange\n+from urh.awre.engines.Engine import Engine\n+from urh.cythonext import awre_util\n+\n+\n+class SequenceNumberEngine(Engine):\n+    def __init__(self, bitvectors, n_gram_length=8, minimum_score=0.75, already_labeled: list = None):\n+        \"\"\"\n+\n+        :type bitvectors: list of np.ndarray\n+        :param bitvectors: bitvectors behind the synchronization\n+        \"\"\"\n+        self.bitvectors = bitvectors\n+        self.n_gram_length = n_gram_length\n+        self.minimum_score = minimum_score\n+        if already_labeled is None:\n+            self.already_labeled_cols = set()\n+        else:\n+            self.already_labeled_cols = {e \/\/ n_gram_length for rng in already_labeled for e in range(*rng)}\n+\n+    def find(self):\n+        n = self.n_gram_length\n+\n+        if len(self.bitvectors) < 3:\n+            # We need at least 3 bitvectors to properly find a sequence number\n+            return []\n+\n+        diff_matrix = self.create_difference_matrix(self.bitvectors, self.n_gram_length)\n+        diff_frequencies_by_column = dict()\n+\n+        for j in range(diff_matrix.shape[1]):\n+            unique, counts = np.unique(diff_matrix[:, j], return_counts=True)\n+            diff_frequencies_by_column[j] = dict(zip(unique, counts))\n+\n+        self._debug(\"Diff_frequencies_by_column\", diff_frequencies_by_column)\n+        scores_by_column = dict()\n+        for column, frequencies in diff_frequencies_by_column.items():\n+            if column not in self.already_labeled_cols:\n+                scores_by_column[column] = self.calc_score(frequencies)\n+            else:\n+                scores_by_column[column] = 0\n+\n+        self._debug(\"Scores by column\", scores_by_column)\n+        result = []\n+        for candidate_column in sorted(scores_by_column, key=scores_by_column.get, reverse=True):\n+            score = scores_by_column[candidate_column]\n+            if score < self.minimum_score:\n+                continue\n+\n+            most_common_diff = self.get_most_frequent(diff_frequencies_by_column[candidate_column])\n+            message_indices = np.flatnonzero(\n+                # get all rows that have the most common difference or zero\n+                (diff_matrix[:, candidate_column] == most_common_diff) | (diff_matrix[:, candidate_column] == 0)\n+            )\n+\n+            # For example, index 1 in diff matrix corresponds to index 1 and 2 of messages\n+            message_indices = set(message_indices) | set(message_indices + 1)\n+            values = set()\n+            for i in message_indices:\n+                values.add(self.bitvectors[i][candidate_column * n:(candidate_column + 1) * n].tobytes())\n+\n+            matching_ranges = [r for r in result if r.message_indices == message_indices]\n+\n+            try:\n+                matching_range = next(r for r in matching_ranges if r.start == (candidate_column - 1) * n\n+                                      and (r.byte_order_is_unknown or r.byte_order == \"big\"))\n+                matching_range.length += n\n+                matching_range.byte_order = \"big\"\n+                matching_range.values.extend(list(values))\n+                continue\n+            except StopIteration:\n+                pass\n+\n+            try:\n+                matching_range = next(r for r in matching_ranges if r.start == (candidate_column + 1) * n\n+                                      and (r.byte_order_is_unknown or r.byte_order == \"little\"))\n+                matching_range.start -= n\n+                matching_range.length += n\n+                matching_range.byte_order = \"little\"\n+                matching_range.values.extend(list(values))\n+                continue\n+            except StopIteration:\n+                pass\n+\n+            new_range = CommonRange(start=candidate_column * n, length=n, score=score,\n+                                    field_type=\"sequence number\", message_indices=message_indices,\n+                                    byte_order=None)\n+            new_range.values.extend(list(values))\n+            result.append(new_range)\n+\n+        # At least three different values needed to reliably identify a sequence number\n+        return [rng for rng in result if len(set(rng.values)) > 2]\n+\n+    @staticmethod\n+    def get_most_frequent(diff_frequencies: dict):\n+        return max(filter(lambda x: x not in (0, -1), diff_frequencies), key=diff_frequencies.get)\n+\n+    @staticmethod\n+    def calc_score(diff_frequencies: dict) -> float:\n+        \"\"\"\n+        Calculate the score based on the distribution of differences\n+          1. high if one constant (!= zero) dominates\n+          2. Other constants (!= zero) should lower the score, zero means sequence number stays same for some messages\n+\n+        :param diff_frequencies: Frequencies of decimal differences between columns of subsequent messages\n+                                 e.g. {0: 3, 1: 1020} means 0 appeared 3 times and 1 appeared 1020 times\n+        :return: a score between 0 and 1\n+        \"\"\"\n+        total = sum(diff_frequencies.values())\n+        num_zeros = sum(v for k, v in diff_frequencies.items() if k == 0)\n+        if num_zeros == total:\n+            return 0\n+\n+        try:\n+            most_frequent = SequenceNumberEngine.get_most_frequent(diff_frequencies)\n+        except ValueError:\n+            return 0\n+\n+        return diff_frequencies[most_frequent] \/ (total - num_zeros)\n+\n+    @staticmethod\n+    def create_difference_matrix(bitvectors, n_gram_length: int):\n+        \"\"\"\n+        Create the difference matrix e.g.\n+        10 20 0\n+        1  2  3\n+        4  5  6\n+\n+        means first eight bits of messages 1 and 2 (row 1) differ by 10 if they are considered as decimal number\n+\n+        :type bitvectors: list of np.ndarray\n+        :type n_gram_length: int\n+        :rtype: np.ndarray\n+        \"\"\"\n+        return awre_util.create_seq_number_difference_matrix(bitvectors, n_gram_length)\ndiff --git a\/src\/urh\/awre\/engines\/__init__.py b\/src\/urh\/awre\/engines\/__init__.py\nnew file mode 100644\nindex 0000000..e69de29\n--- \/dev\/null\n+++ b\/src\/urh\/awre\/engines\/__init__.py\ndiff --git a\/src\/urh\/controller\/CompareFrameController.py b\/src\/urh\/controller\/CompareFrameController.py\nindex 93769a4..c7e9424 100644\n--- a\/src\/urh\/controller\/CompareFrameController.py\n+++ b\/src\/urh\/controller\/CompareFrameController.py\n@@ -1,6 +1,7 @@\n import locale\n import math\n import os\n+import traceback\n from collections import defaultdict\n from datetime import datetime\n \n@@ -9,8 +10,10 @@\n     QModelIndex\n from PyQt5.QtGui import QContextMenuEvent, QIcon\n from PyQt5.QtWidgets import QMessageBox, QAbstractItemView, QUndoStack, QMenu, QWidget, QHeaderView\n+from urh.util.Errors import Errors\n \n from urh import constants\n+from urh.awre import AutoAssigner\n from urh.controller.dialogs.MessageTypeDialog import MessageTypeDialog\n from urh.controller.dialogs.ProtocolLabelDialog import ProtocolLabelDialog\n from urh.models.LabelValueTableModel import LabelValueTableModel\n@@ -84,7 +87,7 @@\n         self.assign_message_type_action.setChecked(True)\n         self.assign_labels_action = self.analyze_menu.addAction(self.tr(\"Assign labels\"))\n         self.assign_labels_action.setCheckable(True)\n-        self.assign_labels_action.setChecked(False)\n+        self.assign_labels_action.setChecked(True)\n         self.assign_participant_address_action = self.analyze_menu.addAction(self.tr(\"Assign participant addresses\"))\n         self.assign_participant_address_action.setCheckable(True)\n         self.assign_participant_address_action.setChecked(True)\n@@ -439,6 +442,15 @@\n                     if messsage_type.name in (mt.name for mt in self.proto_analyzer.message_types):\n                         messsage_type.name += \" (\" + os.path.split(filename)[1].rstrip(\".xml\").rstrip(\".proto\") + \")\"\n                     self.proto_analyzer.message_types.append(messsage_type)\n+\n+        update_project = False\n+        for msg in pa.messages:\n+            if msg.participant is not None and msg.participant not in self.project_manager.participants:\n+                self.project_manager.participants.append(msg.participant)\n+                update_project = True\n+\n+        if update_project:\n+            self.project_manager.project_updated.emit()\n \n         self.message_type_table_model.update()\n         self.add_protocol(protocol=pa)\n@@ -1011,7 +1023,7 @@\n \n         if self.assign_participants_action.isChecked():\n             for protocol in self.protocol_list:\n-                protocol.auto_assign_participants(self.protocol_model.participants)\n+                AutoAssigner.auto_assign_participants(protocol.messages, self.protocol_model.participants)\n             self.refresh_assigned_participants_ui()\n \n         self.ui.progressBarLogicAnalyzer.setFormat(\"%p% (Assign message type by rules)\")\n@@ -1024,16 +1036,23 @@\n         self.ui.progressBarLogicAnalyzer.setValue(75)\n \n         if self.assign_labels_action.isChecked():\n-            self.proto_analyzer.auto_assign_labels()\n-            self.protocol_model.update()\n-            self.label_value_model.update()\n-            self.message_type_table_model.update()\n-            self.ui.tblViewMessageTypes.clearSelection()\n+            try:\n+                self.proto_analyzer.auto_assign_labels()\n+                self.protocol_model.update()\n+                self.label_value_model.update()\n+                self.message_type_table_model.update()\n+                self.ui.tblViewMessageTypes.clearSelection()\n+            except Exception as e:\n+                logger.exception(e)\n+                Errors.generic_error(\"Failed to assign labels\",\n+                                     \"An error occurred during automatic label assignment\",\n+                                     traceback.format_exc())\n \n         self.ui.progressBarLogicAnalyzer.setValue(90)\n \n         if self.assign_participant_address_action.isChecked():\n-            self.proto_analyzer.auto_assign_participant_addresses(self.protocol_model.participants)\n+            AutoAssigner.auto_assign_participant_addresses(self.proto_analyzer.messages,\n+                                                           self.protocol_model.participants)\n \n         self.ui.progressBarLogicAnalyzer.setValue(100)\n         self.unsetCursor()\ndiff --git a\/src\/urh\/controller\/MainController.py b\/src\/urh\/controller\/MainController.py\nindex ead9d3d..46ac56f 100644\n--- a\/src\/urh\/controller\/MainController.py\n+++ b\/src\/urh\/controller\/MainController.py\n@@ -208,6 +208,7 @@\n             self.on_show_field_types_config_action_triggered)\n \n         self.compare_frame_controller.load_protocol_clicked.connect(self.on_compare_frame_controller_load_protocol_clicked)\n+        self.compare_frame_controller.ui.listViewParticipants.doubleClicked.connect(self.on_project_settings_action_triggered)\n \n         self.ui.lnEdtTreeFilter.textChanged.connect(self.on_file_tree_filter_text_changed)\n \n@@ -257,6 +258,7 @@\n         proto = self.compare_frame_controller.add_protocol_from_file(filename)\n         if proto:\n             self.__add_empty_frame_for_filename(proto, filename)\n+        self.ui.tabWidget.setCurrentWidget(self.ui.tab_protocol)\n \n     def add_fuzz_profile(self, filename):\n         self.ui.tabWidget.setCurrentIndex(2)\ndiff --git a\/src\/urh\/controller\/widgets\/SignalFrame.py b\/src\/urh\/controller\/widgets\/SignalFrame.py\nindex 8201281..db1c6bf 100644\n--- a\/src\/urh\/controller\/widgets\/SignalFrame.py\n+++ b\/src\/urh\/controller\/widgets\/SignalFrame.py\n@@ -266,6 +266,8 @@\n                                                 self.ui.btnCloseSignal, self.ui.lineEditSignalName):\n                 w.hide()\n \n+        self.adjustSize()\n+\n     def cancel_filtering(self):\n         self.filter_abort_wanted = True\n \ndiff --git a\/src\/urh\/cythonext\/awre_util.pyx b\/src\/urh\/cythonext\/awre_util.pyx\nnew file mode 100644\nindex 0000000..833bfb7\n--- \/dev\/null\n+++ b\/src\/urh\/cythonext\/awre_util.pyx\n@@ -0,0 +1,384 @@\n+# noinspection PyUnresolvedReferences\n+cimport numpy as np\n+import numpy as np\n+\n+\n+from libc.math cimport floor, ceil, pow\n+from libc.stdlib cimport malloc, free\n+\n+from libcpp cimport bool\n+from libc.stdint cimport uint8_t, uint16_t, uint32_t, uint64_t, int32_t, int8_t, int64_t\n+\n+from array import array\n+\n+\n+from urh.cythonext.util import crc\n+\n+cpdef set find_longest_common_sub_sequence_indices(np.uint8_t[::1] seq1, np.uint8_t[::1] seq2):\n+    cdef unsigned int i, j, longest = 0, counter = 0, len_bits1 = len(seq1), len_bits2 = len(seq2)\n+    cdef unsigned short max_results = 10, current_result = 0\n+\n+    cdef unsigned int[:, ::1] m = np.zeros((len_bits1+1, len_bits2+1), dtype=np.uint32, order=\"C\")\n+    cdef unsigned int[:, ::1] result_indices = np.zeros((max_results, 2), dtype=np.uint32, order=\"C\")\n+\n+    for i in range(0, len_bits1):\n+        for j in range(0, len_bits2):\n+            if seq1[i] == seq2[j]:\n+                counter = m[i, j] + 1\n+                m[i+1, j+1] = counter\n+\n+                if counter > longest:\n+                    longest = counter\n+\n+                    current_result = 0\n+                    result_indices[current_result, 0] = i - counter + 1\n+                    result_indices[current_result, 1] = i + 1\n+                elif counter == longest:\n+                    if current_result < max_results - 1:\n+                        current_result += 1\n+                        result_indices[current_result, 0] = i - counter + 1\n+                        result_indices[current_result, 1] = i + 1\n+\n+    cdef set result = set()\n+    for i in range(current_result+1):\n+        result.add((result_indices[i, 0], result_indices[i, 1]))\n+\n+    return result\n+\n+cpdef uint32_t find_first_difference(uint8_t[::1] bits1, uint8_t[::1] bits2, uint32_t len_bits1, uint32_t len_bits2) nogil:\n+    cdef uint32_t i, smaller_len = min(len_bits1, len_bits2)\n+\n+    for i in range(0, smaller_len):\n+        if bits1[i] != bits2[i]:\n+            return i\n+\n+    return smaller_len\n+\n+cpdef np.ndarray[np.uint32_t, ndim=2, mode=\"c\"] get_difference_matrix(list bitvectors):\n+    cdef uint32_t i, j, N = len(bitvectors)\n+    cdef np.ndarray[np.uint32_t, ndim=2, mode=\"c\"] result = np.zeros((N, N), dtype=np.uint32, order=\"C\")\n+\n+    cdef uint8_t[::1] bitvector_i\n+    cdef uint32_t len_bitvector_i\n+\n+    for i in range(N):\n+        bitvector_i = bitvectors[i]\n+        len_bitvector_i = len(bitvector_i)\n+        for j in range(i + 1, N):\n+            result[i, j] = find_first_difference(bitvector_i, bitvectors[j], len_bitvector_i, len(bitvectors[j]))\n+\n+    return result\n+\n+cpdef list get_hexvectors(list bitvectors):\n+    cdef list result = []\n+    cdef uint8_t[::1] bitvector\n+    cdef size_t i, j, M, N = len(bitvectors)\n+\n+    cdef np.ndarray[np.uint8_t, mode=\"c\"] hexvector\n+    cdef size_t len_bitvector\n+\n+    for i in range(0, N):\n+        bitvector = bitvectors[i]\n+        len_bitvector = len(bitvector)\n+\n+        M = <size_t>ceil(len_bitvector \/ 4)\n+        hexvector = np.zeros(M, dtype=np.uint8, order=\"C\")\n+\n+        for j in range(0, M):\n+            hexvector[j] = bit_array_to_number(bitvector, min(len_bitvector, 4*j+4), 4*j)\n+\n+        result.append(hexvector)\n+\n+    return result\n+\n+\n+cdef int lower_multiple_of_n(int number, int n) nogil:\n+        return n * <int>floor(number \/ n)\n+\n+cdef int64_t find(uint8_t[:] data, int64_t len_data, uint8_t element, int64_t start=0) nogil:\n+    cdef int64_t i\n+    for i in range(start, len_data):\n+        if data[i] == element:\n+            return i\n+    return -1\n+\n+cpdef tuple get_raw_preamble_position(uint8_t[:] bitvector):\n+    cdef int64_t N = len(bitvector)\n+    if N == 0:\n+        return 0, 0\n+\n+    cdef int64_t i, j, n, m, start = -1\n+    cdef double k = 0\n+\n+    cdef int64_t lower = 0, upper = 0\n+    cdef uint8_t a, b\n+\n+    cdef uint8_t* preamble_pattern = NULL\n+    cdef int64_t len_preamble_pattern, preamble_end\n+\n+    cdef bool preamble_end_reached\n+\n+    while k < 2 and start < N:\n+        start += 1\n+\n+        a = bitvector[start]\n+        b = 1 if a == 0 else 0\n+\n+        # now we search for the pattern a^n b^m\n+        n = find(bitvector, N, b, start) - start\n+\n+        if n <= 0:\n+            return 0, 0, 0\n+\n+        m = find(bitvector, N, a, start+n) - n - start\n+\n+        if m <= 0:\n+            return 0, 0, 0\n+\n+        #preamble_pattern = a * n + b * m\n+        len_preamble_pattern = n + m\n+        preamble_pattern = <uint8_t*> malloc(len_preamble_pattern * sizeof(uint8_t))\n+\n+        for j in range(0, n):\n+            preamble_pattern[j] = a\n+        for j in range(n, len_preamble_pattern):\n+            preamble_pattern[j] = b\n+\n+        preamble_end = start\n+        preamble_end_reached = False\n+        for i in range(start, N, len_preamble_pattern):\n+            if preamble_end_reached:\n+                break\n+            for j in range(0, len_preamble_pattern):\n+                if bitvector[i+j] != preamble_pattern[j]:\n+                    preamble_end_reached = True\n+                    preamble_end = i\n+                    break\n+\n+        free(preamble_pattern)\n+\n+        upper = start + lower_multiple_of_n(preamble_end + 1 - start, len_preamble_pattern)\n+        lower = upper - len_preamble_pattern\n+\n+        k = (upper - start) \/ len_preamble_pattern\n+\n+    if k > 2:\n+        return start, lower, upper\n+    else:\n+        # no preamble found\n+        return 0, 0, 0\n+\n+\n+cpdef dict find_possible_sync_words(np.ndarray[np.uint32_t, ndim=2, mode=\"c\"] difference_matrix,\n+                                    np.ndarray[np.uint32_t, ndim=2, mode=\"c\"] raw_preamble_positions,\n+                                    list bitvectors, int n_gram_length):\n+    cdef dict possible_sync_words = dict()\n+\n+    cdef uint32_t i, j, num_rows = difference_matrix.shape[0], num_cols = difference_matrix.shape[1]\n+    cdef uint32_t sync_len, sync_end, start, index, k, n\n+\n+    cdef bytes sync_word\n+\n+    cdef np.ndarray[np.uint8_t, mode=\"c\"] bitvector\n+\n+    cdef uint8_t ij_ctr = 0\n+    cdef uint32_t* ij_arr = <uint32_t*>malloc(2 * sizeof(uint32_t))\n+    cdef uint8_t* temp = NULL\n+\n+    for i in range(0, num_rows):\n+        for j in range(i + 1, num_cols):\n+            # position of first difference between message i and j\n+            sync_end = difference_matrix[i, j]\n+\n+            if sync_end == 0:\n+                continue\n+\n+            ij_arr[0] = i\n+            ij_arr[1] = j\n+\n+            for k in range(0, 2):\n+                for ij_ctr in range(0, 2):\n+                    index = ij_arr[ij_ctr]\n+                    start = raw_preamble_positions[index, 0] + raw_preamble_positions[index, k + 1]\n+\n+                    # We take the next lower multiple of n for the sync len\n+                    # In doubt, it is better to under estimate the sync len to prevent it from\n+                    # taking needed values from other fields e.g. leading zeros for a length field\n+                    sync_len = max(0, lower_multiple_of_n(sync_end - start, n_gram_length))\n+\n+                    if sync_len >= 2:\n+                        bitvector = bitvectors[index]\n+                        if sync_len == 2:\n+                            # Sync word must not be empty or just two bits long and \"10\" or \"01\" because\n+                            # that would be indistinguishable from the preamble\n+                            if bitvector[start] == 0 and bitvector[start+1] == 1:\n+                                continue\n+                            if bitvector[start] == 1 and bitvector[start+1] == 0:\n+                                continue\n+\n+                        temp = <uint8_t*>malloc(sync_len * sizeof(uint8_t))\n+                        for n in range(0, sync_len):\n+                            temp[n] = bitvector[start+n]\n+                        sync_word = <bytes> temp[:sync_len]\n+                        free(temp)\n+\n+                        possible_sync_words.setdefault(sync_word, 0)\n+                        if (start + sync_len) % n_gram_length == 0:\n+                            # if sync end aligns nicely at n gram length give it a larger score\n+                            possible_sync_words[sync_word] += 1\n+                        else:\n+                            possible_sync_words[sync_word] += 0.5\n+\n+    free(ij_arr)\n+    return possible_sync_words\n+\n+cpdef np.ndarray[np.float64_t] create_difference_histogram(list vectors, list active_indices):\n+    \"\"\"\n+    Return a histogram of common ranges. E.g. [1, 1, 0.75, 0.8] means 75% of values at third column are equal\n+    \n+    :param vectors: Vectors over which differences the histogram will be created\n+    :param active_indices: Active indices of vectors. Vectors with index not in this list will be ignored\n+    :return: \n+    \"\"\"\n+    cdef unsigned long i,j,k,index_i,index_j, L = len(active_indices)\n+    cdef unsigned long longest = 0, len_vector, len_vector_i\n+    for i in active_indices:\n+        len_vector = len(vectors[i])\n+        if len_vector > longest:\n+            longest = len_vector\n+\n+    cdef np.ndarray[np.float64_t] histogram = np.zeros(longest, dtype=np.float64)\n+    cdef double n = (len(active_indices) * (len(active_indices) - 1)) \/\/ 2\n+\n+    cdef np.ndarray[np.uint8_t] bitvector_i, bitvector_j\n+\n+    for i in range(0, L - 1):\n+        index_i = active_indices[i]\n+        bitvector_i = vectors[index_i]\n+        len_vector_i = len(bitvector_i)\n+        for j in range(i+1, L):\n+            index_j = active_indices[j]\n+            bitvector_j = vectors[index_j]\n+            for k in range(0, <size_t>min(len_vector_i, <size_t>len(bitvector_j))):\n+                if bitvector_i[k] == bitvector_j[k]:\n+                    histogram[k] += 1 \/ n\n+    return histogram\n+\n+cpdef list find_occurrences(np.uint8_t[::1] a, np.uint8_t[::1] b,\n+                            unsigned long[:] ignore_indices=None, bool return_after_first=False):\n+    \"\"\"\n+    Find the indices of occurrences of b in a. \n+    \n+    :param a: Larger array\n+    :param b: Subarray to search for\n+    :return: List of start indices of b in a \n+    \"\"\"\n+    cdef unsigned long i, j\n+    cdef unsigned long len_a = len(a), len_b = len(b)\n+\n+    cdef bool ignore_indices_present = ignore_indices is not None\n+\n+    if len_b > len_a:\n+        return []\n+\n+    cdef list result = []\n+    cdef bool found\n+    for i in range(0, (len_a-len_b) + 1):\n+        found = True\n+        for j in range(0, len_b):\n+            if ignore_indices_present:\n+                if i+j in ignore_indices:\n+                    found = False\n+                    break\n+\n+            if a[i+j] != b[j]:\n+                found = False\n+                break\n+        if found:\n+            if return_after_first:\n+                return [i]\n+            else:\n+                result.append(i)\n+\n+    return result\n+\n+cpdef unsigned long long bit_array_to_number(uint8_t[::1] bits, int64_t end, int64_t start=0) nogil:\n+    if end < 1:\n+        return 0\n+\n+    cdef long long i, acc = 1\n+    cdef unsigned long long result = 0\n+\n+    for i in range(start, end):\n+        result += bits[end-1-i+start] * acc\n+        acc *= 2\n+\n+    return result\n+\n+cpdef np.ndarray[np.int32_t, ndim=2, mode=\"c\"] create_seq_number_difference_matrix(list bitvectors, int n_gram_length):\n+    \"\"\"\n+    Create the difference matrix e.g.\n+    10 20 0\n+    1  2  3\n+    4  5  6\n+\n+    means first eight bits of messages 1 and 2 (row 1) differ by 10 if they are considered as decimal number\n+\n+    :type bitvectors: list of np.ndarray\n+    :type n_gram_length: int\n+    :rtype: np.ndarray\n+    \"\"\"\n+    cdef size_t max_len = len(max(bitvectors, key=len))\n+    cdef size_t i, j, k, index, N = len(bitvectors), M = <size_t>ceil(max_len \/ n_gram_length)\n+    cdef uint8_t[::1] bv1, bv2\n+    cdef size_t len_bv1, len_bv2\n+    cdef int32_t diff\n+    cdef int32_t n_gram_power_two = <int32_t>pow(2, n_gram_length)\n+\n+    cdef np.ndarray[np.int32_t, ndim=2, mode=\"c\"] result = np.full((N - 1, M), -1, dtype=np.int32)\n+    for i in range(1, N):\n+        bv1 = bitvectors[i - 1]\n+        bv2 = bitvectors[i]\n+        len_bv1 = len(bv1)\n+        len_bv2 = len(bv2)\n+        k = min(len_bv1, len_bv2)\n+        for j in range(0, k, n_gram_length):\n+            index = j \/ n_gram_length\n+            if index < M:\n+                diff = bit_array_to_number(bv2, min(len_bv2, j + n_gram_length), j) -\\\n+                       bit_array_to_number(bv1, min(len_bv1, j+n_gram_length), j)\n+                # add + n_gram_power_two because in C modulo can be negative\n+                result[i - 1, index] = (diff + n_gram_power_two) % n_gram_power_two\n+\n+    return result\n+\n+cpdef set check_crc_for_messages(list message_indices, list bitvectors,\n+                                 unsigned long data_start, unsigned long data_stop,\n+                                 unsigned long crc_start, unsigned long crc_stop,\n+                                 unsigned char[:] crc_polynomial, unsigned char[:] crc_start_value,\n+                                 unsigned char[:] crc_final_xor,\n+                                 bool crc_lsb_first, bool crc_reverse_polynomial,\n+                                 bool crc_reverse_all, bool crc_little_endian):\n+    \"\"\"\n+    Check a configurable subset of bitvectors for a matching CRC and return the indices of the \n+    vectors who match the CRC with the given parameters\n+    :return: \n+    \"\"\"\n+    cdef set result = set()\n+    cdef unsigned long j, index, end = len(message_indices)\n+    cdef np.ndarray[np.uint8_t] bits\n+    cdef unsigned char[:] crc_input\n+    cdef unsigned long long check\n+\n+    for j in range(0, end):\n+        index = message_indices[j]\n+        bits = bitvectors[index]\n+        crc_input = bits[data_start:data_stop]\n+        #check = int(\"\".join(map(str, bits[crc_start:crc_stop])), 2)\n+        check = bit_array_to_number(bits[crc_start:crc_stop], crc_stop - crc_start)\n+        if crc(crc_input, crc_polynomial, crc_start_value, crc_final_xor,\n+               crc_lsb_first, crc_reverse_polynomial,\n+               crc_reverse_all, crc_little_endian) == check:\n+            result.add(index)\n+\n+    return result\ndiff --git a\/src\/urh\/cythonext\/util.pyx b\/src\/urh\/cythonext\/util.pyx\nindex 7147731..037010f 100644\n--- a\/src\/urh\/cythonext\/util.pyx\n+++ b\/src\/urh\/cythonext\/util.pyx\n@@ -6,9 +6,11 @@\n # because it can lead to OS X error: https:\/\/github.com\/jopohl\/urh\/issues\/273\n # np.import_array()\n \n+from libc.stdint cimport uint8_t, uint16_t, uint32_t, uint64_t\n+from libc.stdlib cimport malloc, calloc, free\n cimport cython\n from cython.parallel import prange\n-from libc.math cimport log10\n+from libc.math cimport log10,pow\n from libcpp cimport bool\n \n cpdef tuple minmax(float[:] arr):\n@@ -29,48 +31,6 @@\n \n     return minimum, maximum\n \n-\n-cpdef np.ndarray[np.int8_t, ndim=3] build_xor_matrix(list bitvectors):\n-    cdef unsigned int maximum = 0\n-    cdef np.int8_t[:] bitvector_i, bitvector_j\n-    cdef int i, j, l\n-    for i in range(0, len(bitvectors)):\n-        bitvector_i = bitvectors[i]\n-        if maximum < len(bitvector_i):\n-            maximum = len(bitvector_i)\n-\n-    cdef np.ndarray[np.int8_t, ndim=3] result = np.full((len(bitvectors), len(bitvectors), maximum), -1, dtype=np.int8, order=\"C\")\n-\n-    for i in range(len(bitvectors)):\n-        bitvector_i = bitvectors[i]\n-        for j in range(i+1, len(bitvectors)):\n-            bitvector_j = bitvectors[j]\n-            l = min(len(bitvector_i), len(bitvector_j))\n-            for k in range(0, l):\n-                result[i,j,k] = bitvector_i[k] ^ bitvector_j[k]\n-\n-    return result\n-\n-\n-cpdef str longest_common_substring(str s1, str s2):\n-    cdef int len_s1 = len(s1)\n-    cdef int len_s2 = len(s2)\n-    cdef np.int_t[:, ::1] m = np.zeros((len_s1+1, len_s2+1), dtype=np.int, order=\"C\")\n-    cdef int longest = 0\n-    cdef int x_longest = 0\n-    cdef int x, y\n-\n-    for x in range(1, 1 + len_s1):\n-        for y in range(1, 1 + len_s2):\n-            if s1[x - 1] == s2[y - 1]:\n-                m[x, y] = m[x - 1, y - 1] + 1\n-                if m[x, y] > longest:\n-                    longest = m[x, y]\n-                    x_longest = x\n-            else:\n-                m[x, y] = 0\n-    return s1[x_longest - longest: x_longest]\n-\n cpdef np.ndarray[np.float32_t, ndim=2] arr2decibel(np.ndarray[np.complex64_t, ndim=2] arr):\n     cdef long long x = arr.shape[0]\n     cdef long long y  = arr.shape[1]\n@@ -83,11 +43,11 @@\n             result[i, j] = factor * log10(arr[i, j].real * arr[i, j].real + arr[i, j].imag * arr[i, j].imag)\n     return result\n \n-cpdef unsigned long long arr_to_number(unsigned char[:] inpt, bool reverse, unsigned int start = 0):\n-    cdef unsigned long long result = 0\n+cpdef uint64_t arr_to_number(uint8_t[:] inpt, bool reverse = False, unsigned int start = 0):\n+    cdef uint64_t result = 0\n     cdef unsigned int i, len_inpt = len(inpt)\n     for i in range(start, len_inpt):\n-        if reverse == False:\n+        if not reverse:\n             if inpt[len_inpt - 1 - i + start]:\n                 result |= (1 << (i-start))\n         else:\n@@ -95,16 +55,16 @@\n                 result |= (1 << (i-start))\n     return result\n \n-cpdef unsigned long long crc(unsigned char[:] inpt, unsigned char[:] polynomial, unsigned char[:] start_value, unsigned char[:] final_xor, bool lsb_first, bool reverse_polynomial, bool reverse_all, bool little_endian):\n+cpdef uint64_t crc(uint8_t[:] inpt, uint8_t[:] polynomial, uint8_t[:] start_value, uint8_t[:] final_xor, bool lsb_first, bool reverse_polynomial, bool reverse_all, bool little_endian):\n     cdef unsigned int len_inpt = len(inpt)\n     cdef unsigned int i, idx, poly_order = len(polynomial)\n-    cdef unsigned long long crc_mask = (2**(poly_order - 1) - 1)\n-    cdef unsigned long long poly_mask = (crc_mask + 1) >> 1\n-    cdef unsigned long long poly_int = arr_to_number(polynomial, reverse_polynomial, 1) & crc_mask\n+    cdef uint64_t crc_mask = <uint64_t> pow(2, poly_order - 1) - 1\n+    cdef uint64_t poly_mask = (crc_mask + 1) >> 1\n+    cdef uint64_t poly_int = arr_to_number(polynomial, reverse_polynomial, 1) & crc_mask\n     cdef unsigned short j, x\n \n     # start value\n-    cdef unsigned long long temp, crc = arr_to_number(start_value, False, 0) & crc_mask\n+    cdef uint64_t temp, crc = arr_to_number(start_value, False, 0) & crc_mask\n \n     for i in range(0, len_inpt+7, 8):\n         for j in range(0, 8):\n@@ -131,54 +91,118 @@\n         temp = 0\n         for i in range(0, poly_order - 1):\n             if crc & (1 << i):\n-                temp |= (1 << (poly_order -2  -i))\n+                temp |= (1 << (poly_order - 2 - i))\n         crc = temp & crc_mask\n \n     # little endian encoding, different for 16, 32, 64 bit\n     if poly_order - 1 == 16 and little_endian:\n         crc = ((crc << 8) & 0xFF00) | (crc >> 8)\n     elif poly_order - 1 == 32 and little_endian:\n-        crc = ((crc << 24) & 0xFF000000) | ((crc << 8) & 0x00FF0000) | ((crc >> 8) & 0x0000FF00) | (crc >> 24)\n+        crc = ((crc << 24) & <uint64_t>0xFF000000) | ((crc << 8) & 0x00FF0000) | ((crc >> 8) & 0x0000FF00) | (crc >> 24)\n     elif poly_order - 1 == 64 and little_endian:\n-        crc =   ((crc << 56) & 0xFF00000000000000) |  (crc >> 56) \\\n-              | ((crc >> 40) & 0x000000000000FF00) | ((crc << 40) & 0x00FF000000000000) \\\n-              | ((crc << 24) & 0x0000FF0000000000) | ((crc >> 24) & 0x0000000000FF0000) \\\n-              | ((crc << 8)  & 0x000000FF00000000) | ((crc >> 8)  & 0x00000000FF000000)\n+        crc =   ((crc << 56) & <uint64_t>0xFF00000000000000) |  (crc >> 56) \\\n+              | ((crc >> 40) & <uint64_t>0x000000000000FF00) | ((crc << 40) & <uint64_t>0x00FF000000000000) \\\n+              | ((crc << 24) & <uint64_t>0x0000FF0000000000) | ((crc >> 24) & <uint64_t>0x0000000000FF0000) \\\n+              | ((crc << 8)  & <uint64_t>0x000000FF00000000) | ((crc >> 8)  & <uint64_t>0x00000000FF000000)\n \n     return crc & crc_mask\n \n-cpdef tuple get_crc_datarange(unsigned char[:] inpt, unsigned char[:] polynomial, unsigned char[:] vrfy_crc, unsigned char[:] start_value, unsigned char[:] final_xor, bool lsb_first, bool reverse_polynomial, bool reverse_all, bool little_endian):\n-    cdef unsigned int len_inpt = len(inpt)\n-    cdef unsigned int i, idx, offset, data_end = 0, poly_order = len(polynomial)\n-    cdef np.ndarray[np.uint64_t, ndim=1] steps = np.empty(len_inpt+2, dtype=np.uint64)\n-    cdef unsigned long long temp\n-    cdef unsigned long long crc_mask = (2**(poly_order - 1) - 1)\n-    cdef unsigned long long poly_mask = (crc_mask + 1) >> 1\n-    cdef unsigned long long poly_int = arr_to_number(polynomial, reverse_polynomial, 1) & crc_mask\n-    cdef unsigned long long final_xor_int = arr_to_number(final_xor, False, 0) & crc_mask\n-    cdef unsigned long long vrfy_crc_int = arr_to_number(vrfy_crc, False, 0) & crc_mask\n-    cdef unsigned long long crcvalue = arr_to_number(start_value, False, 0) & crc_mask\n-    cdef unsigned short j = 0, len_crc = poly_order - 1\n-    cdef bool found\n-\n-    # Find data_end (beginning of crc)\n-    if len_inpt <= len_crc or len_crc != len(vrfy_crc):\n-        return 0, 0\n-    for data_end in range(len_inpt - len_crc, -1, -1):\n-        i = 0\n-        for j in range(0, len_crc):\n-            if vrfy_crc[j] == inpt[data_end+j]:\n-                i += 1\n+cpdef np.ndarray[np.uint64_t, ndim=1] calculate_cache(uint8_t[:] polynomial, bool reverse_polynomial=False, uint8_t bits=8):\n+    cdef uint8_t j, poly_order = len(polynomial)\n+    cdef uint64_t crc_mask = <uint64_t> pow(2, poly_order - 1) - 1\n+    cdef uint64_t poly_mask = (crc_mask + 1) >> 1\n+    cdef uint64_t poly_int = arr_to_number(polynomial, reverse_polynomial, 1) & crc_mask\n+    cdef uint64_t crcv, i\n+    cdef np.ndarray[np.uint64_t, ndim=1] cache = np.zeros(<uint64_t> pow(2, bits), dtype = np.uint64)\n+    # Caching\n+    for i in range(0, <uint32_t> len(cache)):\n+        crcv = i << (poly_order - 1 - bits)\n+        for _ in range(0, bits):\n+            if (crcv & poly_mask) > 0:\n+                crcv = (crcv << 1) & crc_mask\n+                crcv ^= poly_int\n             else:\n-                continue\n-        if i == len_crc:\n-            break\n-    if data_end <= 0:  # Could not find crc position\n+                crcv = (crcv << 1) & crc_mask\n+        cache[i] = crcv\n+    return cache\n+\n+cpdef uint64_t cached_crc(uint64_t[:] cache, uint8_t bits, uint8_t[:] inpt, uint8_t[:] polynomial, uint8_t[:] start_value, uint8_t[:] final_xor, bool lsb_first, bool reverse_polynomial, bool reverse_all, bool little_endian):\n+    cdef unsigned int len_inpt = len(inpt)\n+    cdef unsigned int i, poly_order = len(polynomial)\n+    cdef uint64_t crc_mask = <uint64_t> pow(2, poly_order - 1) - 1\n+    cdef uint64_t poly_mask = (crc_mask + 1) >> 1\n+    cdef uint64_t poly_int = arr_to_number(polynomial, reverse_polynomial, 1) & crc_mask\n+    cdef uint64_t temp, crcv, data, pos\n+    cdef uint8_t j\n+\n+    # For inputs smaller than 8 bits, call normal function\n+    if len_inpt < bits:\n+        return crc(inpt, polynomial, start_value, final_xor, lsb_first, reverse_polynomial, reverse_all, little_endian)\n+\n+    # CRC\n+    crcv = arr_to_number(start_value, False, 0) & crc_mask\n+    for i in range(0, len_inpt - bits + 1, bits):\n+        data = 0\n+        if lsb_first:\n+            for j in range(0, bits):\n+                if inpt[i + j]:\n+                    data |= (1 << j)\n+        else:\n+            for j in range(0, bits):\n+                if inpt[i + bits - 1 - j]:\n+                    data |= (1 << j)\n+        pos = (crcv >> (poly_order - bits - 1)) ^ data\n+        crcv = ((crcv << bits) ^ cache[pos]) & crc_mask\n+\n+    # Are we done?\n+    if len_inpt % bits > 0:\n+        # compute rest of crc inpt[-(len_inpt%8):] with normal function\n+        # Set start_value to current crc value\n+        for i in range(0, len(start_value)):\n+            start_value[len(start_value) - 1 - i] = True if (crcv & (1 << i)) > 0 else False\n+        crcv = crc(inpt[len_inpt-(len_inpt%bits):len_inpt], polynomial, start_value, final_xor, lsb_first, reverse_polynomial, reverse_all, little_endian)\n+    else:\n+        # final XOR\n+        crcv ^= arr_to_number(final_xor, False, 0) & crc_mask\n+\n+        # reverse all bits\n+        if reverse_all:\n+            temp = 0\n+            for i in range(0, poly_order - 1):\n+                if crcv & (1 << i):\n+                    temp |= (1 << (poly_order - 2 - i))\n+            crcv = temp & crc_mask\n+\n+        # little endian encoding, different for 16, 32, 64 bit\n+        if poly_order - 1 == 16 and little_endian:\n+            crcv = ((crcv << 8) & 0xFF00) | (crcv >> 8)\n+        elif poly_order - 1 == 32 and little_endian:\n+            crcv = ((crcv << 24) & <uint64_t>0xFF000000) | ((crcv << 8) & 0x00FF0000) | ((crcv >> 8) & 0x0000FF00) | (crcv >> 24)\n+        elif poly_order - 1 == 64 and little_endian:\n+            crcv =  ((crcv << 56) & <uint64_t>0xFF00000000000000) |  (crcv >> 56) \\\n+                  | ((crcv >> 40) & <uint64_t>0x000000000000FF00) | ((crcv << 40) & <uint64_t>0x00FF000000000000) \\\n+                  | ((crcv << 24) & <uint64_t>0x0000FF0000000000) | ((crcv >> 24) & <uint64_t>0x0000000000FF0000) \\\n+                  | ((crcv << 8)  & <uint64_t>0x000000FF00000000) | ((crcv >> 8)  & <uint64_t>0x00000000FF000000)\n+    return crcv & crc_mask\n+\n+cpdef tuple get_crc_datarange(uint8_t[:] inpt, uint8_t[:] polynomial, uint64_t vrfy_crc_start, uint8_t[:] start_value, uint8_t[:] final_xor, bool lsb_first, bool reverse_polynomial, bool reverse_all, bool little_endian):\n+    cdef uint32_t len_inpt = len(inpt), poly_order = len(polynomial)\n+    cdef uint8_t j = 0, len_crc = poly_order - 1\n+\n+    if vrfy_crc_start-1+len_crc >= len_inpt or vrfy_crc_start < 2:\n         return 0, 0\n \n-    # leads to https:\/\/github.com\/jopohl\/urh\/issues\/463\n-    #step = [1] + [0] * (len_inpt - 1)\n-    step = [0] * len_inpt\n+    cdef uint64_t* steps = <uint64_t*>calloc(len_inpt+2, sizeof(uint64_t))\n+    cdef uint64_t temp\n+    cdef uint64_t crc_mask = <uint64_t> pow(2, poly_order - 1) - 1\n+    cdef uint64_t poly_mask = (crc_mask + 1) >> 1\n+    cdef uint64_t poly_int = arr_to_number(polynomial, reverse_polynomial, 1) & crc_mask\n+    cdef uint64_t final_xor_int = arr_to_number(final_xor, False, 0) & crc_mask\n+    cdef uint64_t vrfy_crc_int = arr_to_number(inpt[vrfy_crc_start:vrfy_crc_start+len_crc], False, 0) & crc_mask\n+    cdef uint64_t crcvalue = arr_to_number(start_value, False, 0) & crc_mask\n+    cdef bool found\n+    cdef uint32_t i, idx, offset, data_end = vrfy_crc_start\n+    cdef uint8_t* step = <uint8_t*>calloc(len_inpt, sizeof(uint8_t))\n     step[0] = 1\n \n     # crcvalue is initialized with start_value\n@@ -201,45 +225,52 @@\n             # Save steps XORed with final_xor\n             steps[idx] = crcvalue ^ final_xor_int\n \n-    # Reverse and little endian\n-    for i in range(0, data_end):\n-        # reverse all bits\n-        if reverse_all:\n-            temp = 0\n-            for j in range(0, poly_order - 1):\n-                if steps[i] & (1 << j):\n-                    temp |= (1 << (poly_order -2  - j))\n-            steps[j] = temp & crc_mask\n+    free(step)\n \n-        # little endian encoding, different for 16, 32, 64 bit\n-        if poly_order - 1 == 16 and little_endian:\n-            steps[i] = ((steps[i] << 8) & 0xFF00) | (steps[i] >> 8)\n-        elif poly_order - 1 == 32 and little_endian:\n-            steps[i] = ((steps[i] << 24) & 0xFF000000) | ((steps[i] << 8) & 0x00FF0000) | ((steps[i] >> 8) & 0x0000FF00) | (steps[i] >> 24)\n-        elif poly_order - 1 == 64 and little_endian:\n-            steps[i] =  ((steps[i] << 56) & 0xFF00000000000000) |  (steps[i] >> 56) \\\n-                      | ((steps[i] >> 40) & 0x000000000000FF00) | ((steps[i] << 40) & 0x00FF000000000000) \\\n-                      | ((steps[i] << 24) & 0x0000FF0000000000) | ((steps[i] >> 24) & 0x0000000000FF0000) \\\n-                      | ((steps[i] << 8)  & 0x000000FF00000000) | ((steps[i] >> 8)  & 0x00000000FF000000)\n+    # Reverse and little endian\n+    if reverse_all or little_endian:\n+        for i in range(0, data_end):\n+            # reverse all bits\n+            if reverse_all:\n+                temp = 0\n+                for j in range(0, poly_order - 1):\n+                    if steps[i] & (1 << j):\n+                        temp |= (1 << (poly_order -2  - j))\n+                steps[j] = temp & crc_mask\n+\n+            # little endian encoding, different for 16, 32, 64 bit\n+            if poly_order - 1 == 16 and little_endian:\n+                steps[i] = ((steps[i] << 8) & <uint64_t> 0xFF00) | (steps[i] >> 8)\n+            elif poly_order - 1 == 32 and little_endian:\n+                steps[i] = ((steps[i] << 24) & <uint64_t> 0xFF000000) | ((steps[i] << 8) & <uint64_t> 0x00FF0000) | ((steps[i] >> 8) &  <uint64_t> 0x0000FF00) | (steps[i] >> 24)\n+            elif poly_order - 1 == 64 and little_endian:\n+                steps[i] =  ((steps[i] << 56) & <uint64_t> 0xFF00000000000000) |  (steps[i] >> 56) \\\n+                          | ((steps[i] >> 40) & <uint64_t> 0x000000000000FF00) | ((steps[i] << 40) & <uint64_t> 0x00FF000000000000) \\\n+                          | ((steps[i] << 24) & <uint64_t> 0x0000FF0000000000) | ((steps[i] >> 24) & <uint64_t> 0x0000000000FF0000) \\\n+                          | ((steps[i] << 8)  & <uint64_t> 0x000000FF00000000) | ((steps[i] >> 8)  & <uint64_t> 0x00000000FF000000)\n \n     # Test data range from 0...start_crc until start_crc-1...start_crc\n     # Compute start value\n     crcvalue = crc(inpt[:data_end], polynomial, start_value, final_xor, lsb_first, reverse_polynomial, reverse_all, little_endian)\n-    if vrfy_crc_int == crcvalue:\n-        return 0, data_end\n-    found = False\n-    i = 0\n-    while i < data_end - 1:\n-        offset = 0\n-        while (inpt[i + offset] == False and i+offset < data_end - 1):  # skip leading 0s in data (doesn't change crc...)\n-            offset += 1\n-        # XOR delta=crc(10000...) to last crc value to create next crc value\n-        crcvalue ^= steps[data_end-i-offset-1]\n-        if found:\n-            return i, data_end  # Return start_data, end_data\n+    try:\n         if vrfy_crc_int == crcvalue:\n-            found = True\n-        i += 1 + offset\n+            return 0, data_end\n+        found = False\n \n-    # No beginning found\n-    return 0, 0\n\\ No newline at end of file\n+        i = 0\n+        while i < data_end - 1:\n+            offset = 0\n+            while inpt[i + offset] == False and i+offset < data_end - 1:  # skip leading 0s in data (doesn't change crc...)\n+                offset += 1\n+            # XOR delta=crc(10000...) to last crc value to create next crc value\n+            crcvalue ^= steps[data_end-i-offset-1]\n+            if found:\n+                return i, data_end  # Return start_data, end_data\n+            if vrfy_crc_int == crcvalue:\n+                found = True\n+            i += 1 + offset\n+\n+        # No beginning found\n+        return 0, 0\n+    finally:\n+        free(steps)\n\\ No newline at end of file\ndiff --git a\/src\/urh\/models\/ParticipantTableModel.py b\/src\/urh\/models\/ParticipantTableModel.py\nindex d403e14..58919b9 100644\n--- a\/src\/urh\/models\/ParticipantTableModel.py\n+++ b\/src\/urh\/models\/ParticipantTableModel.py\n@@ -37,7 +37,7 @@\n         return super().headerData(section, orientation, role)\n \n     def data(self, index: QModelIndex, role=Qt.DisplayRole):\n-        if role == Qt.DisplayRole:\n+        if role == Qt.DisplayRole or role == Qt.EditRole:\n             i = index.row()\n             j = index.column()\n             part = self.participants[i]\ndiff --git a\/src\/urh\/signalprocessing\/FieldType.py b\/src\/urh\/signalprocessing\/FieldType.py\nindex 4132583..dfce28b 100644\n--- a\/src\/urh\/signalprocessing\/FieldType.py\n+++ b\/src\/urh\/signalprocessing\/FieldType.py\n@@ -16,10 +16,12 @@\n         SRC_ADDRESS = \"source address\"\n         DST_ADDRESS = \"destination address\"\n         SEQUENCE_NUMBER = \"sequence number\"\n+        TYPE = \"type\"\n+        DATA = \"data\"\n         CHECKSUM = \"checksum\"\n         CUSTOM = \"custom\"\n \n-    def __init__(self, caption: str, function: Function, display_format_index:int = None):\n+    def __init__(self, caption: str, function: Function, display_format_index: int = None):\n         self.caption = caption\n         self.function = function\n \n@@ -42,6 +44,14 @@\n         return \"FieldType: {0} - {1} ({2})\".format(self.function.name, self.caption, self.display_format_index)\n \n     @staticmethod\n+    def from_caption(caption: str):\n+        try:\n+            ft_function = FieldType.Function(caption)\n+        except ValueError:\n+            return None\n+        return FieldType(caption, ft_function)\n+\n+    @staticmethod\n     def default_field_types():\n         \"\"\"\n \ndiff --git a\/src\/urh\/signalprocessing\/Message.py b\/src\/urh\/signalprocessing\/Message.py\nindex e22f36e..bf84d6f 100644\n--- a\/src\/urh\/signalprocessing\/Message.py\n+++ b\/src\/urh\/signalprocessing\/Message.py\n@@ -466,6 +466,12 @@\n         plain_bits = list(map(int, bits))\n         return Message(plain_bits=plain_bits, pause=pause, message_type=MessageType(\"none\"))\n \n+    @staticmethod\n+    def from_plain_hex_str(hex_str, pause=0):\n+        lut = {\"{0:x}\".format(i): \"{0:04b}\".format(i) for i in range(16)}\n+        bits = \"\".join((lut[h] for h in hex_str))\n+        return Message.from_plain_bits_str(bits, pause)\n+\n     def to_xml(self, decoders=None, include_message_type=False, write_bits=False) -> ET.Element:\n         root = ET.Element(\"message\")\n         root.set(\"message_type_id\", self.message_type.id)\ndiff --git a\/src\/urh\/signalprocessing\/MessageType.py b\/src\/urh\/signalprocessing\/MessageType.py\nindex 78c0bbe..f7a93b4 100644\n--- a\/src\/urh\/signalprocessing\/MessageType.py\n+++ b\/src\/urh\/signalprocessing\/MessageType.py\n@@ -67,6 +67,26 @@\n         \"\"\"\n         return self.__get_unlabeled_ranges_from_labels(self)\n \n+    def __create_label(self, name: str, start: int, end: int, color_index: int, auto_created: bool,\n+                       field_type: FieldType):\n+        if field_type is not None:\n+            if field_type.function == FieldType.Function.CHECKSUM:\n+                # If we have sync or preamble labels start behind last one:\n+                pre_sync_label_ends = [lbl.end for lbl in self if lbl.is_preamble or lbl.is_sync]\n+                if len(pre_sync_label_ends) > 0:\n+                    range_start = max(pre_sync_label_ends)\n+                else:\n+                    range_start = 0\n+\n+                if range_start >= start:\n+                    range_start = 0\n+\n+                return ChecksumLabel(name=name, start=start, end=end, color_index=color_index, field_type=field_type,\n+                                     auto_created=auto_created, data_range_start=range_start)\n+\n+        return ProtocolLabel(name=name, start=start, end=end, color_index=color_index, field_type=field_type,\n+                             auto_created=auto_created)\n+\n     @staticmethod\n     def __get_unlabeled_ranges_from_labels(labels):\n         \"\"\"\n@@ -93,9 +113,18 @@\n         labels.sort()\n         return self.__get_unlabeled_ranges_from_labels(labels)\n \n+    def get_first_label_with_type(self, field_type: FieldType.Function) -> ProtocolLabel:\n+        return next((lbl for lbl in self if lbl.field_type and lbl.field_type.function == field_type), None)\n+\n+    def num_labels_with_type(self, field_type: FieldType.Function) -> int:\n+        return len([lbl for lbl in self if lbl.field_type and lbl.field_type.function == field_type])\n+\n     def append(self, lbl: ProtocolLabel):\n         super().append(lbl)\n         self.sort()\n+\n+    def give_new_id(self):\n+        self.__id = str(uuid.uuid4())\n \n     def add_protocol_label(self, start: int, end: int, name=None, color_ind=None,\n                            auto_created=False, type: FieldType = None) -> ProtocolLabel:\n@@ -119,6 +148,10 @@\n \n         return proto_label  # Return label to set editor focus after adding\n \n+    def add_protocol_label_start_length(self, start: int, length: int, name=None, color_ind=None,\n+                                        auto_created=False, type: FieldType = None) -> ProtocolLabel:\n+        return self.add_protocol_label(start, start + length - 1, name, color_ind, auto_created, type)\n+\n     def add_label(self, lbl: ProtocolLabel, allow_overlapping=True):\n         if allow_overlapping or not any(lbl.overlaps_with(l) for l in self):\n             added = self.add_protocol_label(lbl.start, lbl.end - 1, name=lbl.name, color_ind=lbl.color_index)\n@@ -130,20 +163,6 @@\n             super().remove(lbl)\n         else:\n             logger.warning(lbl.name + \" is not in set, so cant be removed\")\n-\n-    def to_xml(self) -> ET.Element:\n-        result = ET.Element(\"message_type\", attrib={\"name\": self.name, \"id\": self.id,\n-                                                    \"assigned_by_ruleset\": \"1\" if self.assigned_by_ruleset else \"0\",\n-                                                    \"assigned_by_logic_analyzer\": \"1\" if self.assigned_by_logic_analyzer else \"0\"})\n-        for lbl in self:\n-            try:\n-                result.append(lbl.to_xml())\n-            except TypeError:\n-                logger.error(\"Could not save label: \" + str(lbl))\n-\n-        result.append(self.ruleset.to_xml())\n-\n-        return result\n \n     def change_field_type_of_label(self, label: ProtocolLabel, field_type: FieldType):\n         if not isinstance(label, ProtocolLabel) and hasattr(label, \"field_type\"):\n@@ -158,25 +177,19 @@\n         else:\n             label.field_type = field_type\n \n-    def __create_label(self, name: str, start: int, end: int, color_index: int, auto_created: bool,\n-                       field_type: FieldType):\n-        if field_type is not None:\n-            if field_type.function == FieldType.Function.CHECKSUM:\n-                # If we have sync or preamble labels start behind last one:\n-                pre_sync_label_ends = [lbl.end for lbl in self if lbl.is_preamble or lbl.is_sync]\n-                if len(pre_sync_label_ends) > 0:\n-                    range_start = max(pre_sync_label_ends)\n-                else:\n-                    range_start = 0\n+    def to_xml(self) -> ET.Element:\n+        result = ET.Element(\"message_type\", attrib={\"name\": self.name, \"id\": self.id,\n+                                                    \"assigned_by_ruleset\": \"1\" if self.assigned_by_ruleset else \"0\",\n+                                                    \"assigned_by_logic_analyzer\": \"1\" if self.assigned_by_logic_analyzer else \"0\"})\n+        for lbl in self:\n+            try:\n+                result.append(lbl.to_xml())\n+            except TypeError:\n+                logger.error(\"Could not save label: \" + str(lbl))\n \n-                if range_start >= start:\n-                    range_start = 0\n+        result.append(self.ruleset.to_xml())\n \n-                return ChecksumLabel(name=name, start=start, end=end, color_index=color_index, field_type=field_type,\n-                                     auto_created=auto_created, data_range_start=range_start)\n-\n-        return ProtocolLabel(name=name, start=start, end=end, color_index=color_index, field_type=field_type,\n-                             auto_created=auto_created)\n+        return result\n \n     @staticmethod\n     def from_xml(tag: ET.Element):\ndiff --git a\/src\/urh\/signalprocessing\/ProtocoLabel.py b\/src\/urh\/signalprocessing\/ProtocoLabel.py\nindex a4520f3..ab42e42 100644\n--- a\/src\/urh\/signalprocessing\/ProtocoLabel.py\n+++ b\/src\/urh\/signalprocessing\/ProtocoLabel.py\n@@ -1,6 +1,6 @@\n+import copy\n import xml.etree.ElementTree as ET\n \n-import copy\n from PyQt5.QtCore import Qt\n \n from urh.signalprocessing.FieldType import FieldType\n@@ -40,7 +40,10 @@\n \n         self.fuzz_created = fuzz_created\n \n-        self.__field_type = field_type  # type: FieldType\n+        if field_type is None:\n+            self.__field_type = FieldType.from_caption(name)\n+        else:\n+            self.__field_type = field_type  # type: FieldType\n \n         self.display_format_index = 0 if field_type is None else field_type.display_format_index\n         self.display_bit_order_index = 0\n@@ -69,6 +72,10 @@\n         return self.field_type is not None and self.field_type.function == FieldType.Function.SYNC\n \n     @property\n+    def length(self) -> int:\n+        return self.end - self.start\n+\n+    @property\n     def field_type(self) -> FieldType:\n         return self.__field_type\n \n@@ -79,6 +86,13 @@\n             # set viewtype for type\n             if hasattr(value, \"display_format_index\"):\n                 self.display_format_index = value.display_format_index\n+\n+    @property\n+    def field_type_function(self):\n+        if self.field_type is not None:\n+            return self.field_type.function\n+        else:\n+            return None\n \n     @property\n     def name(self):\n@@ -149,10 +163,13 @@\n             return False\n \n     def __eq__(self, other):\n-        return self.start == other.start and self.end == other.end and self.name == other.name and self.field_type == other.field_type\n+        return self.start == other.start and \\\n+               self.end == other.end and \\\n+               self.name == other.name and \\\n+               self.field_type_function == other.field_type_function\n \n     def __hash__(self):\n-        return hash(\"{}\/{}\/{}\".format(self.start, self.end, self.name))\n+        return hash((self.start, self.end, self.name, self.field_type_function))\n \n     def __repr__(self):\n         return \"Protocol Label - start: {0} end: {1} name: {2}\".format(self.start, self.end, self.name)\ndiff --git a\/src\/urh\/signalprocessing\/ProtocolAnalyzer.py b\/src\/urh\/signalprocessing\/ProtocolAnalyzer.py\nindex 2a2010b..17a2a69 100644\n--- a\/src\/urh\/signalprocessing\/ProtocolAnalyzer.py\n+++ b\/src\/urh\/signalprocessing\/ProtocolAnalyzer.py\n@@ -1,6 +1,5 @@\n import array\n import copy\n-import sys\n import xml.etree.ElementTree as ET\n from xml.dom import minidom\n \n@@ -8,14 +7,14 @@\n from PyQt5.QtCore import QObject, pyqtSignal, Qt\n \n from urh import constants\n-from urh.awre.FormatFinder import FormatFinder\n-from urh.cythonext import signal_functions, util\n+from urh.cythonext import signal_functions\n from urh.signalprocessing.Encoding import Encoding\n from urh.signalprocessing.FieldType import FieldType\n from urh.signalprocessing.Message import Message\n from urh.signalprocessing.MessageType import MessageType\n from urh.signalprocessing.Modulator import Modulator\n from urh.signalprocessing.Participant import Participant\n+from urh.signalprocessing.ProtocoLabel import ProtocolLabel\n from urh.signalprocessing.Signal import Signal\n from urh.util import util as urh_util\n from urh.util.Logger import logger\n@@ -121,6 +120,10 @@\n         return [msg.plain_ascii_str for msg in self.messages]\n \n     @property\n+    def decoded_bits(self):\n+        return [msg.decoded_bits for msg in self.messages]\n+\n+    @property\n     def decoded_proto_bits_str(self):\n         \"\"\"\n \n@@ -223,7 +226,7 @@\n         bit_len = signal.bit_len\n \n         ppseq = signal_functions.grab_pulse_lens(signal.qad, signal.qad_center, signal.tolerance,\n-                                                signal.modulation_type, signal.bit_len)\n+                                                 signal.modulation_type, signal.bit_len)\n \n         bit_data, pauses, bit_sample_pos = self._ppseq_to_bits(ppseq, bit_len, pause_threshold=signal.pause_threshold)\n         if signal.message_length_divisor > 1 and signal.modulation_type_str == \"ASK\":\n@@ -658,89 +661,15 @@\n                     message.message_type = message_type\n                     break\n \n-    def auto_assign_participants(self, participants):\n-        \"\"\"\n-\n-        :type participants: list of Participant\n-        :return:\n-        \"\"\"\n-        if len(participants) == 0:\n-            return\n-\n-        if len(participants) == 1:\n-            for message in self.messages:\n-                message.participant = participants[0]\n-            return\n-\n-        # Try to assign participants based on SRC_ADDRESS label and participant address\n-        for msg in filter(lambda m: m.participant is None, self.messages):\n-            src_address = msg.get_src_address_from_data()\n-            if src_address:\n-                try:\n-                    msg.participant = next(p for p in participants if p.address_hex == src_address)\n-                except StopIteration:\n-                    pass\n-\n-        # Assign remaining participants based on RSSI of messages\n-        rssis = np.array([msg.rssi for msg in self.messages], dtype=np.float32)\n-        min_rssi, max_rssi = util.minmax(rssis)\n-        center_spacing = (max_rssi - min_rssi) \/ (len(participants) - 1)\n-        centers = [min_rssi + i * center_spacing for i in range(0, len(participants))]\n-        rssi_assigned_centers = []\n-\n-        for rssi in rssis:\n-            center_index = np.argmin(np.abs(rssi - centers))\n-            rssi_assigned_centers.append(int(center_index))\n-\n-        participants.sort(key=lambda participant: participant.relative_rssi)\n-        for message, center_index in zip(self.messages, rssi_assigned_centers):\n-            if message.participant is None:\n-                message.participant = participants[center_index]\n-\n-    def auto_assign_participant_addresses(self, participants):\n-        \"\"\"\n-\n-        :type participants: list of Participant\n-        :return:\n-        \"\"\"\n-        participants_without_address = [p for p in participants if not p.address_hex]\n-\n-        if len(participants_without_address) == 0:\n-            return\n-\n-        for msg in self.messages:\n-            if msg.participant in participants_without_address:\n-                src_address = msg.get_src_address_from_data()\n-                if src_address:\n-                    participants_without_address.remove(msg.participant)\n-                    msg.participant.address_hex = src_address\n-\n-    def auto_assign_decodings(self, decodings):\n-        \"\"\"\n-        :type decodings: list of Encoding\n-        \"\"\"\n-        nrz_decodings = [decoding for decoding in decodings if decoding.is_nrz or decoding.is_nrzi]\n-        fallback = nrz_decodings[0] if nrz_decodings else None\n-        candidate_decodings = [decoding for decoding in decodings\n-                               if decoding not in nrz_decodings and not decoding.contains_cut]\n-\n-        for message in self.messages:\n-            decoder_found = False\n-\n-            for decoder in candidate_decodings:\n-                if decoder.applies_for_message(message.plain_bits):\n-                    message.decoder = decoder\n-                    decoder_found = True\n-                    break\n-\n-            if not decoder_found and fallback:\n-                message.decoder = fallback\n-\n     def auto_assign_labels(self):\n-        format_finder = FormatFinder(self)\n+        from urh.awre.FormatFinder import FormatFinder\n+        format_finder = FormatFinder(self.messages)\n+        format_finder.run(max_iterations=10)\n \n-        # OPEN: Perform multiple iterations with varying priorities later\n-        format_finder.perform_iteration()\n+        self.message_types[:] = format_finder.message_types\n+        for msg_type, indices in format_finder.existing_message_types.items():\n+            for i in indices:\n+                self.messages[i].message_type = msg_type\n \n     @staticmethod\n     def get_protocol_from_string(message_strings: list, is_hex=None, default_pause=0, sample_rate=1e6):\ndiff --git a\/src\/urh\/util\/GenericCRC.py b\/src\/urh\/util\/GenericCRC.py\nindex cc0aa5b..b39621b 100755\n--- a\/src\/urh\/util\/GenericCRC.py\n+++ b\/src\/urh\/util\/GenericCRC.py\n@@ -3,8 +3,8 @@\n from collections import OrderedDict\n from xml.etree import ElementTree as ET\n \n-from urh.util import util\n from urh.cythonext import util as c_util\n+from urh.util import util\n \n \n class GenericCRC(object):\n@@ -25,10 +25,38 @@\n         # x^16+x^13+x^12+x^11+x^10+x^8+x^6+x^5+x^2+x^0\n         (\"16_dnp\", array.array(\"B\", [1,\n                                      0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1])),\n+\n+        # x^8 + x^2 + x + 1\n+        (\"8_ccitt\", array.array(\"B\", [1,\n+                                      0, 0, 0, 0, 0, 1, 1, 1]))\n+    ])\n+\n+    STANDARD_CHECKSUMS = OrderedDict([\n+        # see method guess_standard_parameters_and_datarange for default parameters\n+        # Links:\n+        #  - https:\/\/en.wikipedia.org\/wiki\/Cyclic_redundancy_check\n+        #  - http:\/\/reveng.sourceforge.net\/crc-catalogue\/1-15.htm\n+        #  - https:\/\/crccalc.com\/\n+        (\"CRC8 (default)\", dict(polynomial=\"0xD5\")),\n+        (\"CRC8 CCITT\", dict(polynomial=\"0x07\")),\n+        (\"CRC8 Bluetooth\", dict(polynomial=\"0xA7\", ref_in=True, ref_out=True)),\n+        (\"CRC8 DARC\", dict(polynomial=\"0x39\", ref_in=True, ref_out=True)),\n+        (\"CRC8 NRSC-5\", dict(polynomial=\"0x31\", start_value=1)),\n+        (\"CRC16 (default)\", dict(polynomial=\"0x8005\", ref_in=True, ref_out=True)),\n+        (\"CRC16 CCITT\", dict(polynomial=\"0x1021\", ref_in=True, ref_out=True)),\n+        (\"CRC16 NRSC-5\", dict(polynomial=\"0x080B\", start_value=1, ref_in=True, ref_out=True)),\n+        (\"CRC16 CC1101\", dict(polynomial=\"0x8005\", start_value=1)),\n+        (\"CRC16 CDMA2000\", dict(polynomial=\"0xC867\", start_value=1)),\n+        (\"CRC32 (default)\", dict(polynomial=\"0x04C11DB7\", start_value=1, final_xor=1, ref_in=True, ref_out=True)),\n     ])\n \n     def __init__(self, polynomial=\"16_standard\", start_value=False, final_xor=False, reverse_polynomial=False,\n                  reverse_all=False, little_endian=False, lsb_first=False):\n+        if isinstance(polynomial, str):\n+            self.caption = polynomial\n+        else:\n+            self.caption = \"\"\n+\n         self.polynomial = self.choose_polynomial(polynomial)\n         self.reverse_polynomial = reverse_polynomial\n         self.reverse_all = reverse_all\n@@ -37,6 +65,8 @@\n \n         self.start_value = self.__read_parameter(start_value)\n         self.final_xor = self.__read_parameter(final_xor)\n+        self.cache = []\n+        self.__cache_bits = 8\n \n     def __read_parameter(self, value):\n         if isinstance(value, bool) or isinstance(value, int):\n@@ -52,7 +82,12 @@\n             return False\n \n         return all(getattr(self, attrib) == getattr(other, attrib) for attrib in (\n-        \"polynomial\", \"reverse_polynomial\", \"reverse_all\", \"little_endian\", \"lsb_first\", \"start_value\", \"final_xor\"))\n+            \"polynomial\", \"reverse_polynomial\", \"reverse_all\", \"little_endian\", \"lsb_first\", \"start_value\",\n+            \"final_xor\"))\n+\n+    def __hash__(self):\n+        return hash((self.polynomial.tobytes(), self.reverse_polynomial, self.reverse_all, self.little_endian,\n+                     self.lsb_first, self.start_value.tobytes(), self.final_xor.tobytes()))\n \n     @property\n     def poly_order(self):\n@@ -83,7 +118,11 @@\n         return result\n \n     def set_polynomial_from_hex(self, hex_str: str):\n+        old = self.polynomial\n         self.polynomial = array.array(\"B\", [1]) + util.hex2bit(hex_str)\n+        if self.polynomial != old:\n+            self.cache = []\n+            self.__cache_bits = 8\n \n     def choose_polynomial(self, polynomial):\n         if isinstance(polynomial, str):\n@@ -93,6 +132,10 @@\n         else:\n             return polynomial\n \n+    def get_parameters(self):\n+        return self.polynomial, self.start_value, self.final_xor, \\\n+               self.lsb_first, self.reverse_polynomial, self.reverse_all, self.little_endian\n+\n     def crc(self, inpt):\n         result = c_util.crc(array.array(\"B\", inpt),\n                             array.array(\"B\", self.polynomial),\n@@ -101,21 +144,41 @@\n                             self.lsb_first, self.reverse_polynomial, self.reverse_all, self.little_endian)\n         return util.number_to_bits(result, self.poly_order - 1)\n \n-    def get_crc_datarange(self, inpt, vrfy_crc):\n+    def cached_crc(self, inpt, bits=8):\n+        if len(self.cache) == 0:\n+            self.calculate_cache(bits)\n+        result = c_util.cached_crc(self.cache,\n+                                   self.__cache_bits,\n+                                   array.array(\"B\", inpt),\n+                                   array.array(\"B\", self.polynomial),\n+                                   array.array(\"B\", self.start_value),\n+                                   array.array(\"B\", self.final_xor),\n+                                   self.lsb_first, self.reverse_polynomial, self.reverse_all, self.little_endian)\n+        return util.number_to_bits(result, self.poly_order - 1)\n+\n+    def calculate_cache(self, bits=8):\n+        if 0 < bits < self.poly_order:\n+            self.__cache_bits = bits\n+        else:\n+            self.__cache_bits = 8 if self.poly_order > 8 else self.poly_order - 1\n+        self.cache = c_util.calculate_cache(array.array(\"B\", self.polynomial), self.reverse_polynomial,\n+                                            self.__cache_bits)\n+\n+    def get_crc_datarange(self, inpt, vrfy_crc_start):\n         return c_util.get_crc_datarange(array.array(\"B\", inpt),\n-                            array.array(\"B\", self.polynomial),\n-                            array.array(\"B\", vrfy_crc),\n-                            array.array(\"B\", self.start_value),\n-                            array.array(\"B\", self.final_xor),\n-                            self.lsb_first, self.reverse_polynomial, self.reverse_all, self.little_endian)\n+                                        array.array(\"B\", self.polynomial),\n+                                        vrfy_crc_start,\n+                                        array.array(\"B\", self.start_value),\n+                                        array.array(\"B\", self.final_xor),\n+                                        self.lsb_first, self.reverse_polynomial, self.reverse_all, self.little_endian)\n \n     def reference_crc(self, inpt):\n         len_inpt = len(inpt)\n         if len(self.start_value) < self.poly_order - 1:\n             return False\n-        crc = copy.copy(self.start_value[0:(self.poly_order-1)])\n+        crc = copy.copy(self.start_value[0:(self.poly_order - 1)])\n \n-        for i in range(0, len_inpt+7, 8):\n+        for i in range(0, len_inpt + 7, 8):\n             for j in range(0, 8):\n \n                 if self.lsb_first:\n@@ -156,7 +219,7 @@\n         elif self.poly_order - 1 == 64 and self.little_endian:\n             for pos1, pos2 in [(0, 7), (1, 6), (2, 5), (3, 4)]:\n                 self.__swap_bytes(crc, pos1, pos2)\n-        #return crc\n+        # return crc\n         return array.array(\"B\", crc)\n \n     def calculate(self, bits: array.array):\n@@ -167,11 +230,62 @@\n         array[pos1 * 8:pos1 * 8 + 8], array[pos2 * 8:pos2 * 8 + 8] = \\\n             array[pos2 * 8: pos2 * 8 + 8], array[pos1 * 8:pos1 * 8 + 8]\n \n+    @staticmethod\n+    def from_standard_checksum(name: str):\n+        result = GenericCRC()\n+        result.set_individual_parameters(**GenericCRC.STANDARD_CHECKSUMS[name])\n+        result.caption = name\n+        return result\n+\n+    def set_individual_parameters(self, polynomial, start_value=0, final_xor=0, ref_in=False, ref_out=False,\n+                                  little_endian=False, reverse_polynomial=False):\n+        # Set polynomial from hex or bit array\n+        old = self.polynomial\n+        if isinstance(polynomial, str):\n+            self.set_polynomial_from_hex(polynomial)\n+        else:\n+            self.polynomial = polynomial\n+        # Clear cache if polynomial changes\n+        if self.polynomial != old:\n+            self.cache = []\n+            self.__cache_bits = 8\n+\n+        # Set start value completely or 0000\/FFFF\n+        if isinstance(start_value, int):\n+            self.start_value = array.array(\"B\", [start_value] * (self.poly_order - 1))\n+        elif isinstance(start_value, array.array) and len(start_value) == self.poly_order - 1:\n+            self.start_value = start_value\n+        else:\n+            raise ValueError(\"Invalid start value length\")\n+\n+        # Set final xor completely or 0000\/FFFF\n+        if isinstance(final_xor, int):\n+            self.final_xor = array.array(\"B\", [final_xor] * (self.poly_order - 1))\n+        elif isinstance(final_xor, array.array) and len(final_xor) == self.poly_order - 1:\n+            self.final_xor = final_xor\n+        else:\n+            raise ValueError(\"Invalid final xor length\")\n+\n+        # Set boolean parameters\n+        old_reverse = self.reverse_polynomial\n+        self.reverse_polynomial = reverse_polynomial\n+        if self.reverse_polynomial != old_reverse:\n+            self.cache = []\n+            self.__cache_bits = 8\n+\n+        self.reverse_all = ref_out\n+        self.little_endian = little_endian\n+        self.lsb_first = ref_in\n+\n     def set_crc_parameters(self, i):\n         # Bit 0,1 = Polynomial\n         val = (i >> 0) & 3\n+        old = self.polynomial\n         self.polynomial = self.choose_polynomial(val)\n         poly_order = len(self.polynomial)\n+        if (self.polynomial != old):\n+            self.cache = []\n+            self.__cache_bits = 8\n \n         # Bit 2 = Start Value\n         val = (i >> 2) & 1\n@@ -183,10 +297,14 @@\n \n         # Bit 4 = Reverse Polynomial\n         val = (i >> 4) & 1\n+        old_reverse = self.reverse_polynomial\n         if val == 0:\n             self.reverse_polynomial = False\n         else:\n             self.reverse_polynomial = True\n+        if (self.reverse_polynomial != old_reverse):\n+            self.cache = []\n+            self.__cache_bits = 8\n \n         # Bit 5 = Reverse (all) Result\n         val = (i >> 5) & 1\n@@ -209,22 +327,104 @@\n         else:\n             self.lsb_first = True\n \n+    @classmethod\n+    def __initialize_standard_checksums(cls):\n+        for name in cls.STANDARD_CHECKSUMS:\n+            polynomial = cls.STANDARD_CHECKSUMS[name][\"polynomial\"]\n+            if isinstance(polynomial, str):\n+                polynomial = array.array(\"B\", [1]) + util.hex2bit(polynomial)\n+                cls.STANDARD_CHECKSUMS[name][\"polynomial\"] = polynomial\n+\n+            n = len(polynomial) - 1\n+            try:\n+                start_val = cls.STANDARD_CHECKSUMS[name][\"start_value\"]\n+            except KeyError:\n+                start_val = 0\n+\n+            if isinstance(start_val, int):\n+                cls.STANDARD_CHECKSUMS[name][\"start_value\"] = array.array(\"B\", [start_val] * n)\n+\n+            try:\n+                final_xor = cls.STANDARD_CHECKSUMS[name][\"final_xor\"]\n+            except KeyError:\n+                final_xor = 0\n+\n+            if isinstance(final_xor, int):\n+                cls.STANDARD_CHECKSUMS[name][\"final_xor\"] = array.array(\"B\", [final_xor] * n)\n+\n+    def guess_all(self, bits, trash_max=7, ignore_positions: set = None):\n+        \"\"\"\n+\n+        :param bits:\n+        :param trash_max:\n+        :param ignore_positions: columns to ignore (e.g. if already another label on them)\n+        :return: a CRC object, data_range_start, data_range_end, crc_start, crc_end\n+        \"\"\"\n+        self.__initialize_standard_checksums()\n+\n+        ignore_positions = set() if ignore_positions is None else ignore_positions\n+        for i in range(0, trash_max):\n+            ret = self.guess_standard_parameters_and_datarange(bits, i)\n+            if ret == (0, 0, 0):\n+                continue  # nothing found\n+\n+            crc_start, crc_end = len(bits) - i - ret[0].poly_order + 1, len(bits) - i\n+            if not any(i in ignore_positions for i in range(crc_start, crc_end)):\n+                return ret[0], ret[1], ret[2], crc_start, crc_end\n+        return 0, 0, 0, 0, 0\n+\n+    def bruteforce_all(self, inpt, trash_max=7):\n+        polynomial_sizes = [16, 8]\n+        len_input = len(inpt)\n+        for s in polynomial_sizes:\n+            for i in range(len_input - s - trash_max, len_input - s):\n+                ret = self.bruteforce_parameters_and_data_range(inpt, i)\n+                if ret != (0, 0, 0):\n+                    return ret[0], ret[1], ret[2], i, i + s\n+        return 0, 0, 0, 0, 0\n+\n     def guess_standard_parameters(self, inpt, vrfy_crc):\n         # Tests all standard parameters and return parameter_value (else False), if a valid CRC could be computed.\n         # Note: vfry_crc is included inpt!\n         for i in range(0, 2 ** 8):\n             self.set_crc_parameters(i)\n-            if self.crc(inpt) == vrfy_crc:\n+            if len(vrfy_crc) == self.poly_order and self.crc(inpt) == vrfy_crc:\n                 return i\n         return False\n \n-    def guess_standard_parameters_and_datarange(self, inpt, vrfy_crc):\n+    def guess_standard_parameters_and_datarange(self, inpt, trash):\n+        \"\"\"\n+        Tests standard parameters from dict and return polynomial object, if a valid CRC could be computed\n+        and determines start and end of crc datarange (end is set before crc)\n+        Note: vfry_crc is included inpt!\n+        \"\"\"\n+        # Test longer polynomials first, because smaller polynomials have higher risk of false positive\n+        for name, parameters in sorted(self.STANDARD_CHECKSUMS.items(),\n+                                       key=lambda x: len(x[1][\"polynomial\"]),\n+                                       reverse=True):\n+            self.caption = name\n+            data_begin, data_end = c_util.get_crc_datarange(inpt,\n+                                                            parameters[\"polynomial\"],\n+                                                            max(0,\n+                                                                len(inpt) - trash - len(parameters[\"polynomial\"])) + 1,\n+                                                            parameters[\"start_value\"],\n+                                                            parameters[\"final_xor\"],\n+                                                            parameters.get(\"ref_in\", False),\n+                                                            parameters.get(\"reverse_polynomial\", False),\n+                                                            parameters.get(\"ref_out\", False),\n+                                                            parameters.get(\"little_endian\", False))\n+            if (data_begin, data_end) != (0, 0):\n+                self.set_individual_parameters(**parameters)\n+                return self, data_begin, data_end\n+        return 0, 0, 0\n+\n+    def bruteforce_parameters_and_data_range(self, inpt, vrfy_crc_start):\n         # Tests all standard parameters and return parameter_value (else False), if a valid CRC could be computed\n         # and determines start and end of crc datarange (end is set before crc)\n         # Note: vfry_crc is included inpt!\n         for i in range(0, 2 ** 8):\n             self.set_crc_parameters(i)\n-            data_begin, data_end = self.get_crc_datarange(inpt, vrfy_crc)\n+            data_begin, data_end = self.get_crc_datarange(inpt, vrfy_crc_start)\n             if (data_begin, data_end) != (0, 0):\n                 return i, data_begin, data_end\n         return 0, 0, 0\n@@ -273,6 +473,8 @@\n         root.set(\"polynomial\", util.convert_bits_to_string(self.polynomial, 0))\n         root.set(\"start_value\", util.convert_bits_to_string(self.start_value, 0))\n         root.set(\"final_xor\", util.convert_bits_to_string(self.final_xor, 0))\n+        root.set(\"ref_in\", str(int(self.lsb_first)))\n+        root.set(\"ref_out\", str(int(self.reverse_all)))\n         return root\n \n     @classmethod\n@@ -280,8 +482,11 @@\n         polynomial = tag.get(\"polynomial\", \"1010\")\n         start_value = tag.get(\"start_value\", \"0000\")\n         final_xor = tag.get(\"final_xor\", \"0000\")\n+        ref_in = bool(int(tag.get(\"ref_in\", \"0\")))\n+        ref_out = bool(int(tag.get(\"ref_out\", \"0\")))\n         return GenericCRC(polynomial=util.string2bits(polynomial),\n-                          start_value=util.string2bits(start_value), final_xor=util.string2bits(final_xor))\n+                          start_value=util.string2bits(start_value), final_xor=util.string2bits(final_xor),\n+                          lsb_first=ref_in, reverse_all=ref_out)\n \n     @staticmethod\n     def bit2str(inpt):\n@@ -292,6 +497,10 @@\n         return [True if x == \"1\" else False for x in inpt]\n \n     @staticmethod\n+    def int2bit(inpt):\n+        return [True if x == \"1\" else False for x in '{0:08b}'.format(inpt)]\n+\n+    @staticmethod\n     def str2arr(inpt):\n         return array.array(\"B\", GenericCRC.str2bit(inpt))\n \ndiff --git a\/src\/urh\/util\/WSPChecksum.py b\/src\/urh\/util\/WSPChecksum.py\nindex 52b68ae..700e53e 100644\n--- a\/src\/urh\/util\/WSPChecksum.py\n+++ b\/src\/urh\/util\/WSPChecksum.py\n@@ -1,10 +1,11 @@\n import array\n import copy\n+from enum import Enum\n+from xml.etree import ElementTree as ET\n \n from urh.util import util\n from urh.util.GenericCRC import GenericCRC\n-from enum import Enum\n-from xml.etree import ElementTree as ET\n+\n \n class WSPChecksum(object):\n     \"\"\"\n@@ -23,6 +24,16 @@\n \n     def __init__(self, mode=ChecksumMode.auto):\n         self.mode = mode\n+        self.caption = str(mode)\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, WSPChecksum):\n+            return False\n+\n+        return self.mode == other.mode\n+\n+    def __hash__(self):\n+        return hash(self.mode)\n \n     def calculate(self, msg: array.array) -> array.array:\n         \"\"\"\n@@ -56,6 +67,26 @@\n             return None\n \n     @classmethod\n+    def search_for_wsp_checksum(cls, bits_behind_sync):\n+        data_start, data_stop, crc_start, crc_stop = 0, 0, 0, 0\n+\n+        if bits_behind_sync[-4:].tobytes() != array.array(\"B\", [1, 0, 1, 1]).tobytes():\n+            return 0, 0, 0, 0  # Check for EOF\n+\n+        rorg = bits_behind_sync[0:4].tobytes()\n+        if rorg == array.array(\"B\", [0, 1, 0, 1]).tobytes() or rorg == array.array(\"B\", [0, 1, 1, 0]).tobytes():\n+            # Switch telegram\n+            if cls.checksum4(bits_behind_sync[-8:]).tobytes() == bits_behind_sync[-8:-4].tobytes():\n+                crc_start = len(bits_behind_sync) - 8\n+                crc_stop = len(bits_behind_sync) - 4\n+                data_stop = crc_start\n+                return data_start, data_stop, crc_start, crc_stop\n+\n+        # todo: Find crc8 and checksum8\n+\n+        return 0, 0, 0, 0\n+\n+    @classmethod\n     def checksum4(cls, bits: array.array) -> array.array:\n         hash = 0\n         val = copy.copy(bits)\n@@ -82,5 +113,5 @@\n         return root\n \n     @classmethod\n-    def from_xml(cls, tag:  ET.Element):\n+    def from_xml(cls, tag: ET.Element):\n         return WSPChecksum(mode=WSPChecksum.ChecksumMode[tag.get(\"mode\", \"auto\")])\ndiff --git a\/src\/urh\/util\/util.py b\/src\/urh\/util\/util.py\nindex 28d1fd0..fb29120 100644\n--- a\/src\/urh\/util\/util.py\n+++ b\/src\/urh\/util\/util.py\n@@ -8,15 +8,17 @@\n from xml.dom import minidom\n from xml.etree import ElementTree as ET\n \n+import numpy as np\n from PyQt5.QtCore import Qt\n from PyQt5.QtGui import QFontDatabase, QFont\n from PyQt5.QtGui import QIcon\n from PyQt5.QtWidgets import QApplication, QSplitter\n from PyQt5.QtWidgets import QDialog, QVBoxLayout, QPlainTextEdit, QTableWidgetItem\n+\n from urh import constants\n from urh.util.Logger import logger\n \n-PROJECT_PATH = None   # for referencing in external program calls\n+PROJECT_PATH = None  # for referencing in external program calls\n \n BCD_ERROR_SYMBOL = \"?\"\n BCD_LUT = {\"{0:04b}\".format(i): str(i) if i < 10 else BCD_ERROR_SYMBOL for i in range(16)}\n@@ -51,7 +53,7 @@\n     if shared_lib_dir:\n \n         if sys.platform == \"win32\":\n-            current_path =  os.environ.get(\"PATH\", '')\n+            current_path = os.environ.get(\"PATH\", '')\n             if not current_path.startswith(shared_lib_dir):\n                 os.environ[\"PATH\"] = shared_lib_dir + os.pathsep + current_path\n         else:\n@@ -211,7 +213,7 @@\n \n     if len(result) < target_num_bits:\n         # pad with zeros\n-        return result + array.array(\"B\", [0] * (target_num_bits-len(result)))\n+        return result + array.array(\"B\", [0] * (target_num_bits - len(result)))\n     else:\n         return result[:target_num_bits]\n \n@@ -241,6 +243,10 @@\n     return array.array(\"B\", map(int, fmt.format(n)))\n \n \n+def bits_to_number(bits: array.array) -> int:\n+    return int(\"\".join(map(str, bits)), 2)\n+\n+\n def aggregate_bits(bits: array.array, size=4) -> array.array:\n     result = array.array(\"B\", [])\n \n@@ -257,6 +263,17 @@\n     return result\n \n \n+def convert_numbers_to_hex_string(arr: np.ndarray):\n+    \"\"\"\n+    Convert an array like [0, 1, 10, 2] to string 012a2\n+\n+    :param arr:\n+    :return:\n+    \"\"\"\n+    lut = {i: \"{0:x}\".format(i) for i in range(16)}\n+    return \"\".join(lut[x] if x in lut else \" {} \".format(x) for x in arr)\n+\n+\n def clip(value, minimum, maximum):\n     return max(minimum, min(value, maximum))\n \ndiff --git a\/tests\/auto_interpretation\/test_estimate_tolerance.py b\/tests\/auto_interpretation\/test_estimate_tolerance.py\nindex d2762d8..3d3578c 100644\n--- a\/tests\/auto_interpretation\/test_estimate_tolerance.py\n+++ b\/tests\/auto_interpretation\/test_estimate_tolerance.py\n@@ -33,10 +33,8 @@\n                 [1, 9, 3, 3, 2, 9, 1, 4, 2, 4, 2, 8, 1, 4, 2, 4, 2, 4, 2, 2, 1, 5, 2, 3, 3, 3, 2, 2, 106, 104, 104, 103, 105, 104, 104, 105, 104, 104, 104, 104, 105, 103, 104, 106, 103, 105, 104, 103, 105, 103, 105, 105, 104, 104, 104, 103, 105, 104, 104, 105, 104, 104, 104, 104, 105, 104, 103, 106, 207, 104, 105],]\n \n         found_tolerances = []\n-        print()\n         for i, plateau_lengths in enumerate(data):\n             found_tolerances.append(AutoInterpretation.estimate_tolerance_from_plateau_lengths(plateau_lengths))\n \n-        print(found_tolerances)\n         estimated_tolerance = AutoInterpretation.get_most_frequent_value(found_tolerances)\n         self.assertIn(estimated_tolerance, range(4, 7))\ndiff --git a\/tests\/auto_interpretation\/test_message_segmentation.py b\/tests\/auto_interpretation\/test_message_segmentation.py\nindex dc10aca..00c14c6 100644\n--- a\/tests\/auto_interpretation\/test_message_segmentation.py\n+++ b\/tests\/auto_interpretation\/test_message_segmentation.py\n@@ -58,11 +58,8 @@\n         data = np.concatenate((msg1, msg2, msg3))\n \n         segments = segment_messages_from_magnitudes(np.abs(data), noise_threshold=0)\n-        print(segments)\n         self.assertEqual(len(segments), 3)\n         self.assertEqual(segments, [(0, 999), (10999, 12599), (32599, 34199)])\n-\n-        print(merge_message_segments_for_ook(segments))\n \n     def test_segmentation_elektromaten(self):\n         signal = Signal(get_path_for_data_file(\"elektromaten.coco\"), \"\")\ndiff --git a\/tests\/awre\/AWRETestCase.py b\/tests\/awre\/AWRETestCase.py\nnew file mode 100644\nindex 0000000..24f2ef7\n--- \/dev\/null\n+++ b\/tests\/awre\/AWRETestCase.py\n@@ -0,0 +1,65 @@\n+import os\n+import tempfile\n+import unittest\n+\n+import numpy\n+from urh.awre.FormatFinder import FormatFinder\n+\n+from tests.utils_testing import get_path_for_data_file\n+from urh.signalprocessing.ProtocolAnalyzer import ProtocolAnalyzer\n+\n+from urh.signalprocessing.MessageType import MessageType\n+\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.signalprocessing.FieldType import FieldType\n+\n+\n+class AWRETestCase(unittest.TestCase):\n+    def setUp(self):\n+        numpy.set_printoptions(linewidth=80)\n+        self.field_types = self.__init_field_types()\n+\n+    def get_format_finder_from_protocol_file(self, filename: str, clear_participant_addresses=True, return_messages=False):\n+        proto_file = get_path_for_data_file(filename)\n+        protocol = ProtocolAnalyzer(signal=None, filename=proto_file)\n+        protocol.from_xml_file(filename=proto_file, read_bits=True)\n+\n+        self.clear_message_types(protocol.messages)\n+\n+        ff = FormatFinder(protocol.messages)\n+        if clear_participant_addresses:\n+            ff.known_participant_addresses.clear()\n+\n+        if return_messages:\n+            return ff, protocol.messages\n+        else:\n+            return ff\n+\n+    @staticmethod\n+    def __init_field_types():\n+        result = []\n+        for field_type_function in FieldType.Function:\n+            result.append(FieldType(field_type_function.value, field_type_function))\n+        return result\n+\n+    @staticmethod\n+    def clear_message_types(messages: list):\n+        mt = MessageType(\"empty\")\n+        for msg in messages:\n+            msg.message_type = mt\n+\n+    @staticmethod\n+    def save_protocol(name, protocol_generator, silent=False):\n+        filename = os.path.join(tempfile.gettempdir(), name + \".proto\")\n+        if isinstance(protocol_generator, ProtocolGenerator):\n+            protocol_generator.to_file(filename)\n+        elif isinstance(protocol_generator, ProtocolAnalyzer):\n+            participants = list(set(msg.participant for msg in protocol_generator.messages))\n+            protocol_generator.to_xml_file(filename, [], participants=participants, write_bits=True)\n+        info = \"Protocol written to \" + filename\n+        if not silent:\n+            print()\n+            print(\"-\" * len(info))\n+            print(info)\n+            print(\"-\" * len(info))\ndiff --git a\/tests\/awre\/AWRExperiments.py b\/tests\/awre\/AWRExperiments.py\nnew file mode 100644\nindex 0000000..b4bd4a8\n--- \/dev\/null\n+++ b\/tests\/awre\/AWRExperiments.py\n@@ -0,0 +1,791 @@\n+import array\n+import multiprocessing\n+import os\n+import random\n+import time\n+from collections import defaultdict\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+from tests.awre.AWRETestCase import AWRETestCase\n+from tests.utils_testing import get_path_for_data_file\n+from urh.awre.FormatFinder import FormatFinder\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.awre.Preprocessor import Preprocessor\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.awre.engines.Engine import Engine\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.Message import Message\n+from urh.signalprocessing.MessageType import MessageType\n+from urh.signalprocessing.Participant import Participant\n+from urh.signalprocessing.ProtocolAnalyzer import ProtocolAnalyzer\n+from urh.util.GenericCRC import GenericCRC\n+\n+\n+def run_for_num_broken(protocol_nr, num_broken: list, num_messages: int, num_runs: int) -> list:\n+    random.seed(0)\n+    np.random.seed(0)\n+\n+    result = []\n+    for broken in num_broken:\n+        tmp_accuracies = np.empty(num_runs, dtype=np.float64)\n+        tmp_accuracies_without_broken = np.empty(num_runs, dtype=np.float64)\n+        for i in range(num_runs):\n+            protocol, expected_labels = AWRExperiments.get_protocol(protocol_nr,\n+                                                                    num_messages=num_messages,\n+                                                                    num_broken_messages=broken,\n+                                                                    silent=True)\n+\n+            AWRExperiments.run_format_finder_for_protocol(protocol)\n+            accuracy = AWRExperiments.calculate_accuracy(protocol.messages, expected_labels)\n+            accuracy_without_broken = AWRExperiments.calculate_accuracy(protocol.messages, expected_labels, broken)\n+            tmp_accuracies[i] = accuracy\n+            tmp_accuracies_without_broken[i] = accuracy_without_broken\n+\n+        avg_accuracy = np.mean(tmp_accuracies)\n+        avg_accuracy_without_broken = np.mean(tmp_accuracies_without_broken)\n+\n+        result.append((avg_accuracy, avg_accuracy_without_broken))\n+        print(\"Protocol {} with {} broken: {:>3}% {:>3}%\".format(protocol_nr, broken, int(avg_accuracy),\n+                                                                 int(avg_accuracy_without_broken)))\n+\n+    return result\n+\n+\n+class AWRExperiments(AWRETestCase):\n+    @staticmethod\n+    def _prepare_protocol_1() -> ProtocolGenerator:\n+        alice = Participant(\"Alice\", address_hex=\"dead\")\n+        bob = Participant(\"Bob\", address_hex=\"beef\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x1337\"},\n+                               participants=[alice, bob])\n+        return pg\n+\n+    @staticmethod\n+    def _prepare_protocol_2() -> ProtocolGenerator:\n+        alice = Participant(\"Alice\", address_hex=\"dead01\")\n+        bob = Participant(\"Bob\", address_hex=\"beef24\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 72)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 24)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 24)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x1337\"},\n+                               preambles_by_mt={mb.message_type: \"10\" * 36},\n+                               sequence_number_increment=32,\n+                               participants=[alice, bob])\n+\n+        return pg\n+\n+    @staticmethod\n+    def _prepare_protocol_3() -> ProtocolGenerator:\n+        alice = Participant(\"Alice\", address_hex=\"1337\")\n+        bob = Participant(\"Bob\", address_hex=\"beef\")\n+\n+        checksum = GenericCRC.from_standard_checksum(\"CRC8 CCITT\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)\n+        mb.add_label(FieldType.Function.DATA, 10 * 8)\n+        mb.add_checksum_label(8, checksum)\n+\n+        mb_ack = MessageTypeBuilder(\"ack\")\n+        mb_ack.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb_ack.add_label(FieldType.Function.SYNC, 16)\n+        mb_ack.add_label(FieldType.Function.LENGTH, 8)\n+        mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb_ack.add_checksum_label(8, checksum)\n+\n+        pg = ProtocolGenerator([mb.message_type, mb_ack.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a7d\", mb_ack.message_type: \"0x9a7d\"},\n+                               preambles_by_mt={mb.message_type: \"10\" * 8, mb_ack.message_type: \"10\" * 8},\n+                               participants=[alice, bob])\n+\n+        return pg\n+\n+    @staticmethod\n+    def _prepare_protocol_4() -> ProtocolGenerator:\n+        alice = Participant(\"Alice\", address_hex=\"1337\")\n+        bob = Participant(\"Bob\", address_hex=\"beef\")\n+\n+        checksum = GenericCRC.from_standard_checksum(\"CRC16 CCITT\")\n+\n+        mb = MessageTypeBuilder(\"data1\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.DATA, 8 * 8)\n+        mb.add_checksum_label(16, checksum)\n+\n+        mb2 = MessageTypeBuilder(\"data2\")\n+        mb2.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb2.add_label(FieldType.Function.SYNC, 16)\n+        mb2.add_label(FieldType.Function.LENGTH, 8)\n+        mb2.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb2.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb2.add_label(FieldType.Function.DATA, 64 * 8)\n+        mb2.add_checksum_label(16, checksum)\n+\n+        mb_ack = MessageTypeBuilder(\"ack\")\n+        mb_ack.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb_ack.add_label(FieldType.Function.SYNC, 16)\n+        mb_ack.add_label(FieldType.Function.LENGTH, 8)\n+        mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb_ack.add_checksum_label(16, checksum)\n+\n+        mt1, mt2, mt3 = mb.message_type, mb2.message_type, mb_ack.message_type\n+\n+        preamble = \"10001000\" * 2\n+\n+        pg = ProtocolGenerator([mt1, mt2, mt3],\n+                               syncs_by_mt={mt1: \"0x9a7d\", mt2: \"0x9a7d\", mt3: \"0x9a7d\"},\n+                               preambles_by_mt={mt1: preamble, mt2: preamble, mt3: preamble},\n+                               participants=[alice, bob])\n+\n+        return pg\n+\n+    @staticmethod\n+    def _prepare_protocol_5() -> ProtocolGenerator:\n+        alice = Participant(\"Alice\", address_hex=\"1337\")\n+        bob = Participant(\"Bob\", address_hex=\"beef\")\n+        carl = Participant(\"Carl\", address_hex=\"cafe\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)\n+\n+        mb_ack = MessageTypeBuilder(\"ack\")\n+        mb_ack.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb_ack.add_label(FieldType.Function.SYNC, 16)\n+        mb_ack.add_label(FieldType.Function.LENGTH, 8)\n+        mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n+\n+        pg = ProtocolGenerator([mb.message_type, mb_ack.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a7d\", mb_ack.message_type: \"0x9a7d\"},\n+                               preambles_by_mt={mb.message_type: \"10\" * 8, mb_ack.message_type: \"10\" * 8},\n+                               participants=[alice, bob, carl])\n+\n+        return pg\n+\n+    @staticmethod\n+    def _prepare_protocol_6() -> ProtocolGenerator:\n+        alice = Participant(\"Alice\", address_hex=\"24\")\n+        broadcast = Participant(\"Bob\", address_hex=\"ff\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 8)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x8e88\"},\n+                               preambles_by_mt={mb.message_type: \"10\" * 8},\n+                               participants=[alice, broadcast])\n+\n+        return pg\n+\n+    @staticmethod\n+    def _prepare_protocol_7() -> ProtocolGenerator:\n+        alice = Participant(\"Alice\", address_hex=\"313370\")\n+        bob = Participant(\"Bob\", address_hex=\"031337\")\n+        charly = Participant(\"Charly\", address_hex=\"110000\")\n+        daniel = Participant(\"Daniel\", address_hex=\"001100\")\n+        # broadcast = Participant(\"Broadcast\", address_hex=\"ff\")     #TODO: Sometimes messages to broadcast\n+\n+        checksum = GenericCRC.from_standard_checksum(\"CRC16 CC1101\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 24)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 24)\n+        mb.add_label(FieldType.Function.DATA, 8 * 8)\n+        mb.add_checksum_label(16, checksum)\n+\n+        mb_ack = MessageTypeBuilder(\"ack\")\n+        mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb_ack.add_label(FieldType.Function.SYNC, 16)\n+        mb_ack.add_label(FieldType.Function.DST_ADDRESS, 24)\n+        mb_ack.add_checksum_label(16, checksum)\n+\n+        mb_kex = MessageTypeBuilder(\"kex\")\n+        mb_kex.add_label(FieldType.Function.PREAMBLE, 24)\n+        mb_kex.add_label(FieldType.Function.SYNC, 16)\n+        mb_kex.add_label(FieldType.Function.DST_ADDRESS, 24)\n+        mb_kex.add_label(FieldType.Function.SRC_ADDRESS, 24)\n+        mb_kex.add_label(FieldType.Function.DATA, 64 * 8)\n+        mb_kex.add_checksum_label(16, checksum)\n+\n+        pg = ProtocolGenerator([mb.message_type, mb_ack.message_type, mb_kex.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x0420\", mb_ack.message_type: \"0x2222\",\n+                                            mb_kex.message_type: \"0x6767\"},\n+                               preambles_by_mt={mb.message_type: \"10\" * 8, mb_ack.message_type: \"10\" * 4,\n+                                                mb_kex.message_type: \"10\" * 12},\n+                               participants=[alice, bob, charly, daniel])\n+\n+        return pg\n+\n+    @staticmethod\n+    def _prepare_protocol_8() -> ProtocolGenerator:\n+        alice = Participant(\"Alice\")\n+\n+        mb = MessageTypeBuilder(\"data1\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 4)\n+        mb.add_label(FieldType.Function.SYNC, 4)\n+        mb.add_label(FieldType.Function.LENGTH, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+        mb.add_label(FieldType.Function.DATA, 8 * 542)\n+\n+        mb2 = MessageTypeBuilder(\"data2\")\n+        mb2.add_label(FieldType.Function.PREAMBLE, 4)\n+        mb2.add_label(FieldType.Function.SYNC, 4)\n+        mb2.add_label(FieldType.Function.LENGTH, 16)\n+        mb2.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+        mb2.add_label(FieldType.Function.DATA, 8 * 260)\n+\n+        pg = ProtocolGenerator([mb.message_type, mb2.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9\", mb2.message_type: \"0x9\"},\n+                               preambles_by_mt={mb.message_type: \"10\" * 2, mb2.message_type: \"10\" * 2},\n+                               sequence_number_increment=32,\n+                               participants=[alice],\n+                               little_endian=True)\n+\n+        return pg\n+\n+    def test_export_to_latex(self):\n+        filename = os.path.expanduser(\"~\/GIT\/publications\/awre\/USENIX\/protocols.tex\")\n+        if os.path.isfile(filename):\n+            os.remove(filename)\n+\n+        for i in range(1, 9):\n+            pg = getattr(self, \"_prepare_protocol_\" + str(i))()\n+            pg.export_to_latex(filename, i)\n+\n+    @classmethod\n+    def get_protocol(cls, protocol_number: int, num_messages, num_broken_messages=0, silent=False):\n+        if protocol_number == 1:\n+            pg = cls._prepare_protocol_1()\n+        elif protocol_number == 2:\n+            pg = cls._prepare_protocol_2()\n+        elif protocol_number == 3:\n+            pg = cls._prepare_protocol_3()\n+        elif protocol_number == 4:\n+            pg = cls._prepare_protocol_4()\n+        elif protocol_number == 5:\n+            pg = cls._prepare_protocol_5()\n+        elif protocol_number == 6:\n+            pg = cls._prepare_protocol_6()\n+        elif protocol_number == 7:\n+            pg = cls._prepare_protocol_7()\n+        elif protocol_number == 8:\n+            pg = cls._prepare_protocol_8()\n+        else:\n+            raise ValueError(\"Unknown protocol number\")\n+\n+        messages_types_with_data_field = [mt for mt in pg.protocol.message_types\n+                                          if mt.get_first_label_with_type(FieldType.Function.DATA)]\n+        i = -1\n+        while len(pg.protocol.messages) < num_messages:\n+            i += 1\n+            source = pg.participants[i % len(pg.participants)]\n+            destination = pg.participants[(i + 1) % len(pg.participants)]\n+            if i % 2 == 0:\n+                data_bytes = 8\n+            else:\n+                # data_bytes = 16\n+                data_bytes = 64\n+\n+            if len(messages_types_with_data_field) == 0:\n+                # set data automatically\n+                data = \"\".join(random.choice([\"0\", \"1\"]) for _ in range(data_bytes * 8))\n+                pg.generate_message(data=data, source=source, destination=destination)\n+            else:\n+                # search for message type with right data length\n+                mt = messages_types_with_data_field[i % len(messages_types_with_data_field)]\n+                data_length = mt.get_first_label_with_type(FieldType.Function.DATA).length\n+                data = \"\".join(random.choice([\"0\", \"1\"]) for _ in range(data_length))\n+                pg.generate_message(message_type=mt, data=data, source=source, destination=destination)\n+\n+            ack_message_type = next((mt for mt in pg.protocol.message_types if \"ack\" in mt.name), None)\n+            if ack_message_type:\n+                pg.generate_message(message_type=ack_message_type, data=\"\", source=destination, destination=source)\n+\n+        for i in range(num_broken_messages):\n+            msg = pg.protocol.messages[i]\n+            pos = random.randint(0, len(msg.plain_bits) \/\/ 2)\n+            msg.plain_bits[pos:] = array.array(\"B\",\n+                                               [random.randint(0, 1) for _ in range(len(msg.plain_bits) - pos)])\n+\n+        if num_broken_messages == 0:\n+            cls.save_protocol(\"protocol{}_{}_messages\".format(protocol_number, num_messages), pg, silent=silent)\n+        else:\n+            cls.save_protocol(\"protocol{}_{}_broken\".format(protocol_number, num_broken_messages), pg, silent=silent)\n+\n+        expected_message_types = [msg.message_type for msg in pg.protocol.messages]\n+\n+        # Delete message type information -> no prior knowledge\n+        cls.clear_message_types(pg.protocol.messages)\n+\n+        # Delete data labels if present\n+        for mt in expected_message_types:\n+            data_lbl = mt.get_first_label_with_type(FieldType.Function.DATA)\n+            if data_lbl:\n+                mt.remove(data_lbl)\n+\n+        return pg.protocol, expected_message_types\n+\n+    @staticmethod\n+    def calculate_accuracy(messages, expected_labels, num_broken_messages=0):\n+        \"\"\"\n+        Calculate the accuracy of labels compared to expected labels\n+        Accuracy is 100% when labels == expected labels\n+        Accuracy drops by 1 \/ len(expected_labels) for every expected label not present in labels\n+\n+        :type messages: list of Message\n+        :type expected_labels: list of MessageType\n+        :return:\n+        \"\"\"\n+        accuracy = sum(len(set(expected_labels[i]) & set(messages[i].message_type)) \/ len(expected_labels[i])\n+                       for i in range(num_broken_messages, len(messages)))\n+        try:\n+            accuracy \/= (len(messages) - num_broken_messages)\n+        except ZeroDivisionError:\n+            accuracy = 0\n+\n+        return accuracy * 100\n+\n+    def test_against_num_messages(self):\n+        num_messages = list(range(1, 24, 1))\n+        accuracies = defaultdict(list)\n+\n+        protocols = [1, 2, 3, 4, 5, 6, 7, 8]\n+\n+        random.seed(0)\n+        np.random.seed(0)\n+        for protocol_nr in protocols:\n+            for n in num_messages:\n+                protocol, expected_labels = self.get_protocol(protocol_nr, num_messages=n)\n+                self.run_format_finder_for_protocol(protocol)\n+\n+                accuracy = self.calculate_accuracy(protocol.messages, expected_labels)\n+                accuracies[\"protocol {}\".format(protocol_nr)].append(accuracy)\n+\n+        self.__plot(num_messages, accuracies, xlabel=\"Number of messages\", ylabel=\"Accuracy in %\", grid=True)\n+        self.__export_to_csv(\"\/tmp\/accuray-vs-messages\", num_messages, accuracies)\n+\n+    def test_against_error(self):\n+        Engine._DEBUG_ = False\n+        Preprocessor._DEBUG_ = False\n+\n+        num_runs = 100\n+\n+        num_messages = 30\n+        num_broken_messages = list(range(0, num_messages + 1))\n+        accuracies = defaultdict(list)\n+        accuracies_without_broken = defaultdict(list)\n+\n+        protocols = [1, 2, 3, 4, 5, 6, 7, 8]\n+\n+        random.seed(0)\n+        np.random.seed(0)\n+\n+        with multiprocessing.Pool() as p:\n+            result = p.starmap(run_for_num_broken,\n+                               [(i, num_broken_messages, num_messages, num_runs) for i in protocols])\n+            for i, acc in enumerate(result):\n+                accuracies[\"protocol {}\".format(i + 1)] = [a[0] for a in acc]\n+                accuracies_without_broken[\"protocol {}\".format(i + 1)] = [a[1] for a in acc]\n+\n+        self.__plot(100 * np.array(num_broken_messages) \/ num_messages, accuracies,\n+                    title=\"Overall Accuracy vs percentage of broken messages\",\n+                    xlabel=\"Broken messages in %\",\n+                    ylabel=\"Accuracy in %\", grid=True)\n+        self.__plot(100 * np.array(num_broken_messages) \/ num_messages, accuracies_without_broken,\n+                    title=\" Accuracy of unbroken vs percentage of broken messages\",\n+                    xlabel=\"Broken messages in %\",\n+                    ylabel=\"Accuracy in %\", grid=True)\n+        self.__export_to_csv(\"\/tmp\/accuray-vs-error\", num_broken_messages, accuracies, relative=num_messages)\n+        self.__export_to_csv(\"\/tmp\/accuray-vs-error-without-broken\", num_broken_messages, accuracies_without_broken,\n+                             relative=num_messages)\n+\n+    def test_performance(self):\n+        Engine._DEBUG_ = False\n+        Preprocessor._DEBUG_ = False\n+\n+        num_messages = list(range(200, 205, 5))\n+        protocols = [1]\n+\n+        random.seed(0)\n+        np.random.seed(0)\n+\n+        performances = defaultdict(list)\n+\n+        for protocol_nr in protocols:\n+            print(\"Running for protocol\", protocol_nr)\n+            for messages in num_messages:\n+                protocol, _ = self.get_protocol(protocol_nr, messages, silent=True)\n+\n+                t = time.time()\n+                self.run_format_finder_for_protocol(protocol)\n+                performances[\"protocol {}\".format(protocol_nr)].append(time.time() - t)\n+\n+        # self.__plot(num_messages, performances, xlabel=\"Number of messages\", ylabel=\"Time in seconds\", grid=True)\n+\n+    def test_performance_real_protocols(self):\n+        Engine._DEBUG_ = False\n+        Preprocessor._DEBUG_ = False\n+\n+        num_runs = 100\n+\n+        num_messages = list(range(8, 512, 4))\n+        protocol_names = [\"enocean\", \"homematic\", \"rwe\"]\n+\n+        random.seed(0)\n+        np.random.seed(0)\n+\n+        performances = defaultdict(list)\n+\n+        for protocol_name in protocol_names:\n+            for messages in num_messages:\n+                if protocol_name == \"homematic\":\n+                    protocol = self.generate_homematic(messages, save_protocol=False)\n+                elif protocol_name == \"enocean\":\n+                    protocol = self.generate_enocean(messages, save_protocol=False)\n+                elif protocol_name == \"rwe\":\n+                    protocol = self.generate_rwe(messages, save_protocol=False)\n+                else:\n+                    raise ValueError(\"Unknown protocol name\")\n+\n+                tmp_performances = np.empty(num_runs, dtype=np.float64)\n+                for i in range(num_runs):\n+                    print(\"\\r{0} with {1:02d} messages ({2}\/{3} runs)\".format(protocol_name, messages, i + 1, num_runs),\n+                          flush=True, end=\"\")\n+\n+                    t = time.time()\n+                    self.run_format_finder_for_protocol(protocol)\n+                    tmp_performances[i] = time.time() - t\n+                    self.clear_message_types(protocol.messages)\n+\n+                mean_performance = tmp_performances.mean()\n+                print(\" {:.2f}s\".format(mean_performance))\n+                performances[\"{}\".format(protocol_name)].append(mean_performance)\n+\n+        self.__plot(num_messages, performances, xlabel=\"Number of messages\", ylabel=\"Time in seconds\", grid=True)\n+        self.__export_to_csv(\"\/tmp\/performance.csv\", num_messages, performances)\n+\n+    @staticmethod\n+    def __export_to_csv(filename: str, x: list, y: dict, relative=None):\n+        if not filename.endswith(\".csv\"):\n+            filename += \".csv\"\n+\n+        with open(filename, \"w\") as f:\n+            f.write(\"N,\")\n+            if relative is not None:\n+                f.write(\"NRel,\")\n+            for y_cap in sorted(y):\n+                f.write(y_cap + \",\")\n+            f.write(\"\\n\")\n+\n+            for i, x_val in enumerate(x):\n+                f.write(\"{},\".format(x_val))\n+                if relative is not None:\n+                    f.write(\"{},\".format(100 * x_val \/ relative))\n+\n+                for y_cap in sorted(y):\n+                    f.write(\"{},\".format(y[y_cap][i]))\n+                f.write(\"\\n\")\n+\n+    @staticmethod\n+    def __plot(x: list, y: dict, xlabel: str, ylabel: str, grid=False, title=None):\n+        plt.xlabel(xlabel)\n+        plt.ylabel(ylabel)\n+\n+        for y_cap, y_values in sorted(y.items()):\n+            plt.plot(x, y_values, label=y_cap)\n+\n+        if grid:\n+            plt.grid()\n+\n+        if title:\n+            plt.title(title)\n+\n+        plt.legend()\n+        plt.show()\n+\n+    @staticmethod\n+    def run_format_finder_for_protocol(protocol: ProtocolAnalyzer):\n+        ff = FormatFinder(protocol.messages)\n+        ff.known_participant_addresses.clear()\n+        ff.run()\n+\n+        for msg_type, indices in ff.existing_message_types.items():\n+            for i in indices:\n+                protocol.messages[i].message_type = msg_type\n+\n+    @classmethod\n+    def generate_homematic(cls, num_messages: int, save_protocol=True):\n+        mb_m_frame = MessageTypeBuilder(\"mframe\")\n+        mb_c_frame = MessageTypeBuilder(\"cframe\")\n+        mb_r_frame = MessageTypeBuilder(\"rframe\")\n+        mb_a_frame = MessageTypeBuilder(\"aframe\")\n+\n+        participants = [Participant(\"CCU\", address_hex=\"3927cc\"), Participant(\"Switch\", address_hex=\"3101cc\")]\n+\n+        checksum = GenericCRC.from_standard_checksum(\"CRC16 CC1101\")\n+        for mb_builder in [mb_m_frame, mb_c_frame, mb_r_frame, mb_a_frame]:\n+            mb_builder.add_label(FieldType.Function.PREAMBLE, 32)\n+            mb_builder.add_label(FieldType.Function.SYNC, 32)\n+            mb_builder.add_label(FieldType.Function.LENGTH, 8)\n+            mb_builder.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)\n+            mb_builder.add_label(FieldType.Function.TYPE, 16)\n+            mb_builder.add_label(FieldType.Function.SRC_ADDRESS, 24)\n+            mb_builder.add_label(FieldType.Function.DST_ADDRESS, 24)\n+            if mb_builder.name == \"mframe\":\n+                mb_builder.add_label(FieldType.Function.DATA, 16, name=\"command\")\n+            elif mb_builder.name == \"cframe\":\n+                mb_builder.add_label(FieldType.Function.DATA, 16 * 4, name=\"command+challenge+magic\")\n+            elif mb_builder.name == \"rframe\":\n+                mb_builder.add_label(FieldType.Function.DATA, 32 * 4, name=\"cipher\")\n+            elif mb_builder.name == \"aframe\":\n+                mb_builder.add_label(FieldType.Function.DATA, 10 * 4, name=\"command + auth\")\n+            mb_builder.add_checksum_label(16, checksum)\n+\n+        message_types = [mb_m_frame.message_type, mb_c_frame.message_type, mb_r_frame.message_type,\n+                         mb_a_frame.message_type]\n+        preamble = \"0xaaaaaaaa\"\n+        sync = \"0xe9cae9ca\"\n+        initial_sequence_number = 36\n+        pg = ProtocolGenerator(message_types, participants,\n+                               preambles_by_mt={mt: preamble for mt in message_types},\n+                               syncs_by_mt={mt: sync for mt in message_types},\n+                               sequence_numbers={mt: initial_sequence_number for mt in message_types},\n+                               message_type_codes={mb_m_frame.message_type: 42560,\n+                                                   mb_c_frame.message_type: 40962,\n+                                                   mb_r_frame.message_type: 40963,\n+                                                   mb_a_frame.message_type: 32770})\n+\n+        for i in range(num_messages):\n+            mt = pg.message_types[i % 4]\n+            data_length = mt.get_first_label_with_type(FieldType.Function.DATA).length\n+            data = \"\".join(random.choice([\"0\", \"1\"]) for _ in range(data_length))\n+            pg.generate_message(mt, data, source=pg.participants[i % 2], destination=pg.participants[(i + 1) % 2])\n+\n+        if save_protocol:\n+            cls.save_protocol(\"homematic\", pg)\n+\n+        cls.clear_message_types(pg.messages)\n+        return pg.protocol\n+\n+    @classmethod\n+    def generate_enocean(cls, num_messages: int, save_protocol=True):\n+        filename = get_path_for_data_file(\"enocean_bits.txt\")\n+        enocean_bits = []\n+        with open(filename, \"r\") as f:\n+            for line in map(str.strip, f):\n+                enocean_bits.append(line)\n+\n+        protocol = ProtocolAnalyzer(None)\n+        message_type = MessageType(\"empty\")\n+        for i in range(num_messages):\n+            msg = Message.from_plain_bits_str(enocean_bits[i % len(enocean_bits)])\n+            msg.message_type = message_type\n+            protocol.messages.append(msg)\n+\n+        if save_protocol:\n+            cls.save_protocol(\"enocean\", protocol)\n+\n+        return protocol\n+\n+    @classmethod\n+    def generate_rwe(cls, num_messages: int, save_protocol=True):\n+        proto_file = get_path_for_data_file(\"rwe.proto.xml\")\n+        protocol = ProtocolAnalyzer(signal=None, filename=proto_file)\n+        protocol.from_xml_file(filename=proto_file, read_bits=True)\n+        messages = protocol.messages\n+\n+        result = ProtocolAnalyzer(None)\n+        message_type = MessageType(\"empty\")\n+        for i in range(num_messages):\n+            msg = messages[i % len(messages)]  # type: Message\n+            msg.message_type = message_type\n+            result.messages.append(msg)\n+\n+        if save_protocol:\n+            cls.save_protocol(\"rwe\", result)\n+\n+        return result\n+\n+    def test_export_latex_table(self):\n+        def bold_latex(s):\n+            return r\"\\textbf{\" + str(s) + r\"}\"\n+\n+        comments = {\n+            1: \"common protocol\",\n+            2: \"unusual field sizes\",\n+            3: \"contains ack and CRC8 CCITT\",\n+            4: \"contains ack and CRC16 CCITT\",\n+            5: \"three participants with ack frame\",\n+            6: \"short address\",\n+            7: \"four participants, varying preamble size, varying sync words\",\n+            8: \"nibble fields + LE\"\n+        }\n+\n+        bold = {i: defaultdict(bool) for i in range(1, 9)}\n+        bold[2][FieldType.Function.PREAMBLE] = True\n+        bold[2][FieldType.Function.SRC_ADDRESS] = True\n+        bold[2][FieldType.Function.DST_ADDRESS] = True\n+\n+        bold[3][FieldType.Function.CHECKSUM] = True\n+\n+        bold[4][FieldType.Function.CHECKSUM] = True\n+\n+        bold[6][FieldType.Function.SRC_ADDRESS] = True\n+\n+        bold[7][FieldType.Function.PREAMBLE] = True\n+        bold[7][FieldType.Function.SYNC] = True\n+        bold[7][FieldType.Function.SRC_ADDRESS] = True\n+        bold[7][FieldType.Function.DST_ADDRESS] = True\n+\n+        bold[8][FieldType.Function.PREAMBLE] = True\n+        bold[8][FieldType.Function.SYNC] = True\n+\n+        filename = os.path.expanduser(\"~\/GIT\/publications\/awre\/USENIX\/protocol_table.tex\")\n+        rowcolors = [r\"\\rowcolor{black!10}\", r\"\\rowcolor{black!20}\"]\n+\n+        with open(filename, \"w\") as f:\n+            f.write(r\"\\begin{table*}[!h]\" + \"\\n\")\n+            f.write(\n+                \"\\t\" + r\"\\caption{Properties of tested protocols whereby $\\times$ means field is not present and $N_P$ is the number of participants.}\" + \"\\n\")\n+            f.write(\"\\t\" + r\"\\label{tab:protocols}\" + \"\\n\")\n+            f.write(\"\\t\" + r\"\\centering\" + \"\\n\")\n+            f.write(\"\\t\" + r\"\\begin{tabularx}{\\linewidth}{cp{2.5cm}llcccccccc}\" + \"\\n\")\n+            f.write(\"\\t\\t\" + r\"\\hline\" + \"\\n\")\n+            f.write(\"\\t\\t\" + r\"\\rowcolor{black!90}\" + \"\\n\")\n+            f.write(\"\\t\\t\" + r\"\\textcolor{white}{\\textbf{\\#}} & \"\n+                             r\"\\textcolor{white}{\\textbf{Comment}} & \"\n+                             r\"\\textcolor{white}{$\\mathbf{ N_P }$} & \"\n+                             r\"\\textcolor{white}{\\textbf{Message}} & \"\n+                             r\"\\textcolor{white}{\\textbf{Even\/odd}} & \"\n+                             r\"\\multicolumn{7}{c}{\\textcolor{white}{\\textbf{Size of field in bit (BE=Big Endian, LE=Little Endian)}}}\\\\\"\n+                             \"\\n\\t\\t\"\n+                             r\"\\rowcolor{black!90}\"\n+                             \"\\n\\t\\t\"\n+                             r\"& & & \\textcolor{white}{\\textbf{Type}} & \\textcolor{white}{\\textbf{message data}} &\"\n+                             r\"\\textcolor{white}{Preamble} & \"\n+                             r\"\\textcolor{white}{Sync} & \"\n+                             r\"\\textcolor{white}{Length}  & \"\n+                             r\"\\textcolor{white}{SRC} & \"\n+                             r\"\\textcolor{white}{DST} & \"\n+                             r\"\\textcolor{white}{SEQ Nr} & \"\n+                             r\"\\textcolor{white}{CRC}  \\\\\" + \"\\n\")\n+            f.write(\"\\t\\t\" + r\"\\hline\" + \"\\n\")\n+\n+            rowcolor_index = 0\n+            for i in range(1, 9):\n+                pg = getattr(self, \"_prepare_protocol_\" + str(i))()\n+                assert isinstance(pg, ProtocolGenerator)\n+\n+                try:\n+                    data1 = next(mt for mt in pg.message_types if mt.name == \"data1\")\n+                    data2 = next(mt for mt in pg.message_types if mt.name == \"data2\")\n+\n+                    data1_len = data1.get_first_label_with_type(FieldType.Function.DATA).length \/\/ 8\n+                    data2_len = data2.get_first_label_with_type(FieldType.Function.DATA).length \/\/ 8\n+\n+                except StopIteration:\n+                    data1_len, data2_len = 8, 64\n+\n+                rowcolor = rowcolors[rowcolor_index % len(rowcolors)]\n+                rowcount = 0\n+                for j, mt in enumerate(pg.message_types):\n+                    if mt.name == \"data2\":\n+                        continue\n+\n+                    rowcount += 1\n+                    if j == 0:\n+                        protocol_nr, participants = str(i), len(pg.participants)\n+                        if participants > 2:\n+                            participants = bold_latex(participants)\n+                    else:\n+                        protocol_nr, participants = \" \", \" \"\n+\n+                    f.write(\"\\t\\t\" + rowcolor + \"\\n\")\n+\n+                    if len(pg.message_types) == 1 or (\n+                            mt.name == \"data1\" and \"ack\" not in {m.name for m in pg.message_types}):\n+                        f.write(\"\\t\\t{} & {} & {} & {} &\".format(protocol_nr, comments[i], participants,\n+                                                                 mt.name.replace(\"1\", \"\")))\n+                    elif j == len(pg.message_types) - 1:\n+                        f.write(\n+                            \"\\t\\t{} & \\\\multirow{{{}}}{{\\\\linewidth}}{{{}}} & {} & {} &\".format(protocol_nr, -rowcount,\n+                                                                                                comments[i],\n+                                                                                                participants,\n+                                                                                                mt.name.replace(\"1\",\n+                                                                                                                \"\")))\n+                    else:\n+                        f.write(\"\\t\\t{} & & {} & {} &\".format(protocol_nr, participants, mt.name.replace(\"1\", \"\")))\n+                    data_lbl = mt.get_first_label_with_type(FieldType.Function.DATA)\n+\n+                    if mt.name == \"data1\" or mt.name == \"data2\":\n+                        f.write(\"{}\/{} byte &\".format(data1_len, data2_len))\n+                    elif mt.name == \"data\" and data_lbl is None:\n+                        f.write(\"{}\/{} byte &\".format(data1_len, data2_len))\n+                    elif data_lbl is not None:\n+                        f.write(\"{0}\/{0} byte & \".format(data_lbl.length \/\/ 8))\n+                    else:\n+                        f.write(r\"$ \\times $ & \")\n+\n+                    for t in (FieldType.Function.PREAMBLE, FieldType.Function.SYNC, FieldType.Function.LENGTH,\n+                              FieldType.Function.SRC_ADDRESS, FieldType.Function.DST_ADDRESS,\n+                              FieldType.Function.SEQUENCE_NUMBER,\n+                              FieldType.Function.CHECKSUM):\n+                        lbl = mt.get_first_label_with_type(t)\n+                        if lbl is not None:\n+                            if bold[i][lbl.field_type.function]:\n+                                f.write(bold_latex(lbl.length))\n+                            else:\n+                                f.write(str(lbl.length))\n+                            if lbl.length > 8 and t in (FieldType.Function.LENGTH, FieldType.Function.SEQUENCE_NUMBER):\n+                                f.write(\" ({})\".format(bold_latex(\"LE\") if pg.little_endian else \"BE\"))\n+                        else:\n+                            f.write(r\"$ \\times $\")\n+\n+                        if t != FieldType.Function.CHECKSUM:\n+                            f.write(\" & \")\n+                        else:\n+                            f.write(r\"\\\\\" + \"\\n\")\n+\n+                rowcolor_index += 1\n+\n+            f.write(\"\\t\" + r\"\\end{tabularx}\" + \"\\n\")\n+\n+            f.write(r\"\\end{table*}\" + \"\\n\")\ndiff --git a\/tests\/awre\/TestAWREHistograms.py b\/tests\/awre\/TestAWREHistograms.py\nnew file mode 100644\nindex 0000000..3a6a434\n--- \/dev\/null\n+++ b\/tests\/awre\/TestAWREHistograms.py\n@@ -0,0 +1,179 @@\n+import random\n+from collections import defaultdict\n+\n+import matplotlib.pyplot as plt\n+\n+from tests.awre.AWRETestCase import AWRETestCase\n+from urh.awre.FormatFinder import FormatFinder\n+from urh.awre.Histogram import Histogram\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.Participant import Participant\n+\n+SHOW_PLOTS = True\n+\n+class TestAWREHistograms(AWRETestCase):\n+    def test_very_simple_protocol(self):\n+        \"\"\"\n+        Test a very simple protocol consisting just of a preamble, sync and some random data\n+        :return:\n+        \"\"\"\n+        mb = MessageTypeBuilder(\"very_simple_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 8)\n+\n+        num_messages = 10\n+\n+        pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: \"0x9a\"})\n+        for _ in range(num_messages):\n+            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 255), 8))\n+\n+        self.save_protocol(\"very_simple\", pg)\n+\n+        h = Histogram(FormatFinder.get_bitvectors_from_messages(pg.protocol.messages))\n+        if SHOW_PLOTS:\n+            h.plot()\n+\n+    def test_simple_protocol(self):\n+        \"\"\"\n+        Test a simple protocol with preamble, sync and length field and some random data\n+        :return:\n+        \"\"\"\n+        mb = MessageTypeBuilder(\"simple_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+\n+        num_messages_by_data_length = {8: 5, 16: 10, 32: 15}\n+        pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: \"0x9a9d\"})\n+        for data_length, num_messages in num_messages_by_data_length.items():\n+            for _ in range(num_messages):\n+                pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** data_length - 1), data_length))\n+\n+        self.save_protocol(\"simple\", pg)\n+\n+        plt.subplot(\"221\")\n+        plt.title(\"All messages\")\n+        format_finder = FormatFinder(pg.protocol.messages)\n+\n+        for i, sync_end in enumerate(format_finder.sync_ends):\n+            self.assertEqual(sync_end, 24, msg=str(i))\n+\n+        h = Histogram(format_finder.bitvectors)\n+        h.subplot_on(plt)\n+\n+        bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n+        bitvectors_by_length = defaultdict(list)\n+        for bitvector in bitvectors:\n+            bitvectors_by_length[len(bitvector)].append(bitvector)\n+\n+        for i, (message_length, bitvectors) in enumerate(bitvectors_by_length.items()):\n+            plt.subplot(2, 2, i + 2)\n+            plt.title(\"Messages with length {} ({})\".format(message_length, len(bitvectors)))\n+            Histogram(bitvectors).subplot_on(plt)\n+\n+        if SHOW_PLOTS:\n+            plt.show()\n+\n+    def test_medium_protocol(self):\n+        \"\"\"\n+        Test a protocol with preamble, sync, length field, 2 participants and addresses and seq nr and random data\n+        :return:\n+        \"\"\"\n+        mb = MessageTypeBuilder(\"medium_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 8)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+\n+        alice = Participant(\"Alice\", \"A\", \"1234\", color_index=0)\n+        bob = Participant(\"Bob\", \"B\", \"5a9d\", color_index=1)\n+\n+        num_messages = 100\n+        pg = ProtocolGenerator([mb.message_type], syncs_by_mt={mb.message_type: \"0x1c\"}, little_endian=False)\n+        for i in range(num_messages):\n+            len_data = random.randint(1, 5)\n+            data = \"\".join(pg.decimal_to_bits(random.randint(0, 2 ** 8 - 1), 8) for _ in range(len_data))\n+            if i % 2 == 0:\n+                source, dest = alice, bob\n+            else:\n+                source, dest = bob, alice\n+            pg.generate_message(data=data, source=source, destination=dest)\n+\n+        self.save_protocol(\"medium\", pg)\n+\n+        plt.subplot(2, 2, 1)\n+        plt.title(\"All messages\")\n+        bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n+        h = Histogram(bitvectors)\n+        h.subplot_on(plt)\n+\n+        for i, (participant, bitvectors) in enumerate(\n+                sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n+            plt.subplot(2, 2, i + 3)\n+            plt.title(\"Messages with participant {} ({})\".format(participant.shortname, len(bitvectors)))\n+            Histogram(bitvectors).subplot_on(plt)\n+\n+        if SHOW_PLOTS:\n+            plt.show()\n+\n+    def get_bitvectors_by_participant(self, messages):\n+        import numpy as np\n+        result = defaultdict(list)\n+        for msg in messages:  # type: Message\n+            result[msg.participant].append(np.array(msg.decoded_bits, dtype=np.uint8, order=\"C\"))\n+        return result\n+\n+    def test_ack_protocol(self):\n+        \"\"\"\n+        Test a protocol with acks\n+        :return:\n+        \"\"\"\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 8)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+\n+        mb_ack = MessageTypeBuilder(\"ack\")\n+        mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb_ack.add_label(FieldType.Function.SYNC, 8)\n+        mb_ack.add_label(FieldType.Function.LENGTH, 8)\n+        mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n+\n+        alice = Participant(\"Alice\", \"A\", \"1234\", color_index=0)\n+        bob = Participant(\"Bob\", \"B\", \"5a9d\", color_index=1)\n+\n+        num_messages = 50\n+        pg = ProtocolGenerator([mb.message_type, mb_ack.message_type],\n+                               syncs_by_mt={mb.message_type: \"0xbf\", mb_ack.message_type: \"0xbf\"},\n+                               little_endian=False)\n+        for i in range(num_messages):\n+            if i % 2 == 0:\n+                source, dest = alice, bob\n+            else:\n+                source, dest = bob, alice\n+            pg.generate_message(data=\"0xffff\", source=source, destination=dest)\n+            pg.generate_message(data=\"\", source=dest, destination=source, message_type=mb_ack.message_type)\n+\n+        self.save_protocol(\"proto_with_acks\", pg)\n+\n+        plt.subplot(2, 2, 1)\n+        plt.title(\"All messages\")\n+        bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages)\n+        h = Histogram(bitvectors)\n+        h.subplot_on(plt)\n+\n+        for i, (participant, bitvectors) in enumerate(\n+                sorted(self.get_bitvectors_by_participant(pg.protocol.messages).items())):\n+            plt.subplot(2, 2, i + 3)\n+            plt.title(\"Messages with participant {} ({})\".format(participant.shortname, len(bitvectors)))\n+            Histogram(bitvectors).subplot_on(plt)\n+\n+        if SHOW_PLOTS:\n+            plt.show()\ndiff --git a\/tests\/awre\/__init__.py b\/tests\/awre\/__init__.py\nnew file mode 100644\nindex 0000000..e69de29\n--- \/dev\/null\n+++ b\/tests\/awre\/__init__.py\ndiff --git a\/tests\/awre\/test_address_engine.py b\/tests\/awre\/test_address_engine.py\nnew file mode 100644\nindex 0000000..1bb9f2a\n--- \/dev\/null\n+++ b\/tests\/awre\/test_address_engine.py\n@@ -0,0 +1,386 @@\n+import random\n+from array import array\n+\n+import numpy as np\n+\n+from tests.awre.AWRETestCase import AWRETestCase\n+from tests.utils_testing import get_path_for_data_file\n+from urh.awre.FormatFinder import FormatFinder\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.awre.engines.AddressEngine import AddressEngine\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.Message import Message\n+from urh.signalprocessing.Participant import Participant\n+from urh.signalprocessing.ProtocolAnalyzer import ProtocolAnalyzer\n+from urh.util import util\n+\n+\n+class TestAddressEngine(AWRETestCase):\n+    def setUp(self):\n+        super().setUp()\n+        self.alice = Participant(\"Alice\", \"A\", address_hex=\"1234\")\n+        self.bob = Participant(\"Bob\", \"B\", address_hex=\"cafe\")\n+\n+    def test_one_participant(self):\n+        \"\"\"\n+        Test a simple protocol with\n+        preamble, sync and length field (8 bit) and some random data\n+\n+        :return:\n+        \"\"\"\n+        mb = MessageTypeBuilder(\"simple_address_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+\n+        num_messages_by_data_length = {8: 5, 16: 10, 32: 15}\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a9d\"},\n+                               participants=[self.alice])\n+        for data_length, num_messages in num_messages_by_data_length.items():\n+            for i in range(num_messages):\n+                pg.generate_message(data=pg.decimal_to_bits(22 * i, data_length), source=self.alice)\n+\n+        #self.save_protocol(\"address_one_participant\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+\n+        address_engine = AddressEngine(ff.hexvectors, ff.participant_indices)\n+        address_dict = address_engine.find_addresses()\n+\n+        self.assertEqual(len(address_dict), 0)\n+\n+    def test_two_participants(self):\n+        mb = MessageTypeBuilder(\"address_two_participants\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+\n+        num_messages = 50\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a9d\"},\n+                               participants=[self.alice, self.bob])\n+\n+        for i in range(num_messages):\n+            if i % 2 == 0:\n+                source, destination = self.alice, self.bob\n+                data_length = 8\n+            else:\n+                source, destination = self.bob, self.alice\n+                data_length = 16\n+            pg.generate_message(data=pg.decimal_to_bits(4 * i, data_length), source=source, destination=destination)\n+\n+        #self.save_protocol(\"address_two_participants\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+\n+        address_engine = AddressEngine(ff.hexvectors, ff.participant_indices)\n+        address_dict = address_engine.find_addresses()\n+        self.assertEqual(len(address_dict), 2)\n+        addresses_1 = list(map(util.convert_numbers_to_hex_string, address_dict[0]))\n+        addresses_2 = list(map(util.convert_numbers_to_hex_string, address_dict[1]))\n+        self.assertIn(self.alice.address_hex, addresses_1)\n+        self.assertIn(self.alice.address_hex, addresses_2)\n+        self.assertIn(self.bob.address_hex, addresses_1)\n+        self.assertIn(self.bob.address_hex, addresses_2)\n+\n+        ff.known_participant_addresses.clear()\n+        self.assertEqual(len(ff.known_participant_addresses), 0)\n+\n+        ff.perform_iteration()\n+\n+        self.assertEqual(len(ff.known_participant_addresses), 2)\n+        self.assertIn(bytes([int(h, 16) for h in self.alice.address_hex]),\n+                      map(bytes, ff.known_participant_addresses.values()))\n+        self.assertIn(bytes([int(h, 16) for h in self.bob.address_hex]),\n+                      map(bytes, ff.known_participant_addresses.values()))\n+\n+        self.assertEqual(len(ff.message_types), 1)\n+        mt = ff.message_types[0]\n+        dst_addr = mt.get_first_label_with_type(FieldType.Function.DST_ADDRESS)\n+        self.assertIsNotNone(dst_addr)\n+        self.assertEqual(dst_addr.start, 32)\n+        self.assertEqual(dst_addr.length, 16)\n+        src_addr = mt.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)\n+        self.assertIsNotNone(src_addr)\n+        self.assertEqual(src_addr.start, 48)\n+        self.assertEqual(src_addr.length, 16)\n+\n+    def test_two_participants_with_ack_messages(self):\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb_ack = MessageTypeBuilder(\"ack\")\n+        mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb_ack.add_label(FieldType.Function.SYNC, 16)\n+        mb_ack.add_label(FieldType.Function.LENGTH, 8)\n+        mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n+\n+        num_messages = 50\n+\n+        pg = ProtocolGenerator([mb.message_type, mb_ack.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x6768\", mb_ack.message_type: \"0x6768\"},\n+                               participants=[self.alice, self.bob])\n+\n+        random.seed(0)\n+        for i in range(num_messages):\n+            if i % 2 == 0:\n+                source, destination = self.alice, self.bob\n+                data_length = 8\n+            else:\n+                source, destination = self.bob, self.alice\n+                data_length = 16\n+            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** (data_length - 1)), data_length),\n+                                source=source, destination=destination)\n+            pg.generate_message(data=\"\", message_type=mb_ack.message_type, destination=source, source=destination)\n+\n+        #self.save_protocol(\"address_two_participants_with_acks\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+        address_engine = AddressEngine(ff.hexvectors, ff.participant_indices)\n+        address_dict = address_engine.find_addresses()\n+        self.assertEqual(len(address_dict), 2)\n+        addresses_1 = list(map(util.convert_numbers_to_hex_string, address_dict[0]))\n+        addresses_2 = list(map(util.convert_numbers_to_hex_string, address_dict[1]))\n+        self.assertIn(self.alice.address_hex, addresses_1)\n+        self.assertIn(self.alice.address_hex, addresses_2)\n+        self.assertIn(self.bob.address_hex, addresses_1)\n+        self.assertIn(self.bob.address_hex, addresses_2)\n+\n+        ff.known_participant_addresses.clear()\n+        ff.perform_iteration()\n+        self.assertEqual(len(ff.message_types), 2)\n+        mt = ff.message_types[1]\n+        dst_addr = mt.get_first_label_with_type(FieldType.Function.DST_ADDRESS)\n+        self.assertIsNotNone(dst_addr)\n+        self.assertEqual(dst_addr.start, 32)\n+        self.assertEqual(dst_addr.length, 16)\n+        src_addr = mt.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)\n+        self.assertIsNotNone(src_addr)\n+        self.assertEqual(src_addr.start, 48)\n+        self.assertEqual(src_addr.length, 16)\n+\n+        mt = ff.message_types[0]\n+        dst_addr = mt.get_first_label_with_type(FieldType.Function.DST_ADDRESS)\n+        self.assertIsNotNone(dst_addr)\n+        self.assertEqual(dst_addr.start, 32)\n+        self.assertEqual(dst_addr.length, 16)\n+\n+    def test_two_participants_with_ack_messages_and_type(self):\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.TYPE, 8)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb_ack = MessageTypeBuilder(\"ack\")\n+        mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb_ack.add_label(FieldType.Function.SYNC, 16)\n+        mb_ack.add_label(FieldType.Function.LENGTH, 8)\n+        mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n+\n+        num_messages = 50\n+\n+        pg = ProtocolGenerator([mb.message_type, mb_ack.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x6768\", mb_ack.message_type: \"0x6768\"},\n+                               participants=[self.alice, self.bob])\n+\n+        random.seed(0)\n+        for i in range(num_messages):\n+            if i % 2 == 0:\n+                source, destination = self.alice, self.bob\n+                data_length = 8\n+            else:\n+                source, destination = self.bob, self.alice\n+                data_length = 16\n+            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** (data_length - 1)), data_length),\n+                                source=source, destination=destination)\n+            pg.generate_message(data=\"\", message_type=mb_ack.message_type, destination=source, source=destination)\n+\n+        #self.save_protocol(\"address_two_participants_with_acks_and_types\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+        address_engine = AddressEngine(ff.hexvectors, ff.participant_indices)\n+        address_dict = address_engine.find_addresses()\n+        self.assertEqual(len(address_dict), 2)\n+        addresses_1 = list(map(util.convert_numbers_to_hex_string, address_dict[0]))\n+        addresses_2 = list(map(util.convert_numbers_to_hex_string, address_dict[1]))\n+        self.assertIn(self.alice.address_hex, addresses_1)\n+        self.assertIn(self.alice.address_hex, addresses_2)\n+        self.assertIn(self.bob.address_hex, addresses_1)\n+        self.assertIn(self.bob.address_hex, addresses_2)\n+\n+        ff.known_participant_addresses.clear()\n+        ff.perform_iteration()\n+        self.assertEqual(len(ff.message_types), 2)\n+        mt = ff.message_types[1]\n+        dst_addr = mt.get_first_label_with_type(FieldType.Function.DST_ADDRESS)\n+        self.assertIsNotNone(dst_addr)\n+        self.assertEqual(dst_addr.start, 40)\n+        self.assertEqual(dst_addr.length, 16)\n+        src_addr = mt.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)\n+        self.assertIsNotNone(src_addr)\n+        self.assertEqual(src_addr.start, 56)\n+        self.assertEqual(src_addr.length, 16)\n+\n+        mt = ff.message_types[0]\n+        dst_addr = mt.get_first_label_with_type(FieldType.Function.DST_ADDRESS)\n+        self.assertIsNotNone(dst_addr)\n+        self.assertEqual(dst_addr.start, 32)\n+        self.assertEqual(dst_addr.length, 16)\n+\n+    def test_three_participants_with_ack(self):\n+        alice = Participant(\"Alice\", address_hex=\"1337\")\n+        bob = Participant(\"Bob\", address_hex=\"4711\")\n+        carl = Participant(\"Carl\", address_hex=\"cafe\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+\n+        mb_ack = MessageTypeBuilder(\"ack\")\n+        mb_ack.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb_ack.add_label(FieldType.Function.SYNC, 16)\n+        mb_ack.add_label(FieldType.Function.LENGTH, 8)\n+        mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n+\n+        pg = ProtocolGenerator([mb.message_type, mb_ack.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a7d\", mb_ack.message_type: \"0x9a7d\"},\n+                               preambles_by_mt={mb.message_type: \"10\" * 8, mb_ack.message_type: \"10\" * 8},\n+                               participants=[alice, bob, carl])\n+\n+        i = -1\n+        while len(pg.protocol.messages) < 20:\n+            i += 1\n+            source = pg.participants[i % len(pg.participants)]\n+            destination = pg.participants[(i + 1) % len(pg.participants)]\n+            if i % 2 == 0:\n+                data_bytes = 8\n+            else:\n+                data_bytes = 16\n+\n+            data = \"\".join(random.choice([\"0\", \"1\"]) for _ in range(data_bytes * 8))\n+            pg.generate_message(data=data, source=source, destination=destination)\n+\n+            if \"ack\" in (msg_type.name for msg_type in pg.protocol.message_types):\n+                pg.generate_message(message_type=1, data=\"\", source=destination, destination=source)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+        ff.known_participant_addresses.clear()\n+        self.assertEqual(len(ff.known_participant_addresses), 0)\n+        ff.run()\n+\n+        # Since there are ACKS in this protocol, the engine must be able to assign the correct participant addresses\n+        # IN CORRECT ORDER!\n+        self.assertEqual(util.convert_numbers_to_hex_string(ff.known_participant_addresses[0]), \"1337\")\n+        self.assertEqual(util.convert_numbers_to_hex_string(ff.known_participant_addresses[1]), \"4711\")\n+        self.assertEqual(util.convert_numbers_to_hex_string(ff.known_participant_addresses[2]), \"cafe\")\n+\n+    def test_protocol_with_acks_and_checksum(self):\n+        proto_file = get_path_for_data_file(\"ack_frames_with_crc.proto.xml\")\n+        protocol = ProtocolAnalyzer(signal=None, filename=proto_file)\n+        protocol.from_xml_file(filename=proto_file, read_bits=True)\n+\n+        self.clear_message_types(protocol.messages)\n+\n+        ff = FormatFinder(protocol.messages)\n+        ff.known_participant_addresses.clear()\n+\n+        ff.run()\n+        self.assertEqual(util.convert_numbers_to_hex_string(ff.known_participant_addresses[0]), \"1337\")\n+        self.assertEqual(util.convert_numbers_to_hex_string(ff.known_participant_addresses[1]), \"4711\")\n+\n+        for mt in ff.message_types:\n+            preamble = mt.get_first_label_with_type(FieldType.Function.PREAMBLE)\n+            self.assertEqual(preamble.start, 0)\n+            self.assertEqual(preamble.length, 16)\n+            sync = mt.get_first_label_with_type(FieldType.Function.SYNC)\n+            self.assertEqual(sync.start, 16)\n+            self.assertEqual(sync.length, 16)\n+            length = mt.get_first_label_with_type(FieldType.Function.LENGTH)\n+            self.assertEqual(length.start, 32)\n+            self.assertEqual(length.length, 8)\n+\n+    def test_address_engine_performance(self):\n+        ff, messages = self.get_format_finder_from_protocol_file(\"35_messages.proto.xml\", return_messages=True)\n+\n+        engine = AddressEngine(ff.hexvectors, ff.participant_indices)\n+        engine.find()\n+\n+    def test_paper_example(self):\n+        alice = Participant(\"Alice\", \"A\")\n+        bob = Participant(\"Bob\", \"B\")\n+        participants = [alice, bob]\n+        msg1 = Message.from_plain_hex_str(\"aabb1234\")\n+        msg1.participant = alice\n+        msg2 = Message.from_plain_hex_str(\"aabb6789\")\n+        msg2.participant = alice\n+        msg3 = Message.from_plain_hex_str(\"bbaa4711\")\n+        msg3.participant = bob\n+        msg4 = Message.from_plain_hex_str(\"bbaa1337\")\n+        msg4.participant = bob\n+\n+        protocol = ProtocolAnalyzer(None)\n+        protocol.messages.extend([msg1, msg2, msg3, msg4])\n+        #self.save_protocol(\"paper_example\", protocol)\n+\n+        bitvectors = FormatFinder.get_bitvectors_from_messages(protocol.messages)\n+        hexvectors = FormatFinder.get_hexvectors(bitvectors)\n+        address_engine = AddressEngine(hexvectors, participant_indices=[participants.index(msg.participant) for msg in\n+                                                                        protocol.messages])\n+\n+    def test_find_common_sub_sequence(self):\n+        from urh.cythonext import awre_util\n+        str1 = \"0612345678\"\n+        str2 = \"0756781234\"\n+\n+        seq1 = np.array(list(map(int, str1)), dtype=np.uint8, order=\"C\")\n+        seq2 = np.array(list(map(int, str2)), dtype=np.uint8, order=\"C\")\n+\n+        indices = awre_util.find_longest_common_sub_sequence_indices(seq1, seq2)\n+        self.assertEqual(len(indices), 2)\n+        for ind in indices:\n+            s = str1[slice(*ind)]\n+            self.assertIn(s, (\"5678\", \"1234\"))\n+            self.assertIn(s, str1)\n+            self.assertIn(s, str2)\n+\n+    def test_find_first_occurrence(self):\n+        from urh.cythonext import awre_util\n+        str1 = \"00\" * 100 + \"1234500012345\" + \"00\" * 100\n+        str2 = \"12345\"\n+\n+        seq1 = np.array(list(map(int, str1)), dtype=np.uint8, order=\"C\")\n+        seq2 = np.array(list(map(int, str2)), dtype=np.uint8, order=\"C\")\n+        indices = awre_util.find_occurrences(seq1, seq2)\n+        self.assertEqual(len(indices), 2)\n+        index = indices[0]\n+        self.assertEqual(str1[index:index + len(str2)], str2)\n+\n+        # Test with ignoring indices\n+        indices = awre_util.find_occurrences(seq1, seq2, array(\"L\", list(range(0, 205))))\n+        self.assertEqual(len(indices), 1)\n+\n+        # Test with ignoring indices\n+        indices = awre_util.find_occurrences(seq1, seq2, array(\"L\", list(range(0, 210))))\n+        self.assertEqual(len(indices), 0)\n+\n+        self.assertEqual(awre_util.find_occurrences(seq1, np.ones(10, dtype=np.uint8)), [])\ndiff --git a\/tests\/awre\/test_awre_preprocessing.py b\/tests\/awre\/test_awre_preprocessing.py\nnew file mode 100644\nindex 0000000..45ad40b\n--- \/dev\/null\n+++ b\/tests\/awre\/test_awre_preprocessing.py\n@@ -0,0 +1,256 @@\n+import random\n+\n+from tests.awre.AWRETestCase import AWRETestCase\n+from urh.awre.FormatFinder import FormatFinder\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.awre.Preprocessor import Preprocessor\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.Message import Message\n+from urh.signalprocessing.Participant import Participant\n+from urh.signalprocessing.ProtocolAnalyzer import ProtocolAnalyzer\n+import numpy as np\n+\n+\n+class TestAWREPreprocessing(AWRETestCase):\n+    def test_very_simple_sync_word_finding(self):\n+        preamble = \"10101010\"\n+        sync = \"1101\"\n+\n+        pg = self.build_protocol_generator(preamble_syncs=[(preamble, sync)],\n+                                           num_messages=(20,),\n+                                           data=(lambda i: 10 * i,))\n+\n+        preprocessor = Preprocessor([np.array(msg.plain_bits, dtype=np.uint8) for msg in pg.protocol.messages])\n+\n+        possible_syncs = preprocessor.find_possible_syncs()\n+        #self.save_protocol(\"very_simple_sync_test\", pg)\n+        self.assertGreaterEqual(len(possible_syncs), 1)\n+        self.assertEqual(preprocessor.find_possible_syncs()[0], sync)\n+\n+    def test_simple_sync_word_finding(self):\n+        preamble = \"10101010\"\n+        sync = \"1001\"\n+\n+        pg = self.build_protocol_generator(preamble_syncs=[(preamble, sync), (preamble + \"1010\", sync)],\n+                                           num_messages=(20, 5),\n+                                           data=(lambda i: 10 * i, lambda i: 22 * i))\n+\n+        preprocessor = Preprocessor([np.array(msg.plain_bits, dtype=np.uint8) for msg in pg.protocol.messages])\n+\n+        possible_syncs = preprocessor.find_possible_syncs()\n+        #self.save_protocol(\"simple_sync_test\", pg)\n+        self.assertGreaterEqual(len(possible_syncs), 1)\n+        self.assertEqual(preprocessor.find_possible_syncs()[0], sync)\n+\n+    def test_sync_word_finding_odd_preamble(self):\n+        preamble = \"0101010\"\n+        sync = \"1101\"\n+        pg = self.build_protocol_generator(preamble_syncs=[(preamble, sync), (preamble + \"10\", sync)],\n+                                           num_messages=(20, 5),\n+                                           data=(lambda i: 10 * i, lambda i: i))\n+\n+        # If we have a odd preamble length, the last bit of the preamble is counted to the sync\n+        preprocessor = Preprocessor([np.array(msg.plain_bits, dtype=np.uint8) for msg in pg.protocol.messages])\n+        possible_syncs = preprocessor.find_possible_syncs()\n+\n+        #self.save_protocol(\"odd_preamble\", pg)\n+        self.assertEqual(preamble[-1] + sync[:-1], possible_syncs[0])\n+\n+    def test_sync_word_finding_special_preamble(self):\n+        preamble = \"111001110011100\"\n+        sync = \"0110\"\n+        pg = self.build_protocol_generator(preamble_syncs=[(preamble, sync), (preamble + \"10\", sync)],\n+                                           num_messages=(20, 5),\n+                                           data=(lambda i: 10 * i, lambda i: i))\n+\n+        # If we have a odd preamble length, the last bit of the preamble is counted to the sync\n+        preprocessor = Preprocessor([np.array(msg.plain_bits, dtype=np.uint8) for msg in pg.protocol.messages])\n+        possible_syncs = preprocessor.find_possible_syncs()\n+\n+        #self.save_protocol(\"special_preamble\", pg)\n+        self.assertEqual(sync, possible_syncs[0])\n+\n+    def test_sync_word_finding_errored_preamble(self):\n+        preamble = \"00010101010\"  # first bits are wrong\n+        sync = \"0110\"\n+        pg = self.build_protocol_generator(preamble_syncs=[(preamble, sync), (preamble + \"10\", sync)],\n+                                           num_messages=(20, 5),\n+                                           data=(lambda i: 10 * i, lambda i: i))\n+\n+        # If we have a odd preamble length, the last bit of the preamble is counted to the sync\n+        preprocessor = Preprocessor([np.array(msg.plain_bits, dtype=np.uint8) for msg in pg.protocol.messages])\n+        possible_syncs = preprocessor.find_possible_syncs()\n+\n+        #self.save_protocol(\"errored_preamble\", pg)\n+        self.assertIn(preamble[-1] + sync[:-1], possible_syncs)\n+\n+    def test_sync_word_finding_with_two_sync_words(self):\n+        preamble = \"0xaaaa\"\n+        sync1, sync2 = \"0x1234\", \"0xcafe\"\n+        pg = self.build_protocol_generator(preamble_syncs=[(preamble, sync1), (preamble, sync2)],\n+                                           num_messages=(15, 10),\n+                                           data=(lambda i: 12 * i, lambda i: 16 * i))\n+        preprocessor = Preprocessor([np.array(msg.plain_bits, dtype=np.uint8) for msg in pg.protocol.messages])\n+        possible_syncs = preprocessor.find_possible_syncs()\n+        #self.save_protocol(\"two_syncs\", pg)\n+        self.assertGreaterEqual(len(possible_syncs), 2)\n+        self.assertIn(ProtocolGenerator.to_bits(sync1), possible_syncs)\n+        self.assertIn(ProtocolGenerator.to_bits(sync2), possible_syncs)\n+\n+    def test_multiple_sync_words(self):\n+        hex_messages = [\n+            \"aaS1234\",\n+            \"aaScafe\",\n+            \"aaSdead\",\n+            \"aaSbeef\",\n+        ]\n+\n+        for i in range(1, 256):\n+            messages = []\n+            sync = \"{0:02x}\".format(i)\n+            if sync.startswith(\"a\"):\n+                continue\n+\n+            for msg in hex_messages:\n+                messages.append(Message.from_plain_hex_str(msg.replace(\"S\", sync)))\n+\n+            for i in range(1, len(messages)):\n+                messages[i].message_type = messages[0].message_type\n+\n+            ff = FormatFinder(messages)\n+            ff.run()\n+\n+            self.assertEqual(len(ff.message_types), 1, msg=sync)\n+\n+            preamble = ff.message_types[0].get_first_label_with_type(FieldType.Function.PREAMBLE)\n+            self.assertEqual(preamble.start, 0, msg=sync)\n+            self.assertEqual(preamble.length, 8, msg=sync)\n+\n+            sync = ff.message_types[0].get_first_label_with_type(FieldType.Function.SYNC)\n+            self.assertEqual(sync.start, 8, msg=sync)\n+            self.assertEqual(sync.length, 8, msg=sync)\n+\n+    def test_sync_word_finding_varying_message_length(self):\n+        hex_messages = [\n+            \"aaaa9a7d0f1337471100009a44ebdd13517bf9\",\n+            \"aaaa9a7d4747111337000134a4473c002b909630b11df37e34728c79c60396176aff2b5384e82f31511581d0cbb4822ad1b6734e2372ad5cf4af4c9d6b067e5f7ec359ec443c3b5ddc7a9e\",\n+            \"aaaa9a7d0f13374711000205ee081d26c86b8c\",\n+            \"aaaa9a7d474711133700037cae4cda789885f88f5fb29adc9acf954cb2850b9d94e7f3b009347c466790e89f2bcd728987d4670690861bbaa120f71f14d4ef8dc738a6d7c30e7d2143c267\",\n+            \"aaaa9a7d0f133747110004c2906142300427f3\"\n+        ]\n+\n+        messages = [Message.from_plain_hex_str(hex_msg) for hex_msg in hex_messages]\n+        for i in range(1, len(messages)):\n+            messages[i].message_type = messages[0].message_type\n+\n+        ff = FormatFinder(messages)\n+        ff.run()\n+\n+        self.assertEqual(len(ff.message_types), 1)\n+        preamble = ff.message_types[0].get_first_label_with_type(FieldType.Function.PREAMBLE)\n+        self.assertEqual(preamble.start, 0)\n+        self.assertEqual(preamble.length, 16)\n+\n+        sync = ff.message_types[0].get_first_label_with_type(FieldType.Function.SYNC)\n+        self.assertEqual(sync.start, 16)\n+        self.assertEqual(sync.length, 16)\n+\n+    def test_sync_word_finding_common_prefix(self):\n+        \"\"\"\n+        Messages are very similiar (odd and even ones are the same)\n+        However, they do not have two different sync words!\n+        The algorithm needs to check for a common prefix of the two found sync words\n+\n+        :return:\n+        \"\"\"\n+        sync = \"0x1337\"\n+        num_messages = 10\n+\n+        alice = Participant(\"Alice\", address_hex=\"dead01\")\n+        bob = Participant(\"Bob\", address_hex=\"beef24\")\n+\n+        mb = MessageTypeBuilder(\"protocol_with_one_message_type\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 72)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 24)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 24)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x1337\"},\n+                               preambles_by_mt={mb.message_type: \"10\" * 36},\n+                               participants=[alice, bob])\n+\n+        random.seed(0)\n+        for i in range(num_messages):\n+            if i % 2 == 0:\n+                source, destination = alice, bob\n+                data_length = 8\n+            else:\n+                source, destination = bob, alice\n+                data_length = 16\n+            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** (data_length - 1)), data_length),\n+                                source=source, destination=destination)\n+\n+        preprocessor = Preprocessor([np.array(msg.plain_bits, dtype=np.uint8) for msg in pg.protocol.messages])\n+        possible_syncs = preprocessor.find_possible_syncs()\n+        #self.save_protocol(\"sync_by_common_prefix\", pg)\n+        self.assertEqual(len(possible_syncs), 1)\n+\n+        # +0000 is okay, because this will get fixed by correction in FormatFinder\n+        self.assertIn(possible_syncs[0], [ProtocolGenerator.to_bits(sync), ProtocolGenerator.to_bits(sync) + \"0000\"])\n+\n+    def test_with_given_preamble_and_sync(self):\n+        preamble = \"10101010\"\n+        sync = \"10011\"\n+        pg = self.build_protocol_generator(preamble_syncs=[(preamble, sync)],\n+                                           num_messages=(20,),\n+                                           data=(lambda i: 10 * i,))\n+\n+        # If we have a odd preamble length, the last bit of the preamble is counted to the sync\n+        preprocessor = Preprocessor([np.array(msg.plain_bits, dtype=np.uint8) for msg in pg.protocol.messages],\n+                                    existing_message_types={i: msg.message_type for i, msg in\n+                                                            enumerate(pg.protocol.messages)})\n+        preamble_starts, preamble_lengths, sync_len = preprocessor.preprocess()\n+\n+        #self.save_protocol(\"given_preamble\", pg)\n+\n+        self.assertTrue(all(preamble_start == 0 for preamble_start in preamble_starts))\n+        self.assertTrue(all(preamble_length == len(preamble) for preamble_length in preamble_lengths))\n+        self.assertEqual(sync_len, len(sync))\n+\n+    @staticmethod\n+    def build_protocol_generator(preamble_syncs: list, num_messages: tuple, data: tuple) -> ProtocolGenerator:\n+        message_types = []\n+        preambles_by_mt = dict()\n+        syncs_by_mt = dict()\n+\n+        assert len(preamble_syncs) == len(num_messages) == len(data)\n+\n+        for i, (preamble, sync_word) in enumerate(preamble_syncs):\n+            assert isinstance(preamble, str)\n+            assert isinstance(sync_word, str)\n+\n+            preamble, sync_word = map(ProtocolGenerator.to_bits, (preamble, sync_word))\n+\n+            mb = MessageTypeBuilder(\"message type #{0}\".format(i))\n+            mb.add_label(FieldType.Function.PREAMBLE, len(preamble))\n+            mb.add_label(FieldType.Function.SYNC, len(sync_word))\n+\n+            message_types.append(mb.message_type)\n+            preambles_by_mt[mb.message_type] = preamble\n+            syncs_by_mt[mb.message_type] = sync_word\n+\n+        pg = ProtocolGenerator(message_types, preambles_by_mt=preambles_by_mt, syncs_by_mt=syncs_by_mt)\n+        for i, msg_type in enumerate(message_types):\n+            for j in range(num_messages[i]):\n+                if callable(data[i]):\n+                    msg_data = pg.decimal_to_bits(data[i](j), num_bits=8)\n+                else:\n+                    msg_data = data[i]\n+\n+                pg.generate_message(message_type=msg_type, data=msg_data)\n+\n+        return pg\ndiff --git a\/tests\/awre\/test_awre_real_protocols.py b\/tests\/awre\/test_awre_real_protocols.py\nnew file mode 100644\nindex 0000000..944c5bc\n--- \/dev\/null\n+++ b\/tests\/awre\/test_awre_real_protocols.py\n@@ -0,0 +1,149 @@\n+from tests.awre.AWRETestCase import AWRETestCase\n+from tests.utils_testing import get_path_for_data_file\n+from urh.awre.CommonRange import CommonRange\n+from urh.awre.FormatFinder import FormatFinder\n+from urh.awre.Preprocessor import Preprocessor\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.Message import Message\n+from urh.signalprocessing.MessageType import MessageType\n+from urh.signalprocessing.Participant import Participant\n+from urh.signalprocessing.ProtocolAnalyzer import ProtocolAnalyzer\n+import numpy as np\n+\n+class TestAWRERealProtocols(AWRETestCase):\n+    def setUp(self):\n+        super().setUp()\n+        alice = Participant(\"Alice\", \"A\")\n+        bob = Participant(\"Bob\", \"B\")\n+        self.participants = [alice, bob]\n+\n+    def test_format_finding_enocean(self):\n+        enocean_protocol = ProtocolAnalyzer(None)\n+        with open(get_path_for_data_file(\"enocean_bits.txt\")) as f:\n+            for line in f:\n+                enocean_protocol.messages.append(Message.from_plain_bits_str(line.replace(\"\\n\", \"\")))\n+                enocean_protocol.messages[-1].message_type = enocean_protocol.default_message_type\n+\n+        ff = FormatFinder(enocean_protocol.messages)\n+        ff.perform_iteration()\n+\n+        message_types = ff.message_types\n+        self.assertEqual(len(message_types), 1)\n+\n+        preamble = message_types[0].get_first_label_with_type(FieldType.Function.PREAMBLE)\n+        self.assertEqual(preamble.start, 0)\n+        self.assertEqual(preamble.length, 8)\n+\n+        sync = message_types[0].get_first_label_with_type(FieldType.Function.SYNC)\n+        self.assertEqual(sync.start, 8)\n+        self.assertEqual(sync.length, 4)\n+\n+        checksum = message_types[0].get_first_label_with_type(FieldType.Function.CHECKSUM)\n+        self.assertEqual(checksum.start, 56)\n+        self.assertEqual(checksum.length, 4)\n+\n+        self.assertIsNone(message_types[0].get_first_label_with_type(FieldType.Function.SRC_ADDRESS))\n+        self.assertIsNone(message_types[0].get_first_label_with_type(FieldType.Function.DST_ADDRESS))\n+        self.assertIsNone(message_types[0].get_first_label_with_type(FieldType.Function.LENGTH))\n+        self.assertIsNone(message_types[0].get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER))\n+\n+    def test_format_finding_rwe(self):\n+        ff, messages = self.get_format_finder_from_protocol_file(\"rwe.proto.xml\", return_messages=True)\n+        ff.run()\n+\n+        sync1, sync2 = \"0x9a7d9a7d\", \"0x67686768\"\n+\n+        preprocessor = Preprocessor([np.array(msg.plain_bits, dtype=np.uint8) for msg in messages])\n+        possible_syncs = preprocessor.find_possible_syncs()\n+        self.assertIn(ProtocolGenerator.to_bits(sync1), possible_syncs)\n+        self.assertIn(ProtocolGenerator.to_bits(sync2), possible_syncs)\n+\n+        ack_messages = (3, 5, 7, 9, 11, 13, 15, 17, 20)\n+        ack_message_type = next(mt for mt, messages in ff.existing_message_types.items() if ack_messages[0] in messages)\n+        self.assertTrue(all(ack_msg in ff.existing_message_types[ack_message_type] for ack_msg in ack_messages))\n+\n+        for mt in ff.message_types:\n+            preamble = mt.get_first_label_with_type(FieldType.Function.PREAMBLE)\n+            self.assertEqual(preamble.start, 0)\n+            self.assertEqual(preamble.length, 32)\n+\n+            sync = mt.get_first_label_with_type(FieldType.Function.SYNC)\n+            self.assertEqual(sync.start, 32)\n+            self.assertEqual(sync.length, 32)\n+\n+            length = mt.get_first_label_with_type(FieldType.Function.LENGTH)\n+            self.assertEqual(length.start, 64)\n+            self.assertEqual(length.length, 8)\n+\n+            dst = mt.get_first_label_with_type(FieldType.Function.DST_ADDRESS)\n+            self.assertEqual(dst.length, 24)\n+\n+            if mt == ack_message_type or 1 in ff.existing_message_types[mt]:\n+                self.assertEqual(dst.start, 72)\n+            else:\n+                self.assertEqual(dst.start, 88)\n+\n+            if mt != ack_message_type and 1 not in ff.existing_message_types[mt]:\n+                src = mt.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)\n+                self.assertEqual(src.start, 112)\n+                self.assertEqual(src.length, 24)\n+            elif 1 in ff.existing_message_types[mt]:\n+                # long ack\n+                src = mt.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)\n+                self.assertEqual(src.start, 96)\n+                self.assertEqual(src.length, 24)\n+\n+            crc = mt.get_first_label_with_type(FieldType.Function.CHECKSUM)\n+            self.assertIsNotNone(crc)\n+\n+    def test_homematic(self):\n+        proto_file = get_path_for_data_file(\"homematic.proto.xml\")\n+        protocol = ProtocolAnalyzer(signal=None, filename=proto_file)\n+        protocol.message_types = []\n+        protocol.from_xml_file(filename=proto_file, read_bits=True)\n+        # prevent interfering with preassinged labels\n+        protocol.message_types = [MessageType(\"Default\")]\n+\n+        participants = sorted({msg.participant for msg in protocol.messages})\n+\n+        self.clear_message_types(protocol.messages)\n+        ff = FormatFinder(protocol.messages, participants=participants)\n+        ff.known_participant_addresses.clear()\n+        ff.perform_iteration()\n+\n+        self.assertGreater(len(ff.message_types), 0)\n+\n+        for i, message_type in enumerate(ff.message_types):\n+            preamble = message_type.get_first_label_with_type(FieldType.Function.PREAMBLE)\n+            self.assertEqual(preamble.start, 0)\n+            self.assertEqual(preamble.length, 32)\n+\n+            sync = message_type.get_first_label_with_type(FieldType.Function.SYNC)\n+            self.assertEqual(sync.start, 32)\n+            self.assertEqual(sync.length, 32)\n+\n+            length = message_type.get_first_label_with_type(FieldType.Function.LENGTH)\n+            self.assertEqual(length.start, 64)\n+            self.assertEqual(length.length, 8)\n+\n+            seq = message_type.get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER)\n+            self.assertEqual(seq.start, 72)\n+            self.assertEqual(seq.length, 8)\n+\n+            src = message_type.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)\n+            self.assertEqual(src.start, 96)\n+            self.assertEqual(src.length, 24)\n+\n+            dst = message_type.get_first_label_with_type(FieldType.Function.DST_ADDRESS)\n+            self.assertEqual(dst.start, 120)\n+            self.assertEqual(dst.length, 24)\n+\n+            checksum = message_type.get_first_label_with_type(FieldType.Function.CHECKSUM)\n+            self.assertEqual(checksum.length, 16)\n+            self.assertIn(\"CC1101\", checksum.checksum.caption)\n+\n+            for msg_index in ff.existing_message_types[message_type]:\n+                msg_len = len(protocol.messages[msg_index])\n+                self.assertEqual(checksum.start, msg_len-16)\n+                self.assertEqual(checksum.end, msg_len)\ndiff --git a\/tests\/awre\/test_checksum_engine.py b\/tests\/awre\/test_checksum_engine.py\nnew file mode 100644\nindex 0000000..97cd31e\n--- \/dev\/null\n+++ b\/tests\/awre\/test_checksum_engine.py\n@@ -0,0 +1,102 @@\n+import array\n+\n+import numpy as np\n+\n+from tests.awre.AWRETestCase import AWRETestCase\n+from urh.awre.CommonRange import ChecksumRange\n+from urh.awre.FormatFinder import FormatFinder\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.awre.engines.ChecksumEngine import ChecksumEngine\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.util import util\n+from urh.util.GenericCRC import GenericCRC\n+from urh.cythonext import util as c_util\n+\n+class TestChecksumEngine(AWRETestCase):\n+    def test_find_crc8(self):\n+        messages = [\"aabbcc7d\", \"abcdee24\", \"dacafe33\"]\n+        message_bits = [np.array(msg, dtype=np.uint8) for msg in map(util.hex2bit, messages)]\n+\n+        checksum_engine = ChecksumEngine(message_bits, n_gram_length=8)\n+        result = checksum_engine.find()\n+        self.assertEqual(len(result), 1)\n+        checksum_range = result[0]  # type: ChecksumRange\n+        self.assertEqual(checksum_range.length, 8)\n+        self.assertEqual(checksum_range.start, 24)\n+\n+        reference = GenericCRC()\n+        reference.set_polynomial_from_hex(\"0x07\")\n+        self.assertEqual(checksum_range.crc.polynomial, reference.polynomial)\n+\n+        self.assertEqual(checksum_range.message_indices, {0, 1, 2})\n+\n+    def test_find_crc16(self):\n+        messages = [\"12345678347B\", \"abcdefffABBD\", \"cafe1337CE12\"]\n+        message_bits = [np.array(msg, dtype=np.uint8) for msg in map(util.hex2bit, messages)]\n+\n+        checksum_engine = ChecksumEngine(message_bits, n_gram_length=8)\n+        result = checksum_engine.find()\n+        self.assertEqual(len(result), 1)\n+        checksum_range = result[0]  # type: ChecksumRange\n+        self.assertEqual(checksum_range.start, 32)\n+        self.assertEqual(checksum_range.length, 16)\n+\n+        reference = GenericCRC()\n+        reference.set_polynomial_from_hex(\"0x8005\")\n+        self.assertEqual(checksum_range.crc.polynomial, reference.polynomial)\n+\n+        self.assertEqual(checksum_range.message_indices, {0, 1, 2})\n+\n+    def test_find_crc32(self):\n+        messages = [\"deadcafe5D7F3F5A\", \"47111337E3319242\", \"beefaffe0DCD0E15\"]\n+        message_bits = [np.array(msg, dtype=np.uint8) for msg in map(util.hex2bit, messages)]\n+\n+        checksum_engine = ChecksumEngine(message_bits, n_gram_length=8)\n+        result = checksum_engine.find()\n+        self.assertEqual(len(result), 1)\n+        checksum_range = result[0]  # type: ChecksumRange\n+        self.assertEqual(checksum_range.start, 32)\n+        self.assertEqual(checksum_range.length, 32)\n+\n+        reference = GenericCRC()\n+        reference.set_polynomial_from_hex(\"0x04C11DB7\")\n+        self.assertEqual(checksum_range.crc.polynomial, reference.polynomial)\n+\n+        self.assertEqual(checksum_range.message_indices, {0, 1, 2})\n+\n+    def test_find_generated_crc16(self):\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.DATA, 32)\n+        mb.add_checksum_label(16, GenericCRC.from_standard_checksum(\"CRC16 CCITT\"))\n+\n+        mb2 = MessageTypeBuilder(\"data2\")\n+        mb2.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb2.add_label(FieldType.Function.SYNC, 16)\n+        mb2.add_label(FieldType.Function.LENGTH, 8)\n+        mb2.add_label(FieldType.Function.DATA, 16)\n+\n+        mb2.add_checksum_label(16, GenericCRC.from_standard_checksum(\"CRC16 CCITT\"))\n+\n+        pg = ProtocolGenerator([mb.message_type, mb2.message_type], syncs_by_mt={mb.message_type: \"0x1234\", mb2.message_type: \"0x1234\"})\n+\n+        num_messages = 5\n+\n+        for i in range(num_messages):\n+            pg.generate_message(data=\"{0:032b}\".format(i), message_type=mb.message_type)\n+            pg.generate_message(data=\"{0:016b}\".format(i), message_type=mb2.message_type)\n+\n+        #self.save_protocol(\"crc16_test\", pg)\n+        self.clear_message_types(pg.protocol.messages)\n+\n+        ff = FormatFinder(pg.protocol.messages)\n+        ff.run()\n+\n+        self.assertEqual(len(ff.message_types), 2)\n+        for mt in ff.message_types:\n+            checksum_label = mt.get_first_label_with_type(FieldType.Function.CHECKSUM)\n+            self.assertEqual(checksum_label.length, 16)\n+            self.assertEqual(checksum_label.checksum.caption, \"CRC16 CCITT\")\ndiff --git a\/tests\/awre\/test_common_range.py b\/tests\/awre\/test_common_range.py\nnew file mode 100644\nindex 0000000..2d65178\n--- \/dev\/null\n+++ b\/tests\/awre\/test_common_range.py\n@@ -0,0 +1,35 @@\n+import unittest\n+\n+from urh.awre.CommonRange import CommonRange\n+\n+\n+class TestCommonRange(unittest.TestCase):\n+    def test_ensure_not_overlaps(self):\n+        test_range = CommonRange(start=4, length=8, value=\"12345678\")\n+        self.assertEqual(test_range.end, 11)\n+\n+        # no overlapping\n+        self.assertEqual(test_range, test_range.ensure_not_overlaps(0, 3)[0])\n+        self.assertEqual(test_range, test_range.ensure_not_overlaps(20, 24)[0])\n+\n+        # overlapping on left\n+        result = test_range.ensure_not_overlaps(2, 6)[0]\n+        self.assertEqual(result.start, 6)\n+        self.assertEqual(result.end, 11)\n+\n+        # overlapping on right\n+        result = test_range.ensure_not_overlaps(6, 14)[0]\n+        self.assertEqual(result.start, 4)\n+        self.assertEqual(result.end, 5)\n+\n+        # full overlapping\n+        self.assertEqual(len(test_range.ensure_not_overlaps(3, 14)), 0)\n+\n+        # overlapping in the middle\n+        result = test_range.ensure_not_overlaps(6, 9)\n+        self.assertEqual(len(result), 2)\n+        left, right = result[0], result[1]\n+        self.assertEqual(left.start, 4)\n+        self.assertEqual(left.end, 5)\n+        self.assertEqual(right.start, 10)\n+        self.assertEqual(right.end, 11)\ndiff --git a\/tests\/awre\/test_format_finder.py b\/tests\/awre\/test_format_finder.py\nnew file mode 100644\nindex 0000000..191bc74\n--- \/dev\/null\n+++ b\/tests\/awre\/test_format_finder.py\n@@ -0,0 +1,102 @@\n+import numpy as np\n+\n+from tests.awre.AWRETestCase import AWRETestCase\n+from urh.awre.CommonRange import CommonRange, CommonRangeContainer\n+from urh.awre.FormatFinder import FormatFinder\n+\n+\n+class TestFormatFinder(AWRETestCase):\n+    def test_create_message_types_1(self):\n+        rng1 = CommonRange(0, 8, \"1\" * 8, score=1, field_type=\"Length\")\n+        rng1.message_indices = {0, 1, 2}\n+        rng2 = CommonRange(8, 8, \"1\" * 8, score=1, field_type=\"Address\")\n+        rng2.message_indices = {0, 1, 2}\n+\n+        message_types = FormatFinder.create_common_range_containers({rng1, rng2})\n+        self.assertEqual(len(message_types), 1)\n+\n+        expected = CommonRangeContainer([rng1, rng2], message_indices={0, 1, 2})\n+        self.assertEqual(message_types[0], expected)\n+\n+    def test_create_message_types_2(self):\n+        rng1 = CommonRange(0, 8, \"1\" * 8, score=1, field_type=\"Length\")\n+        rng1.message_indices = {0, 2, 4, 6, 8, 12}\n+        rng2 = CommonRange(8, 8, \"1\" * 8, score=1, field_type=\"Address\")\n+        rng2.message_indices = {1, 2, 3, 4, 5, 12}\n+        rng3 = CommonRange(16, 8, \"1\" * 8, score=1, field_type=\"Seq\")\n+        rng3.message_indices = {1, 3, 5, 7, 12}\n+\n+        message_types = FormatFinder.create_common_range_containers({rng1, rng2, rng3})\n+        expected1 = CommonRangeContainer([rng1], message_indices={0, 6, 8})\n+        expected2 = CommonRangeContainer([rng1, rng2], message_indices={2, 4})\n+        expected3 = CommonRangeContainer([rng1, rng2, rng3], message_indices={12})\n+        expected4 = CommonRangeContainer([rng2, rng3], message_indices={1, 3, 5})\n+        expected5 = CommonRangeContainer([rng3], message_indices={7})\n+\n+        self.assertEqual(len(message_types), 5)\n+\n+        self.assertIn(expected1, message_types)\n+        self.assertIn(expected2, message_types)\n+        self.assertIn(expected3, message_types)\n+        self.assertIn(expected4, message_types)\n+        self.assertIn(expected5, message_types)\n+\n+    def test_retransform_message_indices(self):\n+        sync_ends = np.array([12, 12, 12, 14, 14])\n+\n+        rng = CommonRange(0, 8, \"1\" * 8, score=1, field_type=\"length\", message_indices={0, 1, 2, 3, 4})\n+        retransformed_ranges = FormatFinder.retransform_message_indices([rng], [0, 1, 2, 3, 4], sync_ends)\n+\n+        # two different sync ends\n+        self.assertEqual(len(retransformed_ranges), 2)\n+\n+        expected1 = CommonRange(12, 8, \"1\" * 8, score=1, field_type=\"length\", message_indices={0, 1, 2})\n+        expected2 = CommonRange(14, 8, \"1\" * 8, score=1, field_type=\"length\", message_indices={3, 4})\n+\n+        self.assertIn(expected1, retransformed_ranges)\n+        self.assertIn(expected2, retransformed_ranges)\n+\n+    def test_handle_no_overlapping_conflict(self):\n+        rng1 = CommonRange(0, 8, \"1\" * 8, score=1, field_type=\"Length\")\n+        rng1.message_indices = {0, 1, 2}\n+        rng2 = CommonRange(8, 8, \"1\" * 8, score=1, field_type=\"Address\")\n+        rng2.message_indices = {0, 1, 2}\n+\n+        container = CommonRangeContainer([rng1, rng2], message_indices={0, 1, 2})\n+\n+        # no conflict\n+        result = FormatFinder.handle_overlapping_conflict([container])\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(len(result[0]), 2)\n+        self.assertIn(rng1, result[0])\n+        self.assertEqual(result[0].message_indices, {0, 1, 2})\n+        self.assertIn(rng2, result[0])\n+\n+    def test_handle_easy_overlapping_conflict(self):\n+        # Easy conflict: First Label has higher score\n+        rng1 = CommonRange(8, 8, \"1\" * 8, score=1, field_type=\"Length\")\n+        rng1.message_indices = {0, 1, 2}\n+        rng2 = CommonRange(8, 8, \"1\" * 8, score=0.8, field_type=\"Address\")\n+        rng2.message_indices = {0, 1, 2}\n+\n+        container = CommonRangeContainer([rng1, rng2], message_indices={0, 1, 2})\n+        result = FormatFinder.handle_overlapping_conflict([container])\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(len(result[0]), 1)\n+        self.assertIn(rng1, result[0])\n+        self.assertEqual(result[0].message_indices, {0, 1, 2})\n+\n+    def test_handle_medium_overlapping_conflict(self):\n+        rng1 = CommonRange(8, 8, \"1\" * 8, score=1, field_type=\"Length\")\n+        rng2 = CommonRange(4, 10, \"1\" * 8, score=0.8, field_type=\"Address\")\n+        rng3 = CommonRange(15, 20, \"1\" * 8, score=1, field_type=\"Seq\")\n+        rng4 = CommonRange(60, 80, \"1\" * 8, score=0.8, field_type=\"Type\")\n+        rng5 = CommonRange(70, 90, \"1\" * 8, score=0.9, field_type=\"Data\")\n+\n+        container = CommonRangeContainer([rng1, rng2, rng3, rng4, rng5])\n+        result = FormatFinder.handle_overlapping_conflict([container])\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(len(result[0]), 3)\n+        self.assertIn(rng1, result[0])\n+        self.assertIn(rng3, result[0])\n+        self.assertIn(rng5, result[0])\ndiff --git a\/tests\/awre\/test_generated_protocols.py b\/tests\/awre\/test_generated_protocols.py\nnew file mode 100644\nindex 0000000..0aa055b\n--- \/dev\/null\n+++ b\/tests\/awre\/test_generated_protocols.py\n@@ -0,0 +1,236 @@\n+from tests.awre.AWRETestCase import AWRETestCase\n+from urh.awre import AutoAssigner\n+from urh.awre.FormatFinder import FormatFinder\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.awre.Preprocessor import Preprocessor\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.Participant import Participant\n+from urh.util import util\n+\n+\n+class TestGeneratedProtocols(AWRETestCase):\n+    def __check_addresses(self, messages, format_finder, known_participant_addresses):\n+        \"\"\"\n+        Use the AutoAssigner used also in main GUI to test assigned participant addresses to get same results\n+        as in main program and not rely on cache of FormatFinder, because values there might be false\n+        but SRC address labels still on right position which is the basis for Auto Assigner\n+\n+        :param messages:\n+        :param format_finder:\n+        :param known_participant_addresses:\n+        :return:\n+        \"\"\"\n+\n+        for msg_type, indices in format_finder.existing_message_types.items():\n+            for i in indices:\n+                messages[i].message_type = msg_type\n+\n+        participants = list(set(m.participant for m in messages))\n+        for p in participants:\n+            p.address_hex = \"\"\n+        AutoAssigner.auto_assign_participant_addresses(messages, participants)\n+\n+        for i in range(len(participants)):\n+            self.assertIn(participants[i].address_hex,\n+                          list(map(util.convert_numbers_to_hex_string, known_participant_addresses.values())),\n+                          msg=\" [ \" + \" \".join(p.address_hex for p in participants) + \" ]\")\n+\n+    def test_without_preamble(self):\n+        alice = Participant(\"Alice\", address_hex=\"24\")\n+        broadcast = Participant(\"Broadcast\", address_hex=\"ff\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 8)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x8e88\"},\n+                               preambles_by_mt={mb.message_type: \"10\" * 8},\n+                               participants=[alice, broadcast])\n+\n+        for i in range(20):\n+            data_bits = 16 if i % 2 == 0 else 32\n+            source = pg.participants[i % 2]\n+            destination = pg.participants[(i + 1) % 2]\n+            pg.generate_message(data=\"1010\" * (data_bits \/\/ 4), source=source, destination=destination)\n+\n+        #self.save_protocol(\"without_preamble\", pg)\n+        self.clear_message_types(pg.messages)\n+        ff = FormatFinder(pg.messages)\n+        ff.known_participant_addresses.clear()\n+\n+        ff.run()\n+        self.assertEqual(len(ff.message_types), 1)\n+\n+        mt = ff.message_types[0]\n+        sync = mt.get_first_label_with_type(FieldType.Function.SYNC)\n+        self.assertEqual(sync.start, 0)\n+        self.assertEqual(sync.length, 16)\n+\n+        length = mt.get_first_label_with_type(FieldType.Function.LENGTH)\n+        self.assertEqual(length.start, 16)\n+        self.assertEqual(length.length, 8)\n+\n+        dst = mt.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)\n+        self.assertEqual(dst.start, 24)\n+        self.assertEqual(dst.length, 8)\n+\n+        seq = mt.get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER)\n+        self.assertEqual(seq.start, 32)\n+        self.assertEqual(seq.length, 8)\n+\n+    def test_without_preamble_random_data(self):\n+        ff = self.get_format_finder_from_protocol_file(\"without_ack_random_data.proto.xml\")\n+        ff.run()\n+\n+        self.assertEqual(len(ff.message_types), 1)\n+\n+        mt = ff.message_types[0]\n+        sync = mt.get_first_label_with_type(FieldType.Function.SYNC)\n+        self.assertEqual(sync.start, 0)\n+        self.assertEqual(sync.length, 16)\n+\n+        length = mt.get_first_label_with_type(FieldType.Function.LENGTH)\n+        self.assertEqual(length.start, 16)\n+        self.assertEqual(length.length, 8)\n+\n+        dst = mt.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)\n+        self.assertEqual(dst.start, 24)\n+        self.assertEqual(dst.length, 8)\n+\n+        seq = mt.get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER)\n+        self.assertEqual(seq.start, 32)\n+        self.assertEqual(seq.length, 8)\n+\n+    def test_without_preamble_random_data2(self):\n+        ff = self.get_format_finder_from_protocol_file(\"without_ack_random_data2.proto.xml\")\n+        ff.run()\n+\n+        self.assertEqual(len(ff.message_types), 1)\n+\n+        mt = ff.message_types[0]\n+        sync = mt.get_first_label_with_type(FieldType.Function.SYNC)\n+        self.assertEqual(sync.start, 0)\n+        self.assertEqual(sync.length, 16)\n+\n+        length = mt.get_first_label_with_type(FieldType.Function.LENGTH)\n+        self.assertEqual(length.start, 16)\n+        self.assertEqual(length.length, 8)\n+\n+        dst = mt.get_first_label_with_type(FieldType.Function.SRC_ADDRESS)\n+        self.assertEqual(dst.start, 24)\n+        self.assertEqual(dst.length, 8)\n+\n+        seq = mt.get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER)\n+        self.assertEqual(seq.start, 32)\n+        self.assertEqual(seq.length, 8)\n+\n+    def test_with_checksum(self):\n+        ff = self.get_format_finder_from_protocol_file(\"with_checksum.proto.xml\", clear_participant_addresses=False)\n+        known_participant_addresses = ff.known_participant_addresses.copy()\n+        ff.known_participant_addresses.clear()\n+        ff.run()\n+\n+        self.assertIn(known_participant_addresses[0].tostring(),\n+                      list(map(bytes, ff.known_participant_addresses.values())))\n+        self.assertIn(known_participant_addresses[1].tostring(),\n+                      list(map(bytes, ff.known_participant_addresses.values())))\n+\n+        self.assertEqual(len(ff.message_types), 3)\n+\n+    def test_with_only_one_address(self):\n+        ff = self.get_format_finder_from_protocol_file(\"only_one_address.proto.xml\", clear_participant_addresses=False)\n+        known_participant_addresses = ff.known_participant_addresses.copy()\n+        ff.known_participant_addresses.clear()\n+\n+        ff.run()\n+\n+        self.assertIn(known_participant_addresses[0].tostring(),\n+                      list(map(bytes, ff.known_participant_addresses.values())))\n+        self.assertIn(known_participant_addresses[1].tostring(),\n+                      list(map(bytes, ff.known_participant_addresses.values())))\n+\n+    def test_with_four_broken(self):\n+        ff, messages = self.get_format_finder_from_protocol_file(\"four_broken.proto.xml\",\n+                                                                 clear_participant_addresses=False,\n+                                                                 return_messages=True)\n+\n+        assert isinstance(ff, FormatFinder)\n+        known_participant_addresses = ff.known_participant_addresses.copy()\n+        ff.known_participant_addresses.clear()\n+\n+        ff.run()\n+\n+        self.__check_addresses(messages, ff, known_participant_addresses)\n+\n+        for i in range(4, len(messages)):\n+            mt = next(mt for mt, indices in ff.existing_message_types.items() if i in indices)\n+            self.assertIsNotNone(mt.get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER))\n+\n+    def test_with_one_address_one_message_type(self):\n+        ff, messages = self.get_format_finder_from_protocol_file(\"one_address_one_mt.proto.xml\",\n+                                                                 clear_participant_addresses=False,\n+                                                                 return_messages=True)\n+\n+        self.assertEqual(len(messages), 17)\n+        self.assertEqual(len(ff.hexvectors), 17)\n+\n+        known_participant_addresses = ff.known_participant_addresses.copy()\n+        ff.known_participant_addresses.clear()\n+\n+        ff.run()\n+\n+        self.assertEqual(len(ff.message_types), 1)\n+\n+        self.assertIn(known_participant_addresses[0].tostring(),\n+                      list(map(bytes, ff.known_participant_addresses.values())))\n+        self.assertIn(known_participant_addresses[1].tostring(),\n+                      list(map(bytes, ff.known_participant_addresses.values())))\n+\n+    def test_without_preamble_24_messages(self):\n+        ff, messages = self.get_format_finder_from_protocol_file(\"no_preamble24.proto.xml\",\n+                                                                 clear_participant_addresses=False,\n+                                                                 return_messages=True)\n+\n+        known_participant_addresses = ff.known_participant_addresses.copy()\n+        ff.known_participant_addresses.clear()\n+\n+        ff.run()\n+\n+        self.assertEqual(len(ff.message_types), 1)\n+\n+        self.assertIn(known_participant_addresses[0].tostring(),\n+                      list(map(bytes, ff.known_participant_addresses.values())))\n+        self.assertIn(known_participant_addresses[1].tostring(),\n+                      list(map(bytes, ff.known_participant_addresses.values())))\n+\n+    def test_with_three_syncs_different_preamble_lengths(self):\n+        ff, messages = self.get_format_finder_from_protocol_file(\"three_syncs.proto.xml\", return_messages=True)\n+        preprocessor = Preprocessor(ff.get_bitvectors_from_messages(messages))\n+        sync_words = preprocessor.find_possible_syncs()\n+        self.assertIn(\"0000010000100000\", sync_words, msg=\"Sync 1\")\n+        self.assertIn(\"0010001000100010\", sync_words, msg=\"Sync 2\")\n+        self.assertIn(\"0110011101100111\", sync_words, msg=\"Sync 3\")\n+\n+        ff.run()\n+\n+        expected_sync_ends = [32, 24, 40, 24, 32, 24, 40, 24, 32, 24, 40, 24, 32, 24, 40, 24]\n+\n+        for i, (s1, s2) in enumerate(zip(expected_sync_ends, ff.sync_ends)):\n+            self.assertEqual(s1, s2, msg=str(i))\n+\n+    def test_with_four_participants(self):\n+        ff, messages = self.get_format_finder_from_protocol_file(\"four_participants.proto.xml\",\n+                                                                 clear_participant_addresses=False,\n+                                                                 return_messages=True)\n+\n+        known_participant_addresses = ff.known_participant_addresses.copy()\n+        ff.known_participant_addresses.clear()\n+\n+        ff.run()\n+\n+        self.__check_addresses(messages, ff, known_participant_addresses)\n+        self.assertEqual(len(ff.message_types), 3)\ndiff --git a\/tests\/awre\/test_length_engine.py b\/tests\/awre\/test_length_engine.py\nnew file mode 100644\nindex 0000000..435a19e\n--- \/dev\/null\n+++ b\/tests\/awre\/test_length_engine.py\n@@ -0,0 +1,167 @@\n+import random\n+\n+from tests.awre.AWRETestCase import AWRETestCase\n+from urh.awre.FormatFinder import FormatFinder\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.awre.engines.LengthEngine import LengthEngine\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.ProtocoLabel import ProtocolLabel\n+\n+\n+class TestLengthEngine(AWRETestCase):\n+    def test_simple_protocol(self):\n+        \"\"\"\n+        Test a simple protocol with\n+        preamble, sync and length field (8 bit) and some random data\n+\n+        :return:\n+        \"\"\"\n+        mb = MessageTypeBuilder(\"simple_length_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+\n+        num_messages_by_data_length = {8: 5, 16: 10, 32: 15}\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a9d\"})\n+        random.seed(0)\n+        for data_length, num_messages in num_messages_by_data_length.items():\n+            for i in range(num_messages):\n+                pg.generate_message(data=\"\".join([random.choice([\"0\", \"1\"]) for _ in range(data_length)]))\n+\n+        #self.save_protocol(\"simple_length\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+\n+        length_engine = LengthEngine(ff.bitvectors)\n+        highscored_ranges = length_engine.find(n_gram_length=8)\n+        self.assertEqual(len(highscored_ranges), 3)\n+\n+        ff.perform_iteration()\n+        self.assertEqual(len(ff.message_types), 1)\n+        self.assertGreater(len(ff.message_types[0]), 0)\n+        label = ff.message_types[0].get_first_label_with_type(FieldType.Function.LENGTH)\n+        self.assertEqual(label.start, 24)\n+        self.assertEqual(label.length, 8)\n+\n+    def test_easy_protocol(self):\n+        \"\"\"\n+        preamble, sync, sequence number, length field (8 bit) and some random data\n+\n+        :return:\n+        \"\"\"\n+        mb = MessageTypeBuilder(\"easy_length_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 16)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)\n+\n+        num_messages_by_data_length = {32: 10, 64: 15, 16: 5, 24: 7}\n+        pg = ProtocolGenerator([mb.message_type],\n+                               preambles_by_mt={mb.message_type: \"10\" * 8},\n+                               syncs_by_mt={mb.message_type: \"0xcafe\"})\n+        for data_length, num_messages in num_messages_by_data_length.items():\n+            for i in range(num_messages):\n+                if i % 4 == 0:\n+                    data = \"1\" * data_length\n+                elif i % 4 == 1:\n+                    data = \"0\" * data_length\n+                elif i % 4 == 2:\n+                    data = \"10\" * (data_length \/\/ 2)\n+                else:\n+                    data = \"01\" * (data_length \/\/ 2)\n+\n+                pg.generate_message(data=data)\n+\n+        #self.save_protocol(\"easy_length\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+\n+        length_engine = LengthEngine(ff.bitvectors)\n+        highscored_ranges = length_engine.find(n_gram_length=8)\n+        self.assertEqual(len(highscored_ranges), 4)\n+\n+        ff.perform_iteration()\n+        self.assertEqual(len(ff.message_types), 1)\n+        self.assertGreater(len(ff.message_types[0]), 0)\n+        label = ff.message_types[0].get_first_label_with_type(FieldType.Function.LENGTH)\n+        self.assertIsInstance(label, ProtocolLabel)\n+        self.assertEqual(label.start, 32)\n+        self.assertEqual(label.length, 8)\n+\n+    def test_medium_protocol(self):\n+        \"\"\"\n+        Protocol with two message types. Length field only present in one of them\n+\n+        :return:\n+        \"\"\"\n+        mb1 = MessageTypeBuilder(\"data\")\n+        mb1.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb1.add_label(FieldType.Function.SYNC, 8)\n+        mb1.add_label(FieldType.Function.LENGTH, 8)\n+        mb1.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)\n+\n+        mb2 = MessageTypeBuilder(\"ack\")\n+        mb2.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb2.add_label(FieldType.Function.SYNC, 8)\n+\n+        pg = ProtocolGenerator([mb1.message_type, mb2.message_type],\n+                               syncs_by_mt={mb1.message_type: \"11110011\",\n+                                            mb2.message_type: \"11110011\"})\n+        num_messages_by_data_length = {8: 5, 16: 10, 32: 5}\n+        for data_length, num_messages in num_messages_by_data_length.items():\n+            for i in range(num_messages):\n+                pg.generate_message(data=pg.decimal_to_bits(10 * i, data_length), message_type=mb1.message_type)\n+                pg.generate_message(message_type=mb2.message_type, data=\"0xaf\")\n+\n+        #self.save_protocol(\"medium_length\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+\n+        ff.perform_iteration()\n+        self.assertEqual(len(ff.message_types), 2)\n+        length_mt = next(\n+            mt for mt in ff.message_types if mt.get_first_label_with_type(FieldType.Function.LENGTH) is not None)\n+        length_label = length_mt.get_first_label_with_type(FieldType.Function.LENGTH)\n+\n+        for i, sync_end in enumerate(ff.sync_ends):\n+            self.assertEqual(sync_end, 16, msg=str(i))\n+\n+        self.assertEqual(16, length_label.start)\n+        self.assertEqual(8, length_label.length)\n+\n+    def test_little_endian_16_bit(self):\n+        mb = MessageTypeBuilder(\"little_endian_16_length_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 16)\n+\n+        num_messages_by_data_length = {256*8: 5, 16: 4, 512: 2}\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a9d\"},\n+                               little_endian=True)\n+\n+        random.seed(0)\n+        for data_length, num_messages in num_messages_by_data_length.items():\n+            for i in range(num_messages):\n+                pg.generate_message(data=\"\".join([random.choice([\"0\", \"1\"]) for _ in range(data_length)]))\n+\n+        #self.save_protocol(\"little_endian_16_length_test\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+\n+        length_engine = LengthEngine(ff.bitvectors)\n+        highscored_ranges = length_engine.find(n_gram_length=8)\n+        self.assertEqual(len(highscored_ranges), 3)\n+\n+        ff.perform_iteration()\n+        self.assertEqual(len(ff.message_types), 1)\n+        self.assertGreater(len(ff.message_types[0]), 0)\n+        label = ff.message_types[0].get_first_label_with_type(FieldType.Function.LENGTH)\n+        self.assertEqual(label.start, 24)\n+        self.assertEqual(label.length, 16)\ndiff --git a\/tests\/awre\/test_partially_labeled.py b\/tests\/awre\/test_partially_labeled.py\nnew file mode 100644\nindex 0000000..cf8c459\n--- \/dev\/null\n+++ b\/tests\/awre\/test_partially_labeled.py\n@@ -0,0 +1,198 @@\n+import copy\n+import random\n+\n+from urh.signalprocessing.MessageType import MessageType\n+\n+from urh.awre.FormatFinder import FormatFinder\n+\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.signalprocessing.FieldType import FieldType\n+\n+from tests.awre.AWRETestCase import AWRETestCase\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.signalprocessing.Participant import Participant\n+from urh.signalprocessing.ProtocolAnalyzer import ProtocolAnalyzer\n+\n+\n+class TestPartiallyLabeled(AWRETestCase):\n+    \"\"\"\n+    Some tests if there are already information about the message types present\n+\n+    \"\"\"\n+    def test_fully_labeled(self):\n+        \"\"\"\n+        For fully labeled protocol, nothing should be done\n+\n+        :return:\n+        \"\"\"\n+        protocol = self.__prepare_example_protocol()\n+        message_types = sorted(copy.deepcopy(protocol.message_types), key=lambda x: x.name)\n+        ff = FormatFinder(protocol.messages)\n+        ff.perform_iteration()\n+        self.assertEqual(len(message_types), len(ff.message_types))\n+\n+        for mt1, mt2 in zip(message_types, ff.message_types):\n+            self.assertTrue(self.__message_types_have_same_labels(mt1, mt2))\n+\n+    def test_one_message_type_empty(self):\n+        \"\"\"\n+        Empty the \"ACK\" message type, the labels should be find by FormatFinder\n+\n+        :return:\n+        \"\"\"\n+        protocol = self.__prepare_example_protocol()\n+        n_message_types = len(protocol.message_types)\n+        ack_mt = next(mt for mt in protocol.message_types if mt.name == \"ack\")\n+        ack_mt.clear()\n+        self.assertEqual(len(ack_mt), 0)\n+\n+        ff = FormatFinder(protocol.messages)\n+        ff.perform_iteration()\n+        self.assertEqual(n_message_types, len(ff.message_types))\n+\n+        self.assertEqual(len(ack_mt), 4, msg=str(ack_mt))\n+\n+    def test_given_address_information(self):\n+        \"\"\"\n+        Empty both message types and see if addresses are found, when information of participant addresses is given\n+\n+        :return:\n+        \"\"\"\n+        protocol = self.__prepare_example_protocol()\n+        self.clear_message_types(protocol.messages)\n+\n+        ff = FormatFinder(protocol.messages)\n+        ff.perform_iteration()\n+        self.assertEqual(2, len(ff.message_types))\n+\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.PREAMBLE))\n+        self.assertIsNotNone(ff.message_types[1].get_first_label_with_type(FieldType.Function.PREAMBLE))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.SYNC))\n+        self.assertIsNotNone(ff.message_types[1].get_first_label_with_type(FieldType.Function.SYNC))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.LENGTH))\n+        self.assertIsNotNone(ff.message_types[1].get_first_label_with_type(FieldType.Function.LENGTH))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.DST_ADDRESS))\n+        self.assertIsNotNone(ff.message_types[1].get_first_label_with_type(FieldType.Function.DST_ADDRESS))\n+        self.assertIsNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.SRC_ADDRESS))\n+        self.assertIsNotNone(ff.message_types[1].get_first_label_with_type(FieldType.Function.SRC_ADDRESS))\n+\n+    def test_type_part_already_labeled(self):\n+        protocol = self.__prepare_simple_example_protocol()\n+        self.clear_message_types(protocol.messages)\n+        ff = FormatFinder(protocol.messages)\n+\n+        # overlaps type\n+        ff.message_types[0].add_protocol_label_start_length(32, 8)\n+        ff.perform_iteration()\n+        self.assertEqual(1, len(ff.message_types))\n+\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.PREAMBLE))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.SYNC))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.LENGTH))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.DST_ADDRESS))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.SRC_ADDRESS))\n+\n+    def test_length_part_already_labeled(self):\n+        protocol = self.__prepare_simple_example_protocol()\n+        self.clear_message_types(protocol.messages)\n+        ff = FormatFinder(protocol.messages)\n+\n+        # overlaps length\n+        ff.message_types[0].add_protocol_label_start_length(24, 8)\n+        ff.perform_iteration()\n+        self.assertEqual(1, len(ff.message_types))\n+\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.PREAMBLE))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.SYNC))\n+        self.assertIsNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.LENGTH))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.DST_ADDRESS))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.SRC_ADDRESS))\n+\n+    def test_address_part_already_labeled(self):\n+        protocol = self.__prepare_simple_example_protocol()\n+        self.clear_message_types(protocol.messages)\n+        ff = FormatFinder(protocol.messages)\n+\n+        # overlaps dst address\n+        ff.message_types[0].add_protocol_label_start_length(40, 16)\n+        ff.perform_iteration()\n+        self.assertEqual(1, len(ff.message_types))\n+\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.PREAMBLE))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.SYNC))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.LENGTH))\n+        self.assertIsNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.DST_ADDRESS))\n+        self.assertIsNotNone(ff.message_types[0].get_first_label_with_type(FieldType.Function.SRC_ADDRESS))\n+\n+    @staticmethod\n+    def __message_types_have_same_labels(mt1: MessageType, mt2: MessageType):\n+        if len(mt1) != len(mt2):\n+            return False\n+\n+        for i, lbl in enumerate(mt1):\n+            if lbl != mt2[i]:\n+                return False\n+\n+        return True\n+\n+    def __prepare_example_protocol(self) -> ProtocolAnalyzer:\n+        alice = Participant(\"Alice\", \"A\", address_hex=\"1234\")\n+        bob = Participant(\"Bob\", \"B\", address_hex=\"cafe\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.TYPE, 8)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb_ack = MessageTypeBuilder(\"ack\")\n+        mb_ack.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb_ack.add_label(FieldType.Function.SYNC, 16)\n+        mb_ack.add_label(FieldType.Function.LENGTH, 8)\n+        mb_ack.add_label(FieldType.Function.DST_ADDRESS, 16)\n+\n+        num_messages = 50\n+\n+        pg = ProtocolGenerator([mb.message_type, mb_ack.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x6768\", mb_ack.message_type: \"0x6768\"},\n+                               participants=[alice, bob])\n+\n+        random.seed(0)\n+        for i in range(num_messages):\n+            if i % 2 == 0:\n+                source, destination = alice, bob\n+                data_length = 8\n+            else:\n+                source, destination = bob, alice\n+                data_length = 16\n+            pg.generate_message(data=pg.decimal_to_bits(random.randint(0, 2 ** (data_length - 1)), data_length),\n+                                source=source, destination=destination)\n+            pg.generate_message(data=\"\", message_type=mb_ack.message_type, destination=source, source=destination)\n+\n+        #self.save_protocol(\"labeled_protocol\", pg)\n+\n+        return pg.protocol\n+\n+    def __prepare_simple_example_protocol(self):\n+        random.seed(0)\n+        alice = Participant(\"Alice\", \"A\", address_hex=\"1234\")\n+        bob = Participant(\"Bob\", \"B\", address_hex=\"cafe\")\n+\n+        mb = MessageTypeBuilder(\"data\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.TYPE, 8)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x6768\"},\n+                               participants=[alice, bob])\n+\n+        for i in range(10):\n+            pg.generate_message(data=\"\".join([random.choice([\"0\", \"1\"]) for _ in range(16)]), source=alice, destination=bob)\n+            pg.generate_message(data=\"\".join([random.choice([\"0\", \"1\"]) for _ in range(8)]), source=bob, destination=alice)\n+\n+        return pg.protocol\ndiff --git a\/tests\/awre\/test_sequence_number_engine.py b\/tests\/awre\/test_sequence_number_engine.py\nnew file mode 100644\nindex 0000000..6b02e95\n--- \/dev\/null\n+++ b\/tests\/awre\/test_sequence_number_engine.py\n@@ -0,0 +1,182 @@\n+from tests.awre.AWRETestCase import AWRETestCase\n+from urh.awre.CommonRange import CommonRange\n+from urh.awre.FormatFinder import FormatFinder\n+from urh.awre.MessageTypeBuilder import MessageTypeBuilder\n+from urh.awre.ProtocolGenerator import ProtocolGenerator\n+from urh.awre.engines.SequenceNumberEngine import SequenceNumberEngine\n+from urh.signalprocessing.FieldType import FieldType\n+from urh.signalprocessing.Participant import Participant\n+\n+\n+class TestSequenceNumberEngine(AWRETestCase):\n+    def test_simple_protocol(self):\n+        \"\"\"\n+        Test a simple protocol with\n+        preamble, sync and increasing sequence number (8 bit) and some constant data\n+\n+        :return:\n+        \"\"\"\n+        mb = MessageTypeBuilder(\"simple_seq_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 8)\n+\n+        num_messages = 20\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a9d\"})\n+\n+        for i in range(num_messages):\n+            pg.generate_message(data=\"0xcafe\")\n+\n+        #self.save_protocol(\"simple_sequence_number\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+\n+        seq_engine = SequenceNumberEngine(ff.bitvectors, n_gram_length=8)\n+        highscored_ranges = seq_engine.find()\n+        self.assertEqual(len(highscored_ranges), 1)\n+\n+        ff.perform_iteration()\n+        self.assertEqual(len(ff.message_types), 1)\n+        self.assertGreater(len(ff.message_types[0]), 0)\n+        self.assertEqual(ff.message_types[0].num_labels_with_type(FieldType.Function.SEQUENCE_NUMBER), 1)\n+        label = ff.message_types[0].get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER)\n+        self.assertEqual(label.start, 24)\n+        self.assertEqual(label.length, 8)\n+\n+    def test_16bit_seq_nr(self):\n+        mb = MessageTypeBuilder(\"16bit_seq_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+\n+        num_messages = 10\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a9d\"}, sequence_number_increment=64)\n+\n+        for i in range(num_messages):\n+            pg.generate_message(data=\"0xcafe\")\n+\n+        #self.save_protocol(\"16bit_seq\", pg)\n+\n+        bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages, sync_ends=[24]*num_messages)\n+        seq_engine = SequenceNumberEngine(bitvectors, n_gram_length=8)\n+        highscored_ranges = seq_engine.find()\n+        self.assertEqual(len(highscored_ranges), 1)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+        ff.perform_iteration()\n+\n+        self.assertEqual(len(ff.message_types), 1)\n+        self.assertGreater(len(ff.message_types[0]), 0)\n+        self.assertEqual(ff.message_types[0].num_labels_with_type(FieldType.Function.SEQUENCE_NUMBER), 1)\n+        label = ff.message_types[0].get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER)\n+        self.assertEqual(label.start, 24)\n+        self.assertEqual(label.length, 16)\n+\n+    def test_16bit_seq_nr_with_zeros_in_first_part(self):\n+        mb = MessageTypeBuilder(\"16bit_seq_first_byte_zero_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+\n+        num_messages = 10\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a9d\"}, sequence_number_increment=1)\n+\n+        for i in range(num_messages):\n+            pg.generate_message(data=\"0xcafe\" + \"abc\" * i)\n+\n+        #self.save_protocol(\"16bit_seq_first_byte_zero_test\", pg)\n+\n+        bitvectors = FormatFinder.get_bitvectors_from_messages(pg.protocol.messages, sync_ends=[24]*num_messages)\n+        seq_engine = SequenceNumberEngine(bitvectors, n_gram_length=8)\n+        highscored_ranges = seq_engine.find()\n+        self.assertEqual(len(highscored_ranges), 1)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+        ff.perform_iteration()\n+        self.assertEqual(len(ff.message_types), 1)\n+        self.assertGreater(len(ff.message_types[0]), 0)\n+        self.assertEqual(ff.message_types[0].num_labels_with_type(FieldType.Function.SEQUENCE_NUMBER), 1)\n+        label = ff.message_types[0].get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER)\n+\n+        # Not consider constants as part of SEQ Nr!\n+        self.assertEqual(label.start, 40)\n+        self.assertEqual(label.length, 8)\n+\n+    def test_no_sequence_number(self):\n+        \"\"\"\n+        Ensure no sequence number is labeled, when it cannot be found\n+\n+        :return:\n+        \"\"\"\n+        alice = Participant(\"Alice\", address_hex=\"dead\")\n+        bob = Participant(\"Bob\", address_hex=\"beef\")\n+\n+        mb = MessageTypeBuilder(\"protocol_with_one_message_type\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.LENGTH, 8)\n+        mb.add_label(FieldType.Function.SRC_ADDRESS, 16)\n+        mb.add_label(FieldType.Function.DST_ADDRESS, 16)\n+\n+        num_messages = 3\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x1337\"},\n+                               participants=[alice, bob])\n+\n+        for i in range(num_messages):\n+            if i % 2 == 0:\n+                source, destination = alice, bob\n+            else:\n+                source, destination = bob, alice\n+            pg.generate_message(data=\"\", source=source, destination=destination)\n+\n+        #self.save_protocol(\"protocol_1\", pg)\n+\n+        # Delete message type information -> no prior knowledge\n+        self.clear_message_types(pg.protocol.messages)\n+\n+        ff = FormatFinder(pg.protocol.messages)\n+        ff.known_participant_addresses.clear()\n+        ff.perform_iteration()\n+\n+        self.assertEqual(len(ff.message_types), 1)\n+\n+        self.assertEqual(ff.message_types[0].num_labels_with_type(FieldType.Function.SEQUENCE_NUMBER), 0)\n+\n+    def test_sequence_number_little_endian_16_bit(self):\n+        mb = MessageTypeBuilder(\"16bit_seq_test\")\n+        mb.add_label(FieldType.Function.PREAMBLE, 8)\n+        mb.add_label(FieldType.Function.SYNC, 16)\n+        mb.add_label(FieldType.Function.SEQUENCE_NUMBER, 16)\n+\n+        num_messages = 8\n+\n+        pg = ProtocolGenerator([mb.message_type],\n+                               syncs_by_mt={mb.message_type: \"0x9a9d\"},\n+                               little_endian=True, sequence_number_increment=64)\n+\n+        for i in range(num_messages):\n+            pg.generate_message(data=\"0xcafe\")\n+\n+        #self.save_protocol(\"16bit_litte_endian_seq\", pg)\n+\n+        self.clear_message_types(pg.protocol.messages)\n+        ff = FormatFinder(pg.protocol.messages)\n+        ff.perform_iteration()\n+\n+        self.assertEqual(len(ff.message_types), 1)\n+        self.assertEqual(ff.message_types[0].num_labels_with_type(FieldType.Function.SEQUENCE_NUMBER), 1)\n+        label = ff.message_types[0].get_first_label_with_type(FieldType.Function.SEQUENCE_NUMBER)\n+        self.assertEqual(label.start, 24)\n+        self.assertEqual(label.length, 16)\ndiff --git a\/tests\/data\/35_messages.proto.xml b\/tests\/data\/35_messages.proto.xml\nnew file mode 100644\nindex 0000000..730aa21\n--- \/dev\/null\n+++ b\/tests\/data\/35_messages.proto.xml\n@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"dead\" color_index=\"0\" id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"beef\" color_index=\"0\" id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000000001110001110111111010110111111010110100101000110100111000100010001\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.356909\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3573802\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000000100101010010011000111000001010101110011001010101001101110010110110\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3575044\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3579493\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000001000011011011001111100101010001111111010110011001010111011110010011\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.358067\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3585658\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000001100111010101110101110001010111011110100101011010100000100001110000\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3586884\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3591452\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000010000000010000101000110001110010000110110001000001111100011001110001\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3592691\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3597312\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000010101100000100110001111011000010010011111100100011101010110011110101\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3598483\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3603067\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000011000100110111100000101111111001110110101111011000101001000101101101\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3604224\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3608832\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000011101001001000111001111101100000101000100100110011101101111001110111\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3610005\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.361449\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000100000100101100101100101101000101000001010111001000010010100011110011\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3615682\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3620253\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000100101101001010101110111101000111101101101100010001101111011000110111\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3621418\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3625915\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000101000111011111000010110100100111000000010100111000100101110001010010\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3627083\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.363152\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000101101101010110100111111110001101110000110000000010110000000011001000\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3632681\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3637214\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000110001000111111000001100100110010101100100001000011100000110001110110\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3638372\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3642983\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000110100011100011100000110111110010010111111111010101010000001001010000\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.364427\"\/>\n+      <message bits=\"10101010000100110011011101000110101111101110111111011110101011010001101100011001101001010000111100001011101011111101110111101001101001100100001100100000001001001001011010101000001010100011110111011111011011010001111110110100110111111001010001010111111101100010101110000111110101011011001100001000010010111011110010011101101111001110001101111001000001000111101011010010001000010110000011110011100110010110011101110111101100001001101110010100111101101100101011010111110001101111001001010010011101001101011011010101000010011100111011100010110010011111001110010001000101100001001011111010\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.364874\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000111001011011110000110100110100010110101001100000010111000011111111000\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3649895\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3654513\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111000111101111100000001100101110010001110101010100010001101110011010111001\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3655696\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3660169\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111001000000111010000000111001110111010111000101101101000111101101001010000\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3661318\"\/>\n+      <message bitsmessage_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"5a5999ec-dcc3-408b-b88f-158606c8eb8a\" pause=\"0\" timestamp=\"1555834796.3665833\"\/>\n+      <message bits=\"1010101000010011001101110000111011011110101011011011111011101111001000101101110010010110000111110000010001100111000100011101010010100001\" message_type_id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" modulator_index=\"0\" participant_id=\"37ce3f54-5962-4e59-b903-cec587838f6c\" pause=\"0\" timestamp=\"1555834796.3666987\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"4453e167-1974-409e-b3c4-6a9b25c464ea\" name=\"protocol_with_one_message_type\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"8\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"8\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"24\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"48\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"48\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"64\"\/>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/ack_frames_with_crc.proto.xml b\/tests\/data\/ack_frames_with_crc.proto.xml\nnew file mode 100644\nindex 0000000..c90be7b\n--- \/dev\/null\n+++ b\/tests\/data\/ack_frames_with_crc.proto.xml\n@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings>\n+      <decoding>'Non Return To Zero (NRZ)', <\/decoding>\n+      <decoding>'Non Return To Zero Inverted (NRZ-I)', 'Invert', <\/decoding>\n+      <decoding>'Manchester I', 'Edge Trigger', <\/decoding>\n+      <decoding>'Manchester II', 'Edge Trigger', 'Invert', <\/decoding>\n+      <decoding>'Differential Manchester', 'Edge Trigger', 'Differential Encoding', <\/decoding>\n+      <decoding>'WSP', 'Wireless Short Packet (WSP)', <\/decoding>\n+      <decoding>'Nexa', 'Substitution', '100000:0;', 'Substitution', '10:1;', <\/decoding>\n+   <\/decodings>\n+   <participants>\n+      <participant address_hex=\"1337\" color_index=\"0\" id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"4711\" color_index=\"0\" id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111010001110001000100010110001110001100001101100001100101011011100000100010100111000101011011100101\" decoding_index=\"0\" message_type_id=\"e4c8f60b-b72c-4cb2-9206-43c6d6cd9ae8\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.1973796\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.1974692\"\/>\n+      <message bitsdecoding_index=\"0\" message_type_id=\"0e697750-c73f-4992-854a-2074c0b273ac\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.1979609\"\/>\n+      <message bits=\"101010101010101010011010011111010000010101000111000100011001110000100100\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.1980429\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111010001110001000111111111101111001010011001000010100001011011110010010100010100100010100111100111\" decoding_index=\"0\" message_type_id=\"e4c8f60b-b72c-4cb2-9206-43c6d6cd9ae8\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.198185\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.198258\"\/>\n+      <message bitsdecoding_index=\"0\" message_type_id=\"0e697750-c73f-4992-854a-2074c0b273ac\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.198747\"\/>\n+      <message bits=\"101010101010101010011010011111010000010101000111000100011001110000100100\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.1988373\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111010001110001000100111110000101000000101001110000111100011110101001000000110111111101111000010001\" decoding_index=\"0\" message_type_id=\"e4c8f60b-b72c-4cb2-9206-43c6d6cd9ae8\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.1989856\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.1990578\"\/>\n+      <message bitsdecoding_index=\"0\" message_type_id=\"0e697750-c73f-4992-854a-2074c0b273ac\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.1997647\"\/>\n+      <message bits=\"101010101010101010011010011111010000010101000111000100011001110000100100\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.1998444\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111010001110001000110110010101010100000010101000110111001100011101101000110110011101011111101000010\" decoding_index=\"0\" message_type_id=\"e4c8f60b-b72c-4cb2-9206-43c6d6cd9ae8\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.1999872\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.2000594\"\/>\n+      <message bitsdecoding_index=\"0\" message_type_id=\"0e697750-c73f-4992-854a-2074c0b273ac\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.2005653\"\/>\n+      <message bits=\"101010101010101010011010011111010000010101000111000100011001110000100100\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.200646\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111010001110001000100100001010110100010000101110000101010001111010111111010010010100100011001111101\" decoding_index=\"0\" message_type_id=\"e4c8f60b-b72c-4cb2-9206-43c6d6cd9ae8\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.2007873\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.2008598\"\/>\n+      <message bitsdecoding_index=\"0\" message_type_id=\"0e697750-c73f-4992-854a-2074c0b273ac\" modulator_index=\"0\" participant_id=\"8e61e60d-89b8-42b3-ab43-0b3b225242f3\" pause=\"0\" timestamp=\"1555432607.201344\"\/>\n+      <message bits=\"101010101010101010011010011111010000010101000111000100011001110000100100\" decoding_index=\"0\" message_type_id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" modulator_index=\"0\" participant_id=\"0864c5a6-b020-4459-a8bf-457fc589303e\" pause=\"0\" timestamp=\"1555432607.2014205\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"016735db-059a-4798-a6ad-ef13b2f62db2\" name=\"Default\">\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"e4c8f60b-b72c-4cb2-9206-43c6d6cd9ae8\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"56\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"40\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"56\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"136\" fuzz_me=\"2\" fuzz_values=\"\" name=\"data\" show=\"2\" start=\"72\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"6\" data_ranges=\"[(32, 136)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"152\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"136\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"0e697750-c73f-4992-854a-2074c0b273ac\" name=\"data2\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"56\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"40\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"56\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"584\" fuzz_me=\"2\" fuzz_values=\"\" name=\"data\" show=\"2\" start=\"72\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"6\" data_ranges=\"[(32, 584)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"600\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"584\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"f3856ff3-9fe7-48f9-a287-a03a784b33d6\" name=\"ack\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"56\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"40\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"4\" data_ranges=\"[(32, 56)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"56\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/awre_consistent_addresses.txt b\/tests\/data\/awre_consistent_addresses.txt\ndeleted file mode 100644\nindex 15a1a22..0000000\n--- a\/tests\/data\/awre_consistent_addresses.txt\n+++ \/dev\/null\n@@ -1,21 +0,0 @@\n-1010101010101010101010101010101010011010011111011001101001111101001011011000000001110000111000000000000000000011000110110110000000110011000000000000000100000000010000000011000000010100111101110100100010011100010110010100010100000000000000000000111111001001101101100000000000000001000000000000000000000000000000100000000100000100000101110000000000000010000000010000001010001100001111010111011100000000110110111011101101111011100110001100111010001111\n-1010101010101010101010101010101001100111011010000110011101101000000001100001101101100000001100110111100011100010100010010011001000101011\n-10101010101010101010101010101010100110100111110110011010011111010011001000000000011100000001101101100000001100110111100011100010100010011100000000000001000001000000001000000110011100100100100110010111111110101010000011011101011011110000111101010111101010001001010010000111111101010111100101011010101001110111011011111110010101111100111000100100110100001111101111001011111001011000100010101011011001110001111010110101111100100110011001010011111011111011010101100111011010000011101010011101\n-1010101010101010101010101010101010011010011111011001101001111101000000110111100011100010100010010111010101111110\n-101010101010101010101010101010100110011101101000011001110110100000010011001000000111000001111000111000101000100100011011011000000011001100000000000000000000000000000000101001000011011110100110001001011001101110000110011000001101110100000111\n-1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\n-10101010101010101010101010101010011001110110100001100111011010000001101000100000011100000001101101100000001100110111100011100010100010010000000000001100011000100000111001100110101001001000110001101101000011000111110011111110110100011111001110111100100011101110101011100001011000011011000001010111\n-1010101010101010101010101010101001100111011010000110011101101000000000110111100011100010100010010111010101111110\n-101010101010101010101010101010100110011101101000011001110110100000010011001000000111000001111000111000101000100100011011011000000011001100000000000000000000000000000001010110110100111000100100010001011010101101010011100001100100011011110101\n-1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\n-10101010101010101010101010101010011001110110100001100111011010000001101000100000011100000001101101100000001100110111100011100010100010010000000000001100011000100000111100111010000110001010100101011000010001101001000000010100101100011110011100010001000011000001001010000010000100111010010010110101\n-1010101010101010101010101010101001100111011010000110011101101000000000110111100011100010100010010111010101111110\n-101010101010101010101010101010100110011101101000011001110110100000010011001000000111000001111000111000101000100100011011011000000011001100000000000000000000000000000010101011111011101010110000010001110000110000011110000001110101101011001001\n-1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\n-10101010101010101010101010101010011001110110100001100111011010000001010000100000011100000001101101100000001100110111100011100010100010010000000000001100011000100001000010011100100000101001100001010000001111001101001011110010111001000100001010011101\n-1010101010101010101010101010101001100111011010000110011101101000000000110111100011100010100010010111010101111110\n-101010101010101010101010101010100110011101101000011001110110100000010011001000000111000001111000111000101000100100011011011000000011001100000000000000000000000000000011110000010100111010111110000000011011011111011111010011010011011011110100\n-1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\n-10101010101010101010101010101010011001110110100001100111011010000001010000100000011100000001101101100000001100110111100011100010100010010000000000001100011000100001000110010011100100111011000011111110001110100011111011110100000000010011011000011001\n-10101010101010101010101010101010011001110110100001100111011010000001011101100000011100000111100011100010100010010001101101100000001100110000000000000000000000000000010010011111101101101111001010101100111100000101101000011101001010110110000111100110000000111100010000100111\n-1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\n\\ No newline at end of file\ndiff --git a\/tests\/data\/enocean_bits.txt b\/tests\/data\/enocean_bits.txt\nindex 052d708..278e75d 100644\n--- a\/tests\/data\/enocean_bits.txt\n+++ b\/tests\/data\/enocean_bits.txt\n@@ -1,12 +1,12 @@\n-11110101010100101100001000000000000001011000001110000000010010010111\n-11110101010100101100001000000000000001011000001110000000010010010111\n-11110101010100101100001000000000000001011000001110000000010010010111\n-11110101010100101010000000000000000001011000001110000000010001010111\n-11110101010100101010000000000000000001011000001110000000010001010111\n-11110101010100101010000000000000000001011000001110000000010001010111\n-11110101010100101100011000000000000001011000001110000000010011010111\n-11110101010100101100011000000000000001011000001110000000010011010111\n-11110101010100101100011000000000000001011000001110000000010011010111\n-11110101010100101010000000000000000001011000001110000000010001010111\n-11110101010100101010000000000000000001011000001110000000010001010111\n-11110101010100101010000000000000000001011000001110000000010001010111\n\\ No newline at end of file\n+1010101010010110000101010000000000101100000111000000001010011011\n+1010101010010110000101010000000000101100000111000000001010011011\n+1010101010010110000101010000000000101100000111000000001010011011\n+1010101010010101000000000000000000101100000111000000001000101011\n+1010101010010101000000000000000000101100000111000000001000101011\n+1010101010010101000000000000000000101100000111000000001000101011\n+1010101010010110000100000000000000101100000111000000001001001011\n+1010101010010110000100000000000000101100000111000000001001001011\n+1010101010010110000100000000000000101100000111000000001001001011\n+1010101010010101000000000000000000101100000111000000001000101011\n+1010101010010101000000000000000000101100000111000000001000101011\n+1010101010010101000000000000000000101100000111000000001000101011\n\\ No newline at end of file\ndiff --git a\/tests\/data\/four_broken.proto.xml b\/tests\/data\/four_broken.proto.xml\nnew file mode 100644\nindex 0000000..367e83f\n--- \/dev\/null\n+++ b\/tests\/data\/four_broken.proto.xml\n@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"24\" color_index=\"0\" id=\"720a8177-37e0-41be-950f-dd8dc30b6494\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"ff\" color_index=\"0\" id=\"5a9e3f21-ae65-4330-94dc-500439c19f8e\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10001110100010000000101100100100000011001101101001010111101001111011011001111010000001110100000000010010\" message_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"720a8177-37e0-41be-950f-dd8dc30b6494\" pause=\"0\" timestamp=\"1555746507.8864236\"\/>\n+      <message bitsmessage_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"5a9e3f21-ae65-4330-94dc-500439c19f8e\" pause=\"0\" timestamp=\"1555746507.8868656\"\/>\n+      <message bits=\"10001110100010000000101000110101110100010011010100100001110111111000110101110001100000001000101011010001\" message_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"720a8177-37e0-41be-950f-dd8dc30b6494\" pause=\"0\" timestamp=\"1555746507.8869712\"\/>\n+      <message bitsmessage_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"5a9e3f21-ae65-4330-94dc-500439c19f8e\" pause=\"0\" timestamp=\"1555746507.8874078\"\/>\n+      <message bits=\"10001110100010000000101100100100000001000010001101101000010001011001010100010010010011001001111110110000\" message_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"720a8177-37e0-41be-950f-dd8dc30b6494\" pause=\"0\" timestamp=\"1555746507.8875117\"\/>\n+      <message bitsmessage_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"5a9e3f21-ae65-4330-94dc-500439c19f8e\" pause=\"0\" timestamp=\"1555746507.8879437\"\/>\n+      <message bits=\"10001110100010000000101100100100000001101111000001011110011010100001000111110000010101010010011010111111\" message_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"720a8177-37e0-41be-950f-dd8dc30b6494\" pause=\"0\" timestamp=\"1555746507.8880446\"\/>\n+      <message bitsmessage_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"5a9e3f21-ae65-4330-94dc-500439c19f8e\" pause=\"0\" timestamp=\"1555746507.8884826\"\/>\n+      <message bits=\"10001110100010000000101100100100000010001011001011011110011000101111010100010110001011100100111001010111\" message_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"720a8177-37e0-41be-950f-dd8dc30b6494\" pause=\"0\" timestamp=\"1555746507.8885853\"\/>\n+      <message bitsmessage_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"5a9e3f21-ae65-4330-94dc-500439c19f8e\" pause=\"0\" timestamp=\"1555746507.889015\"\/>\n+      <message bits=\"10001110100010000000101100100100000010101000101110101001100010110011010000100011111111010000000111010100\" message_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"720a8177-37e0-41be-950f-dd8dc30b6494\" pause=\"0\" timestamp=\"1555746507.889118\"\/>\n+      <message bits=\"100011101000100001000011111111110000101110111111011100000001000101011101001001010010101000000101011100011010101000011101101000100101111010000110010010001100000101010110011101000110100000000000010011001111000100001101001000110011000110111110110011000111001000110100100011011010001110111111001000010011111010110111001101100100000111101101100000011111100010000010111000011011111011000110101101100100010100001101001110110011111111111100110110001000001011110000000011010001001000101101001010100001111001000110010011110000001101010101010101100000000111011001\" message_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"5a9e3f21-ae65-4330-94dc-500439c19f8e\" pause=\"0\" timestamp=\"1555746507.8895638\"\/>\n+      <message bits=\"10001110100010000000101100100100000011000000101111111011101110100011111011011100100110111100110011100101\" message_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"720a8177-37e0-41be-950f-dd8dc30b6494\" pause=\"0\" timestamp=\"1555746507.8896673\"\/>\n+      <message bitsmessage_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"5a9e3f21-ae65-4330-94dc-500439c19f8e\" pause=\"0\" timestamp=\"1555746507.8900971\"\/>\n+      <message bits=\"10001110100010000000101100100100000011100001110011110001011000100000100011011111101011110101110010011001\" message_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"720a8177-37e0-41be-950f-dd8dc30b6494\" pause=\"0\" timestamp=\"1555746507.890198\"\/>\n+      <message bitsmessage_type_id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" modulator_index=\"0\" participant_id=\"5a9e3f21-ae65-4330-94dc-500439c19f8e\" pause=\"0\" timestamp=\"1555746507.8906255\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"6f0186c2-2bc9-44f7-9b85-bda62e88c8dd\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"24\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"32\"\/>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/four_participants.proto.xml b\/tests\/data\/four_participants.proto.xml\nnew file mode 100644\nindex 0000000..eeef293\n--- \/dev\/null\n+++ b\/tests\/data\/four_participants.proto.xml\n@@ -0,0 +1,71 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"313370\" color_index=\"0\" id=\"2578de59-87e2-4545-8b81-292751355445\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"031337\" color_index=\"0\" id=\"7e3df95a-3351-4587-bae1-63aa68c777a8\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+      <participant address_hex=\"110000\" color_index=\"0\" id=\"6949072a-7077-4218-8abe-e558c89871b8\" name=\"Charly\" relative_rssi=\"0\" shortname=\"C\" simulate=\"0\"\/>\n+      <participant address_hex=\"001100\" color_index=\"0\" id=\"17d6bce9-d7aa-4e80-87f8-352dbabd6029\" name=\"Daniel\" relative_rssi=\"0\" shortname=\"D\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10101010101010100000010000100000000101010000001100010011001101110011000100110011011100000000000000000000000000000000000001110100000001110011101110101110001011011010001111011010010100001010011111000000\" message_type_id=\"5194fc77-7da3-4e08-a61c-1c8f980a9fc3\" modulator_index=\"0\" participant_id=\"2578de59-87e2-4545-8b81-292751355445\" pause=\"0\" timestamp=\"1555684618.7447739\"\/>\n+      <message bits=\"1010101000100010001000100011000100110011011100000010011011110111\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"7e3df95a-3351-4587-bae1-63aa68c777a8\" pause=\"0\" timestamp=\"1555684618.7448528\"\/>\n+      <message bitsmessage_type_id=\"88ce6fdc-5286-4ebb-8394-5e79a48614ba\" modulator_index=\"0\" participant_id=\"7e3df95a-3351-4587-bae1-63aa68c777a8\" pause=\"0\" timestamp=\"1555684618.7453322\"\/>\n+      <message bits=\"1010101000100010001000100000001100010011001101111110010010001101\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"6949072a-7077-4218-8abe-e558c89871b8\" pause=\"0\" timestamp=\"1555684618.745404\"\/>\n+      <message bits=\"10101010101010100000010000100000000101010000000000010001000000000001000100000000000000000000000000000000000000000000000111011100100101100001111100000100011001110001000111010100101000010011010010011100\" message_type_id=\"5194fc77-7da3-4e08-a61c-1c8f980a9fc3\" modulator_index=\"0\" participant_id=\"6949072a-7077-4218-8abe-e558c89871b8\" pause=\"0\" timestamp=\"1555684618.745555\"\/>\n+      <message bits=\"1010101000100010001000100001000100000000000000001000111101010111\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"17d6bce9-d7aa-4e80-87f8-352dbabd6029\" pause=\"0\" timestamp=\"1555684618.7456198\"\/>\n+      <message bits=\"1010101010101010101010100110011101100111001100010011001101110000000000000001000100000000110011010111101011101000010101011101010100011100101010101111111111010100101000111010010110100101001000110000110000110000111101110011000110101100010001010000111011010100000001101011110011101100110111010101011011111010000110101010101101101001101111001100100100100010001000101010000111101111000111000111110110011111001001001000101111101000010010010111110101011011110001111100001000010000001100110111100101101010100100100001001000011001011011001100010010011110110010001000111101010000101110111110011011111111110111101101110101010101\" message_type_id=\"88ce6fdc-5286-4ebb-8394-5e79a48614ba\" modulator_index=\"0\" participant_id=\"17d6bce9-d7aa-4e80-87f8-352dbabd6029\" pause=\"0\" timestamp=\"1555684618.7460933\"\/>\n+      <message bits=\"1010101000100010001000100000000000010001000000001110100000000011\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"2578de59-87e2-4545-8b81-292751355445\" pause=\"0\" timestamp=\"1555684618.7461617\"\/>\n+      <message bits=\"10101010101010100000010000100000000101010000001100010011001101110011000100110011011100000000000000000000000000000000001010010101000111010101100011111100011110010100010100000000110101110111000100101001\" message_type_id=\"5194fc77-7da3-4e08-a61c-1c8f980a9fc3\" modulator_index=\"0\" participant_id=\"2578de59-87e2-4545-8b81-292751355445\" pause=\"0\" timestamp=\"1555684618.7463086\"\/>\n+      <message bits=\"1010101000100010001000100011000100110011011100000010011011110111\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"7e3df95a-3351-4587-bae1-63aa68c777a8\" pause=\"0\" timestamp=\"1555684618.7463715\"\/>\n+      <message bitsmessage_type_id=\"88ce6fdc-5286-4ebb-8394-5e79a48614ba\" modulator_index=\"0\" participant_id=\"7e3df95a-3351-4587-bae1-63aa68c777a8\" pause=\"0\" timestamp=\"1555684618.7468488\"\/>\n+      <message bits=\"1010101000100010001000100000001100010011001101111110010010001101\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"6949072a-7077-4218-8abe-e558c89871b8\" pause=\"0\" timestamp=\"1555684618.7469163\"\/>\n+      <message bits=\"10101010101010100000010000100000000101010000000000010001000000000001000100000000000000000000000000000000000000000000001110111010000110001001001111000011111010001110100100101100010101000000111001111110\" message_type_id=\"5194fc77-7da3-4e08-a61c-1c8f980a9fc3\" modulator_index=\"0\" participant_id=\"6949072a-7077-4218-8abe-e558c89871b8\" pause=\"0\" timestamp=\"1555684618.747066\"\/>\n+      <message bits=\"1010101000100010001000100001000100000000000000001000111101010111\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"17d6bce9-d7aa-4e80-87f8-352dbabd6029\" pause=\"0\" timestamp=\"1555684618.7471309\"\/>\n+      <message bitsmessage_type_id=\"88ce6fdc-5286-4ebb-8394-5e79a48614ba\" modulator_index=\"0\" participant_id=\"17d6bce9-d7aa-4e80-87f8-352dbabd6029\" pause=\"0\" timestamp=\"1555684618.7476048\"\/>\n+      <message bits=\"1010101000100010001000100000000000010001000000001110100000000011\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"2578de59-87e2-4545-8b81-292751355445\" pause=\"0\" timestamp=\"1555684618.7476716\"\/>\n+      <message bits=\"10101010101010100000010000100000000101010000001100010011001101110011000100110011011100000000000000000000000000000000010011000110101000011110111010001111000001010011001111101010110010000010111000001001\" message_type_id=\"5194fc77-7da3-4e08-a61c-1c8f980a9fc3\" modulator_index=\"0\" participant_id=\"2578de59-87e2-4545-8b81-292751355445\" pause=\"0\" timestamp=\"1555684618.7478194\"\/>\n+      <message bits=\"1010101000100010001000100011000100110011011100000010011011110111\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"7e3df95a-3351-4587-bae1-63aa68c777a8\" pause=\"0\" timestamp=\"1555684618.7478826\"\/>\n+      <message bitsmessage_type_id=\"88ce6fdc-5286-4ebb-8394-5e79a48614ba\" modulator_index=\"0\" participant_id=\"7e3df95a-3351-4587-bae1-63aa68c777a8\" pause=\"0\" timestamp=\"1555684618.748354\"\/>\n+      <message bits=\"1010101000100010001000100000001100010011001101111110010010001101\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"6949072a-7077-4218-8abe-e558c89871b8\" pause=\"0\" timestamp=\"1555684618.748421\"\/>\n+      <message bits=\"10101010101010100000010000100000000101010000000000010001000000000001000100000000000000000000000000000000000000000000010100000000101101101111110001101011011010100001000110011100100001111000001001101101\" message_type_id=\"5194fc77-7da3-4e08-a61c-1c8f980a9fc3\" modulator_index=\"0\" participant_id=\"6949072a-7077-4218-8abe-e558c89871b8\" pause=\"0\" timestamp=\"1555684618.7485673\"\/>\n+      <message bits=\"1010101000100010001000100001000100000000000000001000111101010111\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"17d6bce9-d7aa-4e80-87f8-352dbabd6029\" pause=\"0\" timestamp=\"1555684618.7486312\"\/>\n+      <message bitsmessage_type_id=\"88ce6fdc-5286-4ebb-8394-5e79a48614ba\" modulator_index=\"0\" participant_id=\"17d6bce9-d7aa-4e80-87f8-352dbabd6029\" pause=\"0\" timestamp=\"1555684618.7491055\"\/>\n+      <message bits=\"1010101000100010001000100000000000010001000000001110100000000011\" message_type_id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" modulator_index=\"0\" participant_id=\"2578de59-87e2-4545-8b81-292751355445\" pause=\"0\" timestamp=\"1555684618.749173\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"5194fc77-7da3-4e08-a61c-1c8f980a9fc3\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"40\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"88\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"120\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"88\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"6\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"184\" fuzz_me=\"2\" fuzz_values=\"\" name=\"data\" show=\"2\" start=\"120\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"7\" data_ranges=\"[(32, 184)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"200\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"184\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"6479c599-6f89-488f-ae56-8fae07b0d9b0\" name=\"ack\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"8\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"8\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"48\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"24\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"3\" data_ranges=\"[(24, 48)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"48\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"88ce6fdc-5286-4ebb-8394-5e79a48614ba\" name=\"kex\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"24\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"40\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"88\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"600\" fuzz_me=\"2\" fuzz_values=\"\" name=\"data\" show=\"2\" start=\"88\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"5\" data_ranges=\"[(40, 600)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"616\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"600\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/homematic.proto.xml b\/tests\/data\/homematic.proto.xml\nnew file mode 100644\nindex 0000000..f7c8093\n--- \/dev\/null\n+++ b\/tests\/data\/homematic.proto.xml\n@@ -0,0 +1,153 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings>\n+      <decoding>'Non Return To Zero (NRZ)', <\/decoding>\n+      <decoding>'Non Return To Zero Inverted (NRZ-I)', 'Invert', <\/decoding>\n+      <decoding>'Manchester I', 'Edge Trigger', <\/decoding>\n+      <decoding>'Manchester II', 'Edge Trigger', 'Invert', <\/decoding>\n+   <\/decodings>\n+   <participants>\n+      <participant address_hex=\"3927cc\" color_index=\"3\" id=\"af97bec6-d417-47d8-a112-94c0015e1d73\" name=\"CCU\" relative_rssi=\"0\" shortname=\"C\" simulate=\"0\"\/>\n+      <participant address_hex=\"4ca2f9\" color_index=\"0\" id=\"23f35303-fb89-408f-88b3-f0ec87b863fc\" name=\"Fernbedienung\" relative_rssi=\"1\" shortname=\"F\" simulate=\"1\"\/>\n+      <participant address_hex=\"3101cc\" color_index=\"2\" id=\"25bc0d02-ce8e-478e-a4d0-b22cfbab004a\" name=\"Schalter\" relative_rssi=\"2\" shortname=\"S\" simulate=\"1\"\/>\n+      <participant address_hex=\"\" color_index=\"19\" id=\"a293bffc-118c-4bd2-89d8-af9a893808fd\" name=\"Attacker\" relative_rssi=\"3\" shortname=\"A\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10101010101010101010101010101010111010011100101011101001110010100000101100100100101001100100000000111001001001111100110000110001000000011100110000000010000100011100001000000011\" decoding_index=\"0\" message_type_id=\"fe1be813-fc18-44bc-8931-40a35cab9c8c\" modulator_index=\"0\" participant_id=\"af97bec6-d417-47d8-a112-94c0015e1d73\" pause=\"219927\" timestamp=\"1521474143.9854395\"\/>\n+      <message bits=\"10101010101010101010101010101010111010011100101011101001110010100001000100100100101000000000001000110001000000011100110000111001001001111100110000000100001111110100011100110101001011010110000110100001000000101111011111011000\" decoding_index=\"0\" message_type_id=\"7880a7fd-7ea0-44bb-8016-ddaee5df84ec\" modulator_index=\"0\" participant_id=\"25bc0d02-ce8e-478e-a4d0-b22cfbab004a\" pause=\"203067\" timestamp=\"1521474143.985474\"\/>\n+      <message bits=\"101010101010101010101010101010101110100111001010111010011100101000011001001001001010000000000011001110010010011111001100001100010000000111001100101100001100010100111010111100100011000110111010010111011111110001011011010101000001110000100000001101011101111111000000000100101100010010000010\" decoding_index=\"0\" message_type_id=\"e66e6119-d636-4165-b3b3-30e32c0ce8c5\" modulator_index=\"0\" participant_id=\"af97bec6-d417-47d8-a112-94c0015e1d73\" pause=\"198793\" timestamp=\"1521474143.9855015\"\/>\n+      <message bits=\"10101010101010101010101010101010111010011100101011101001110010100000111000100100100000000000001000110001000000011100110000111001001001111100110000000000100010011001010000110010111000011110011100010111\" decoding_index=\"0\" message_type_id=\"bd3a5291-0677-4b35-b821-4bd366a57592\" modulator_index=\"0\" participant_id=\"25bc0d02-ce8e-478e-a4d0-b22cfbab004a\" pause=\"846702\" timestamp=\"1521474143.9855273\"\/>\n+      <message bits=\"10101010101010101010101010101010111010011100101011101001110010100000101100100101101001100100000000111001001001111100110000110001000000011100110000000001000010010101110100010000\" decoding_index=\"0\" message_type_id=\"fe1be813-fc18-44bc-8931-40a35cab9c8c\" modulator_index=\"0\" participant_id=\"af97bec6-d417-47d8-a112-94c0015e1d73\" pause=\"219416\" timestamp=\"1521474143.9855523\"\/>\n+      <message bits=\"10101010101010101010101010101010111010011100101011101001110010100001000100100101101000000000001000110001000000011100110000111001001001111100110000000100000111001111011001000000010000100100000101010001000000101101000111000001\" decoding_index=\"0\" message_type_id=\"7880a7fd-7ea0-44bb-8016-ddaee5df84ec\" modulator_index=\"0\" participant_id=\"25bc0d02-ce8e-478e-a4d0-b22cfbab004a\" pause=\"203576\" timestamp=\"1521474143.9855769\"\/>\n+      <message bits=\"101010101010101010101010101010101110100111001010111010011100101000011001001001011010000000000011001110010010011111001100001100010000000111001100100100110010110101100001010001110100100101000001101101001101001001010000000001010001000011010100110110110100001010111110011001001011000010100100\" decoding_index=\"0\" message_type_id=\"e66e6119-d636-4165-b3b3-30e32c0ce8c5\" modulator_index=\"0\" participant_id=\"af97bec6-d417-47d8-a112-94c0015e1d73\" pause=\"198614\" timestamp=\"1521474143.985602\"\/>\n+      <message bits=\"10101010101010101010101010101010111010011100101011101001110010100000111000100101100000000000001000110001000000011100110000111001001001111100110000000000010011111101100000110011110011101001110100100110\" decoding_index=\"0\" message_type_id=\"bd3a5291-0677-4b35-b821-4bd366a57592\" modulator_index=\"0\" participant_id=\"25bc0d02-ce8e-478e-a4d0-b22cfbab004a\" pause=\"52366\" timestamp=\"1521474143.9856267\"\/>\n+\n+            <message bits=\"10101010101010101010101010101010111010011100101011101001110010100000101100100110101001100100000000111001001001111100110000110001000000011100110000000001000010010110001011010000\" decoding_index=\"0\" message_type_id=\"fe1be813-fc18-44bc-8931-40a35cab9c8c\" modulator_index=\"0\" participant_id=\"af97bec6-d417-47d8-a112-94c0015e1d73\" pause=\"219416\" timestamp=\"1521474143.9855523\"\/>\n+      <message bits=\"10101010101010101010101010101010111010011100101011101001110010100001000100100110101000000000001000110001000000011100110000111001001001111100110000000100000111001111011001000000010000100100000101010001000000101101101111111101\" decoding_index=\"0\" message_type_id=\"7880a7fd-7ea0-44bb-8016-ddaee5df84ec\" modulator_index=\"0\" participant_id=\"25bc0d02-ce8e-478e-a4d0-b22cfbab004a\" pause=\"203576\" timestamp=\"1521474143.9855769\"\/>\n+      <message bits=\"101010101010101010101010101010101110100111001010111010011100101000011001001001101010000000000011001110010010011111001100001100010000000111001100100100110010110101100001010001110100100101000001101101001101001001010000000001010001000011010100110110110100001010111110011001000010111101011000\" decoding_index=\"0\" message_type_id=\"e66e6119-d636-4165-b3b3-30e32c0ce8c5\" modulator_index=\"0\" participant_id=\"af97bec6-d417-47d8-a112-94c0015e1d73\" pause=\"198614\" timestamp=\"1521474143.985602\"\/>\n+      <message bits=\"10101010101010101010101010101010111010011100101011101001110010100000111000100110100000000000001000110001000000011100110000111001001001111100110000000000010011111101100000110011110011101001111000100101\" decoding_index=\"0\" message_type_id=\"bd3a5291-0677-4b35-b821-4bd366a57592\" modulator_index=\"0\" participant_id=\"25bc0d02-ce8e-478e-a4d0-b22cfbab004a\" pause=\"52366\" timestamp=\"1521474143.9856267\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"71c8bbbf-00cd-4e2a-a82d-3e0f7315a7d7\" name=\"default\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"80\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"72\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"88\" fuzz_me=\"2\" fuzz_values=\"\" name=\"control\" show=\"2\" start=\"80\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"96\" fuzz_me=\"2\" fuzz_values=\"\" name=\"type\" show=\"2\" start=\"88\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"6\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"120\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"96\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"7\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"144\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"120\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"8\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"160\" fuzz_me=\"2\" fuzz_values=\"\" name=\"command\" show=\"2\" start=\"144\"\/>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"1\" id=\"fe1be813-fc18-44bc-8931-40a35cab9c8c\" name=\"mframe\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"32\" fuzz_me=\"0\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"64\" fuzz_me=\"0\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"72\" fuzz_me=\"0\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"80\" fuzz_me=\"0\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"72\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"88\" fuzz_me=\"0\" fuzz_values=\"\" name=\"control\" show=\"2\" start=\"80\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"96\" fuzz_me=\"0\" fuzz_values=\"\" name=\"type\" show=\"2\" start=\"88\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"6\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"120\" fuzz_me=\"0\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"96\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"7\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"144\" fuzz_me=\"0\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"120\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"8\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"160\" fuzz_me=\"2\" fuzz_values=\"\" name=\"command\" show=\"2\" start=\"144\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"9\" data_ranges=\"[[64, 160]]\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"176\" fuzz_me=\"0\" fuzz_values=\"\" name=\"crc\" show=\"2\" start=\"160\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\">\n+            <rule _Rule__end=\"18\" _Rule__start=\"16\" _Rule__value_type=\"1\" operator=\"=\" target_value=\"0b\"\/>\n+         <\/ruleset>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"1\" id=\"7880a7fd-7ea0-44bb-8016-ddaee5df84ec\" name=\"cframe\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"80\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"72\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"88\" fuzz_me=\"2\" fuzz_values=\"\" name=\"control\" show=\"2\" start=\"80\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"96\" fuzz_me=\"2\" fuzz_values=\"\" name=\"type\" show=\"2\" start=\"88\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"6\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"120\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"96\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"7\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"144\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"120\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"152\" fuzz_me=\"2\" fuzz_values=\"\" name=\"command\" show=\"2\" start=\"144\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"8\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"200\" fuzz_me=\"2\" fuzz_values=\"\" name=\"challenge\" show=\"2\" start=\"152\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"21\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"208\" fuzz_me=\"2\" fuzz_values=\"\" name=\"magic\" show=\"2\" start=\"200\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"9\" data_ranges=\"[[64, 208]]\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"224\" fuzz_me=\"2\" fuzz_values=\"\" name=\"crc\" show=\"2\" start=\"208\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\">\n+            <rule _Rule__end=\"18\" _Rule__start=\"16\" _Rule__value_type=\"1\" operator=\"=\" target_value=\"11\"\/>\n+         <\/ruleset>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"1\" id=\"e66e6119-d636-4165-b3b3-30e32c0ce8c5\" name=\"rframe\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"32\" fuzz_me=\"0\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"64\" fuzz_me=\"0\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"72\" fuzz_me=\"0\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"80\" fuzz_me=\"0\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"72\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"88\" fuzz_me=\"0\" fuzz_values=\"\" name=\"control\" show=\"2\" start=\"80\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"96\" fuzz_me=\"0\" fuzz_values=\"\" name=\"type\" show=\"2\" start=\"88\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"6\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"120\" fuzz_me=\"0\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"96\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"7\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"144\" fuzz_me=\"0\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"120\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"8\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"272\" fuzz_me=\"0\" fuzz_values=\"\" name=\"cipher\" show=\"2\" start=\"144\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"9\" data_ranges=\"[[64, 272]]\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"288\" fuzz_me=\"0\" fuzz_values=\"\" name=\"crc\" show=\"2\" start=\"272\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\">\n+            <rule _Rule__end=\"18\" _Rule__start=\"16\" _Rule__value_type=\"1\" operator=\"=\" target_value=\"19\"\/>\n+         <\/ruleset>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"1\" id=\"bd3a5291-0677-4b35-b821-4bd366a57592\" name=\"aframe\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"80\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"72\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"88\" fuzz_me=\"2\" fuzz_values=\"\" name=\"control\" show=\"2\" start=\"80\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"96\" fuzz_me=\"2\" fuzz_values=\"\" name=\"type\" show=\"2\" start=\"88\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"6\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"120\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"96\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"7\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"144\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"120\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"8\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"152\" fuzz_me=\"2\" fuzz_values=\"\" name=\"command\" show=\"2\" start=\"144\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"19\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"184\" fuzz_me=\"2\" fuzz_values=\"\" name=\"auth\" show=\"2\" start=\"152\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"9\" data_ranges=\"[[64, 184]]\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"200\" fuzz_me=\"2\" fuzz_values=\"\" name=\"crc\" show=\"2\" start=\"184\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\">\n+            <rule _Rule__end=\"18\" _Rule__start=\"16\" _Rule__value_type=\"1\" operator=\"=\" target_value=\"0e\"\/>\n+         <\/ruleset>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"260c8eb1-0be0-45e6-b97a-63a2fb6ddcbe\" name=\"test\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"80\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"72\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"88\" fuzz_me=\"2\" fuzz_values=\"\" name=\"control\" show=\"2\" start=\"80\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"96\" fuzz_me=\"2\" fuzz_values=\"\" name=\"type\" show=\"2\" start=\"88\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"6\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"120\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"96\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"7\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"144\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"120\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"8\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"160\" fuzz_me=\"2\" fuzz_values=\"\" name=\"command\" show=\"2\" start=\"144\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"10\" data_ranges=\"[[64, 184]]\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"200\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"184\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"11\" data_ranges=\"[[64, 200]]\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"216\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"200\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"9\" data_ranges=\"[[64, 208]]\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"224\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"208\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"1\" id=\"4b6f81f6-e792-4a49-9c64-f84869042d35\" name=\"m2frame\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_format_index=\"0\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_format_index=\"3\" end=\"80\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"72\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"88\" fuzz_me=\"2\" fuzz_values=\"\" name=\"control\" show=\"2\" start=\"80\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"96\" fuzz_me=\"2\" fuzz_values=\"\" name=\"type\" show=\"2\" start=\"88\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"6\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"120\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"96\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"7\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"144\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"120\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"8\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"176\" fuzz_me=\"2\" fuzz_values=\"\" name=\"command (c800 = an\/0000 = aus)\" show=\"2\" start=\"144\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"9\" data_ranges=\"[[64, 176]]\" display_bit_order_index=\"0\" display_format_index=\"1\" end=\"192\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"176\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\">\n+            <rule _Rule__end=\"18\" _Rule__start=\"16\" _Rule__value_type=\"1\" operator=\"=\" target_value=\"0d\"\/>\n+         <\/ruleset>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/no_preamble24.proto.xml b\/tests\/data\/no_preamble24.proto.xml\nnew file mode 100644\nindex 0000000..9ab8c9f\n--- \/dev\/null\n+++ b\/tests\/data\/no_preamble24.proto.xml\n@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"24\" color_index=\"0\" id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"ff\" color_index=\"0\" id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10001110100010000000101100100100000000000010001001101111100111001100111000100111101011010000101110110100\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.2445836\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.2450266\"\/>\n+      <message bits=\"10001110100010000000101100100100000000100110100010000011000000001010111111110100000110000001001010111011\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.2451315\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.2455661\"\/>\n+      <message bits=\"10001110100010000000101100100100000001000010010001010000101100111111010000001110111110101001000110000010\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.2456713\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.2461102\"\/>\n+      <message bits=\"10001110100010000000101100100100000001100100110100110011011101011001000001110011000111110011010111111110\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.2462142\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.246646\"\/>\n+      <message bits=\"10001110100010000000101100100100000010001011110110111011001111011100011010011110010000110110011000100001\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.246749\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.247183\"\/>\n+      <message bits=\"10001110100010000000101100100100000010101101111001000001010001101111001000011010011000101101100100000111\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.2472858\"\/>\n+      <message bits=\"100011101000100001000011111111110000101111110000011000010100110111101110111001010110100100010101100001101100001010111000011100010100110001001100010000101100011001010000111010010110100100000101100111101110101100100110000111010101100010000010101000011100001101110011100010110010001011001100111011111110010011011100111111111101101000011110000110101011100001101110111010011100100001100100101101110011000000011001011001010000010100100001011011001111000100100010110010110111101110111101111100101111011101000111001100111110011100100110101101101001011111100100\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.2477283\"\/>\n+      <message bits=\"10001110100010000000101100100100000011000001100010100001101010001100110101011111001001100110011010101100\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.247833\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.2482684\"\/>\n+      <message bits=\"10001110100010000000101100100100000011101110000100001011101001111011110100001111101001000011010111100001\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.248369\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.248802\"\/>\n+      <message bits=\"10001110100010000000101100100100000100000011000110011100010001100011001110110010000110100101000101111111\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.2489023\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.2493317\"\/>\n+      <message bits=\"10001110100010000000101100100100000100101001101000100010010001111111101010110000011111001101001000010110\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.2494464\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.249895\"\/>\n+      <message bits=\"10001110100010000000101100100100000101001100001111001111010100110100111001110010111100011001111111010001\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.2500026\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.250436\"\/>\n+      <message bits=\"10001110100010000000101100100100000101100110100111110010101011010100111101100111010010011110000000000011\" message_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"620a1554-6165-4c39-a70f-4589f1cbb676\" pause=\"0\" timestamp=\"1555689161.2505386\"\/>\n+      <message bitsmessage_type_id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" modulator_index=\"0\" participant_id=\"4aecf437-af22-4807-bd16-2f0c3ce89dd9\" pause=\"0\" timestamp=\"1555689161.2509718\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"2233086c-7b73-41c0-a77a-a8fa90d2aac3\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"24\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"32\"\/>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/one_address_one_mt.proto.xml b\/tests\/data\/one_address_one_mt.proto.xml\nnew file mode 100644\nindex 0000000..0e3217c\n--- \/dev\/null\n+++ b\/tests\/data\/one_address_one_mt.proto.xml\n@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"24\" color_index=\"0\" id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"ff\" color_index=\"0\" id=\"51fab56e-162a-4ce5-97e9-e8ba7b3fadaa\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10001110100010000000101100100100000000000110001110100011000001001000110111000011001000111001000100010000\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" pause=\"0\" timestamp=\"1555669475.1550896\"\/>\n+      <message bitsmessage_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"51fab56e-162a-4ce5-97e9-e8ba7b3fadaa\" pause=\"0\" timestamp=\"1555669475.1555722\"\/>\n+      <message bits=\"10001110100010000000101100100100000000101010110011111110011100001001001101100010010101111011111011110100\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" pause=\"0\" timestamp=\"1555669475.1556861\"\/>\n+      <message bitsmessage_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"51fab56e-162a-4ce5-97e9-e8ba7b3fadaa\" pause=\"0\" timestamp=\"1555669475.1561267\"\/>\n+      <message bits=\"10001110100010000000101100100100000001001000000100011101000001101000111100100001100010011101110011100001\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" pause=\"0\" timestamp=\"1555669475.156232\"\/>\n+      <message bitsmessage_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"51fab56e-162a-4ce5-97e9-e8ba7b3fadaa\" pause=\"0\" timestamp=\"1555669475.1566684\"\/>\n+      <message bits=\"10001110100010000000101100100100000001100001001010001011011110111101001011100101010101111011011101101100\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" pause=\"0\" timestamp=\"1555669475.1567736\"\/>\n+      <message bits=\"100011101000100001000011111111110000011110000010000001101001000111001110111011110100111011101010110010101110010110011100001101000000101010000101110100110110011101111100110101011000011100110100110111000111001010101010101011110000111110110110010101010110001001110110000000001010100011100111001010110011001101001101111000100010010111000001000001111010000001001001111111000010111000100101000100111101110111001111000110000001010110100111110011111000010010011101011010000000000010010110111000111010011111011001001001001111111111000000001001011111111010000111\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"51fab56e-162a-4ce5-97e9-e8ba7b3fadaa\" pause=\"0\" timestamp=\"1555669475.1572134\"\/>\n+      <message bits=\"10001110100010000000101100100100000010000001010010001111100000000101001110110101000010111011111001010110\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" pause=\"0\" timestamp=\"1555669475.157318\"\/>\n+      <message bitsmessage_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"51fab56e-162a-4ce5-97e9-e8ba7b3fadaa\" pause=\"0\" timestamp=\"1555669475.1577613\"\/>\n+      <message bits=\"10001110100010000000101100100100000010101100100100000011000110001000010001111010111100000110011100110010\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" pause=\"0\" timestamp=\"1555669475.1578667\"\/>\n+      <message bits=\"100011101000100001000011111111110000101110111101011111111010101110000111110011010010000010100000001010001000101110001001001101001101101010010010010010000110001110001010010000111000000110111100110010111110101100001010100011100100101100101110001100101011001100010111100101100100010001010110111010001010111110011010010110111001100011010001000010100010000100000110010100101110101000110001000110110001101110001011001011001100001010000101110000100011000110011111111101000111001111000001001100000100011010000110001010101011010011010101000010101001011110011111\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"51fab56e-162a-4ce5-97e9-e8ba7b3fadaa\" pause=\"0\" timestamp=\"1555669475.1583233\"\/>\n+      <message bits=\"10001110100010000000101100100100000011000010101101110000111101110010101100011000111011110011100110010111\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" pause=\"0\" timestamp=\"1555669475.158428\"\/>\n+      <message bitsmessage_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"51fab56e-162a-4ce5-97e9-e8ba7b3fadaa\" pause=\"0\" timestamp=\"1555669475.1588635\"\/>\n+      <message bits=\"10001110100010000000101100100100000011101110110011101011000100000001010101011111110010101011000000110011\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" pause=\"0\" timestamp=\"1555669475.1589677\"\/>\n+      <message bits=\"100011101000100001000011111111110000111111010010100110000110011111011010110000101000000010101111100110110101110101000100011100001111111100101101110011101011111001011111110001100101101110011010111010101000000111101101101010011101101100101110001101000110111101010101010100101100010111010011001111110100100011101101100101001000100101100000010001000010111010110001101110011001010001010000100111101111110011010101100001011110101100100101000010100100000111010111011000101001000110011010111000101110111010011010110101010010001001000001101010000001111000001001\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"51fab56e-162a-4ce5-97e9-e8ba7b3fadaa\" pause=\"0\" timestamp=\"1555669475.1594067\"\/>\n+      <message bits=\"10001110100010000000101100100100000100001100001110010000010101110001100111100100001101001010000100101101\" message_type_id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" modulator_index=\"0\" participant_id=\"0f2ce9da-0397-4db3-844e-91688e537fc9\" pause=\"0\" timestamp=\"1555669475.1595085\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"2cdbaa88-1320-45ee-a1de-b081b60c4d65\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"24\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"32\"\/>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/only_one_address.proto.xml b\/tests\/data\/only_one_address.proto.xml\nnew file mode 100644\nindex 0000000..1e386ef\n--- \/dev\/null\n+++ b\/tests\/data\/only_one_address.proto.xml\n@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"24\" color_index=\"0\" id=\"a72bad89-ba8e-4215-a38c-64fc3caf6d9f\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"ff\" color_index=\"0\" id=\"87ae00cf-824c-4def-ad35-e5b99088cb78\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10001110100010000000101100100100000000001101110100110001011000011110001011111110001110101100111100110001\" message_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"a72bad89-ba8e-4215-a38c-64fc3caf6d9f\" pause=\"0\" timestamp=\"1555666943.0740108\"\/>\n+      <message bitsmessage_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"87ae00cf-824c-4def-ad35-e5b99088cb78\" pause=\"0\" timestamp=\"1555666943.0744684\"\/>\n+      <message bits=\"10001110100010000000101100100100000000100100100110000110111001100010111010001111010000000110111100111000\" message_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"a72bad89-ba8e-4215-a38c-64fc3caf6d9f\" pause=\"0\" timestamp=\"1555666943.0745783\"\/>\n+      <message bitsmessage_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"87ae00cf-824c-4def-ad35-e5b99088cb78\" pause=\"0\" timestamp=\"1555666943.0750256\"\/>\n+      <message bits=\"10001110100010000000101100100100000001001100000110110010011010001010011101001100001011001101011110110010\" message_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"a72bad89-ba8e-4215-a38c-64fc3caf6d9f\" pause=\"0\" timestamp=\"1555666943.0751328\"\/>\n+      <message bitsmessage_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"87ae00cf-824c-4def-ad35-e5b99088cb78\" pause=\"0\" timestamp=\"1555666943.0755692\"\/>\n+      <message bits=\"10001110100010000000101100100100000001100000101000101010011110111110101001111110100110100100000000000011\" message_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"a72bad89-ba8e-4215-a38c-64fc3caf6d9f\" pause=\"0\" timestamp=\"1555666943.0756724\"\/>\n+      <message bitsmessage_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"87ae00cf-824c-4def-ad35-e5b99088cb78\" pause=\"0\" timestamp=\"1555666943.076105\"\/>\n+      <message bits=\"10001110100010000000101100100100000010001011111000100011000010011111010100001001000001110101000100000110\" message_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"a72bad89-ba8e-4215-a38c-64fc3caf6d9f\" pause=\"0\" timestamp=\"1555666943.076208\"\/>\n+      <message bitsmessage_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"87ae00cf-824c-4def-ad35-e5b99088cb78\" pause=\"0\" timestamp=\"1555666943.0766418\"\/>\n+      <message bits=\"10001110100010000000101100100100000010100101101100010111111110111000110010101111110011011111011001011100\" message_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"a72bad89-ba8e-4215-a38c-64fc3caf6d9f\" pause=\"0\" timestamp=\"1555666943.0767453\"\/>\n+      <message bitsmessage_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"87ae00cf-824c-4def-ad35-e5b99088cb78\" pause=\"0\" timestamp=\"1555666943.0771825\"\/>\n+      <message bits=\"10001110100010000000101100100100000011001000011111111011000100010110001110010011001111110001011111000100\" message_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"a72bad89-ba8e-4215-a38c-64fc3caf6d9f\" pause=\"0\" timestamp=\"1555666943.0772855\"\/>\n+      <message bitsmessage_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"87ae00cf-824c-4def-ad35-e5b99088cb78\" pause=\"0\" timestamp=\"1555666943.0777206\"\/>\n+      <message bits=\"10001110100010000000101100100100000011101000110001100111011110011010000101100010100001101101001010110110\" message_type_id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" modulator_index=\"0\" participant_id=\"a72bad89-ba8e-4215-a38c-64fc3caf6d9f\" pause=\"0\" timestamp=\"1555666943.0778227\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"231583ad-85a9-4a03-9193-fed2a099dd06\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"24\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"32\"\/>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/rwe.proto.xml b\/tests\/data\/rwe.proto.xml\nnew file mode 100644\nindex 0000000..bb3504d\n--- \/dev\/null\n+++ b\/tests\/data\/rwe.proto.xml\n@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"\" color_index=\"0\" id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"\" color_index=\"0\" id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"1010101010101010101010101010101010011010011111011001101001111101001011011000000001110000111000000000000000000011000110110110000000110011000000000000000100000000010000000011000000010100111101110100100010011100010110010100010100000000000000000000111111001001101101100000000000000001000000000000000000000000000000100000000100000100000101110000000000000010000000010000001010001100001111010111011100000000110110111011101101111011100110001100111010001111\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0564606\"\/>\n+      <message bits=\"1010101010101010101010101010101001100111011010000110011101101000000001100001101101100000001100110111100011100010100010010011001000101011\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0565019\"\/>\n+      <message bits=\"10101010101010101010101010101010100110100111110110011010011111010011001000000000011100000001101101100000001100110111100011100010100010011100000000000001000001000000001000000110011100100100100110010111111110101010000011011101011011110000111101010111101010001001010010000111111101010111100101011010101001110111011011111110010101111100111000100100110100001111101111001011111001011000100010101011011001110001111010110101111100100110011001010011111011111011010101100111011010000011101010011101\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0565794\"\/>\n+      <message bits=\"1010101010101010101010101010101010011010011111011001101001111101000000110111100011100010100010010111010101111110\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0566103\"\/>\n+      <message bits=\"101010101010101010101010101010100110011101101000011001110110100000010011001000000111000001111000111000101000100100011011011000000011001100000000000000000000000000000000101001000011011110100110001001011001101110000110011000001101110100000111\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0566554\"\/>\n+      <message bits=\"1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.056684\"\/>\n+      <message bits=\"10101010101010101010101010101010011001110110100001100111011010000001101000100000011100000001101101100000001100110111100011100010100010010000000000001100011000100000111001100110101001001000110001101101000011000111110011111110110100011111001110111100100011101110101011100001011000011011000001010111\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0567355\"\/>\n+      <message bits=\"1010101010101010101010101010101001100111011010000110011101101000000000110111100011100010100010010111010101111110\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0567644\"\/>\n+      <message bits=\"101010101010101010101010101010100110011101101000011001110110100000010011001000000111000001111000111000101000100100011011011000000011001100000000000000000000000000000001010110110100111000100100010001011010101101010011100001100100011011110101\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0568085\"\/>\n+      <message bits=\"1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0568366\"\/>\n+      <message bits=\"10101010101010101010101010101010011001110110100001100111011010000001101000100000011100000001101101100000001100110111100011100010100010010000000000001100011000100000111100111010000110001010100101011000010001101001000000010100101100011110011100010001000011000001001010000010000100111010010010110101\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0568879\"\/>\n+      <message bits=\"1010101010101010101010101010101001100111011010000110011101101000000000110111100011100010100010010111010101111110\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0569162\"\/>\n+      <message bits=\"101010101010101010101010101010100110011101101000011001110110100000010011001000000111000001111000111000101000100100011011011000000011001100000000000000000000000000000010101011111011101010110000010001110000110000011110000001110101101011001001\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0569596\"\/>\n+      <message bits=\"1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0569878\"\/>\n+      <message bits=\"10101010101010101010101010101010011001110110100001100111011010000001010000100000011100000001101101100000001100110111100011100010100010010000000000001100011000100001000010011100100000101001100001010000001111001101001011110010111001000100001010011101\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0570323\"\/>\n+      <message bits=\"1010101010101010101010101010101001100111011010000110011101101000000000110111100011100010100010010111010101111110\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0570602\"\/>\n+      <message bits=\"101010101010101010101010101010100110011101101000011001110110100000010011001000000111000001111000111000101000100100011011011000000011001100000000000000000000000000000011110000010100111010111110000000011011011111011111010011010011011011110100\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0571043\"\/>\n+      <message bits=\"1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0571327\"\/>\n+      <message bits=\"10101010101010101010101010101010011001110110100001100111011010000001010000100000011100000001101101100000001100110111100011100010100010010000000000001100011000100001000110010011100100111011000011111110001110100011111011110100000000010011011000011001\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0571775\"\/>\n+      <message bits=\"10101010101010101010101010101010011001110110100001100111011010000001011101100000011100000111100011100010100010010001101101100000001100110000000000000000000000000000010010011111101101101111001010101100111100000101101000011101001010110110000111100110000000111100010000100111\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"35ccf7f6-73ac-4beb-820b-77ec63bd1d22\" pause=\"0\" timestamp=\"1555932101.0572255\"\/>\n+      <message bits=\"1010101010101010101010101010101001100111011010000110011101101000000000110001101101100000001100111111110101010111\" message_type_id=\"8c5fc93f-217a-4623-b886-774164a66499\" modulator_index=\"0\" participant_id=\"cbee06c0-bda5-4082-bb32-11ed0fd3e94e\" pause=\"0\" timestamp=\"1555932101.0572596\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"8c5fc93f-217a-4623-b886-774164a66499\" name=\"Default\">\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/three_syncs.proto.xml b\/tests\/data\/three_syncs.proto.xml\nnew file mode 100644\nindex 0000000..255939e\n--- \/dev\/null\n+++ b\/tests\/data\/three_syncs.proto.xml\n@@ -0,0 +1,64 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"313370\" color_index=\"0\" id=\"ca651944-2c08-409d-9645-ee7dcad4a6f9\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"031337\" color_index=\"0\" id=\"c521b246-34e7-464d-81ae-3d134878aa9b\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+      <participant address_hex=\"110000\" color_index=\"0\" id=\"dad420b6-8dfa-4b23-92d7-76052a17049a\" name=\"Charly\" relative_rssi=\"0\" shortname=\"C\" simulate=\"0\"\/>\n+      <participant address_hex=\"001100\" color_index=\"0\" id=\"6a4b83d4-5b8e-430a-b3c8-fff6679e819e\" name=\"Daniel\" relative_rssi=\"0\" shortname=\"D\" simulate=\"0\"\/>\n+      <participant address_hex=\"100100\" color_index=\"0\" id=\"2059e6f0-4a33-42d4-a51a-aa26c0b83ce1\" name=\"Emy\" relative_rssi=\"0\" shortname=\"E\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10101010101010100000010000100000000101010000001100010011001101110011000100110011011100000000000000000000000000000000000000111100110100011010000110011001000110011101000000111001101110001001101011111010\" message_type_id=\"0fc912a8-2798-4f64-bbb4-2199d9121ba0\" modulator_index=\"0\" participant_id=\"ca651944-2c08-409d-9645-ee7dcad4a6f9\" pause=\"0\" timestamp=\"1555659574.379962\"\/>\n+      <message bits=\"1010101000100010001000100011000100110011011100000010011011110111\" message_type_id=\"55209b62-9eb6-4cec-8c86-d17436bd3866\" modulator_index=\"0\" participant_id=\"c521b246-34e7-464d-81ae-3d134878aa9b\" pause=\"0\" timestamp=\"1555659574.380043\"\/>\n+      <message bitsmessage_type_id=\"7a3d3afd-3c8b-45d1-ad26-98fa7aa323e4\" modulator_index=\"0\" participant_id=\"c521b246-34e7-464d-81ae-3d134878aa9b\" pause=\"0\" timestamp=\"1555659574.3805306\"\/>\n+      <message bits=\"1010101000100010001000100000001100010011001101111110010010001101\" message_type_id=\"55209b62-9eb6-4cec-8c86-d17436bd3866\" modulator_index=\"0\" participant_id=\"dad420b6-8dfa-4b23-92d7-76052a17049a\" pause=\"0\" timestamp=\"1555659574.380608\"\/>\n+      <message bits=\"10101010101010100000010000100000000101010000000000010001000000000001000100000000000000000000000000000000000000000000000101001111101101001111010000011000101101110111110110100000011101010001011100001110\" message_type_id=\"0fc912a8-2798-4f64-bbb4-2199d9121ba0\" modulator_index=\"0\" participant_id=\"dad420b6-8dfa-4b23-92d7-76052a17049a\" pause=\"0\" timestamp=\"1555659574.380769\"\/>\n+      <message bits=\"1010101000100010001000100001000100000000000000001000111101010111\" message_type_id=\"55209b62-9eb6-4cec-8c86-d17436bd3866\" modulator_index=\"0\" participant_id=\"6a4b83d4-5b8e-430a-b3c8-fff6679e819e\" pause=\"0\" timestamp=\"1555659574.3808384\"\/>\n+      <message bits=\"1010101010101010101010100110011101100111000100000000000100000000000000000001000100000000100011000000000110011110011001001101111011000101011001101100010111100000010001011110011101011111001011001111000000101110010000000100100100101100000111110000001111001100100000010101001011010110010100101011010011001100001001000010101000110100110010010011110110001001010111101000100100001011110101011010001110000100101110011000001111010000100000101110011100001011000010100000010000110001111000100110100101100010110001010111001000101010011111000111100010010111000010010011101100100011010101100100101010111110001010010001000110000111\" message_type_id=\"7a3d3afd-3c8b-45d1-ad26-98fa7aa323e4\" modulator_index=\"0\" participant_id=\"6a4b83d4-5b8e-430a-b3c8-fff6679e819e\" pause=\"0\" timestamp=\"1555659574.3813257\"\/>\n+      <message bits=\"1010101000100010001000100000000000010001000000001110100000000011\" message_type_id=\"55209b62-9eb6-4cec-8c86-d17436bd3866\" modulator_index=\"0\" participant_id=\"2059e6f0-4a33-42d4-a51a-aa26c0b83ce1\" pause=\"0\" timestamp=\"1555659574.3813984\"\/>\n+      <message bits=\"10101010101010100000010000100000000101010011000100110011011100000001000000000001000000000000000000000000000000000000001010100111111101000101100010010110001000110001111010000011001011110010000110000001\" message_type_id=\"0fc912a8-2798-4f64-bbb4-2199d9121ba0\" modulator_index=\"0\" participant_id=\"2059e6f0-4a33-42d4-a51a-aa26c0b83ce1\" pause=\"0\" timestamp=\"1555659574.381552\"\/>\n+      <message bits=\"1010101000100010001000100001000000000001000000001000100101000011\" message_type_id=\"55209b62-9eb6-4cec-8c86-d17436bd3866\" modulator_index=\"0\" participant_id=\"ca651944-2c08-409d-9645-ee7dcad4a6f9\" pause=\"0\" timestamp=\"1555659574.3816187\"\/>\n+      <message bits=\"1010101010101010101010100110011101100111000000110001001100110111001100010011001101110000011111110111010010100101100111010111001100101100000011100110101111100110000000000100000001001011101010111110101000011111001111001000101100101011101000001110100110101111100110000000110100101110010110011101010100101101011000010011111001011011100101100011110100000101110001000110001111011101001100110010010100000010101111111000000010111011001110101101100101100000110010010000000011001011100010011111000001000101110110001010001101000010010101101110101101110010101001000111111101111110000101111001100010101110110101111101110110011111\" message_type_id=\"7a3d3afd-3c8b-45d1-ad26-98fa7aa323e4\" modulator_index=\"0\" participant_id=\"ca651944-2c08-409d-9645-ee7dcad4a6f9\" pause=\"0\" timestamp=\"1555659574.3821049\"\/>\n+      <message bits=\"1010101000100010001000100011000100110011011100000010011011110111\" message_type_id=\"55209b62-9eb6-4cec-8c86-d17436bd3866\" modulator_index=\"0\" participant_id=\"c521b246-34e7-464d-81ae-3d134878aa9b\" pause=\"0\" timestamp=\"1555659574.3821757\"\/>\n+      <message bits=\"10101010101010100000010000100000000101010001000100000000000000000000001100010011001101110000000000000000000000000000001100101110110010110010010001110101110100100110011100101101010011011100111101100110\" message_type_id=\"0fc912a8-2798-4f64-bbb4-2199d9121ba0\" modulator_index=\"0\" participant_id=\"c521b246-34e7-464d-81ae-3d134878aa9b\" pause=\"0\" timestamp=\"1555659574.3823378\"\/>\n+      <message bits=\"1010101000100010001000100000001100010011001101111110010010001101\" message_type_id=\"55209b62-9eb6-4cec-8c86-d17436bd3866\" modulator_index=\"0\" participant_id=\"dad420b6-8dfa-4b23-92d7-76052a17049a\" pause=\"0\" timestamp=\"1555659574.3824053\"\/>\n+      <message bitsmessage_type_id=\"7a3d3afd-3c8b-45d1-ad26-98fa7aa323e4\" modulator_index=\"0\" participant_id=\"dad420b6-8dfa-4b23-92d7-76052a17049a\" pause=\"0\" timestamp=\"1555659574.38289\"\/>\n+      <message bits=\"1010101000100010001000100001000100000000000000001000111101010111\" message_type_id=\"55209b62-9eb6-4cec-8c86-d17436bd3866\" modulator_index=\"0\" participant_id=\"6a4b83d4-5b8e-430a-b3c8-fff6679e819e\" pause=\"0\" timestamp=\"1555659574.3829634\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"0fc912a8-2798-4f64-bbb4-2199d9121ba0\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"40\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"88\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"120\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"88\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"6\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"184\" fuzz_me=\"2\" fuzz_values=\"\" name=\"data\" show=\"2\" start=\"120\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"7\" data_ranges=\"[(32, 184)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"200\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"184\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"55209b62-9eb6-4cec-8c86-d17436bd3866\" name=\"ack\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"8\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"8\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"48\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"24\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"3\" data_ranges=\"[(24, 48)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"48\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"7a3d3afd-3c8b-45d1-ad26-98fa7aa323e4\" name=\"kex\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"24\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"64\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"40\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"88\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"64\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"600\" fuzz_me=\"2\" fuzz_values=\"\" name=\"data\" show=\"2\" start=\"88\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"5\" data_ranges=\"[(40, 600)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"616\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"600\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/with_checksum.proto.xml b\/tests\/data\/with_checksum.proto.xml\nnew file mode 100644\nindex 0000000..d99bdd6\n--- \/dev\/null\n+++ b\/tests\/data\/with_checksum.proto.xml\n@@ -0,0 +1,74 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"1337\" color_index=\"0\" id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"dead\" color_index=\"0\" id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" name=\"Bob\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111110111101010110110011100000000110110100101010110010011000001010110101001111100000110100011110000\" message_type_id=\"f174bbd6-730d-4345-a96e-8c64426aab38\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4818068\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4818964\"\/>\n+      <message bitsmessage_type_id=\"ebb5bfbc-0520-48c5-9be5-b027926c40aa\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.482383\"\/>\n+      <message bits=\"101010101010101010011010011111010000010111011110101011010100100110100101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4824667\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111110111101010110111110011010101111110011101100011110011111100011000100001110011101001001110010111\" message_type_id=\"f174bbd6-730d-4345-a96e-8c64426aab38\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.482614\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4826882\"\/>\n+      <message bitsmessage_type_id=\"ebb5bfbc-0520-48c5-9be5-b027926c40aa\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4831657\"\/>\n+      <message bits=\"101010101010101010011010011111010000010111011110101011010100100110100101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4832435\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111110111101010110100100010010101101000110010101010000010101111011101010111110000110001101001000110\" message_type_id=\"f174bbd6-730d-4345-a96e-8c64426aab38\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4833822\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4834535\"\/>\n+      <message bitsmessage_type_id=\"ebb5bfbc-0520-48c5-9be5-b027926c40aa\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4842484\"\/>\n+      <message bits=\"101010101010101010011010011111010000010111011110101011010100100110100101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4843838\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111110111101010110101110100100101001000100011011011100000001010110000110111101010110000111011100111\" message_type_id=\"f174bbd6-730d-4345-a96e-8c64426aab38\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4846282\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4847457\"\/>\n+      <message bits=\"101010101010101010011010011111010100011111011110101011010001001100110111001011010100011111000110000010010000101101011000001110010100101100100101010011000100001101100011010010100010001010011100100100101111011000100100010001101000011001101101100010100000001011101100011110000110101000010010010100111100100101011011110011010001101001001110101010010010110100010000011011111101111111001010101001101111011001101011010011111100111011100011100000010011100110010110100001011100001110011101100110101111111011011111111100100100011110110100000000011110111010101001110011011001111001111100000111001001010100111011\" message_type_id=\"ebb5bfbc-0520-48c5-9be5-b027926c40aa\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4856374\"\/>\n+      <message bits=\"101010101010101010011010011111010000010111011110101011010100100110100101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.48577\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111110111101010110101111001011000000100100010010110101010110110101110011011111100001100001110101101\" message_type_id=\"f174bbd6-730d-4345-a96e-8c64426aab38\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.48602\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4861407\"\/>\n+      <message bitsmessage_type_id=\"ebb5bfbc-0520-48c5-9be5-b027926c40aa\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4870408\"\/>\n+      <message bits=\"101010101010101010011010011111010000010111011110101011010100100110100101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4871705\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111110111101010110100100111000100111101101110100001011000111101010111011001111100001111001000001010\" message_type_id=\"f174bbd6-730d-4345-a96e-8c64426aab38\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.487412\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4875276\"\/>\n+      <message bitsmessage_type_id=\"ebb5bfbc-0520-48c5-9be5-b027926c40aa\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4884477\"\/>\n+      <message bits=\"101010101010101010011010011111010000010111011110101011010100100110100101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4885771\"\/>\n+      <message bits=\"10101010101010101001101001111101000011110001001100110111110111101010110111000011101000010101110111111001111001000010100101001111101011110001011001011100\" message_type_id=\"f174bbd6-730d-4345-a96e-8c64426aab38\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4888282\"\/>\n+      <message bits=\"101010101010101010011010011111010000010100010011001101111110010011110101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4889479\"\/>\n+      <message bitsmessage_type_id=\"ebb5bfbc-0520-48c5-9be5-b027926c40aa\" modulator_index=\"0\" participant_id=\"9b6ea414-1a46-4c47-99b5-fe64a19b74d3\" pause=\"0\" timestamp=\"1555606689.4898462\"\/>\n+      <message bits=\"101010101010101010011010011111010000010111011110101011010100100110100101\" message_type_id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" modulator_index=\"0\" participant_id=\"8a0e525e-a83c-4801-abd3-76c90cbe6468\" pause=\"0\" timestamp=\"1555606689.4899817\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"f174bbd6-730d-4345-a96e-8c64426aab38\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"56\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"40\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"56\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"136\" fuzz_me=\"2\" fuzz_values=\"\" name=\"data\" show=\"2\" start=\"72\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"6\" data_ranges=\"[(32, 136)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"152\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"136\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"ebb5bfbc-0520-48c5-9be5-b027926c40aa\" name=\"data2\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"56\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"40\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"4\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"56\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"5\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"584\" fuzz_me=\"2\" fuzz_values=\"\" name=\"data\" show=\"2\" start=\"72\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"6\" data_ranges=\"[(32, 584)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"600\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"584\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"c69799d8-6d0a-4a52-a4c0-ece4c2c876a3\" name=\"ack\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"preamble\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"32\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"56\" fuzz_me=\"2\" fuzz_values=\"\" name=\"destination address\" show=\"2\" start=\"40\"\/>\n+         <checksum_label apply_decoding=\"True\" auto_created=\"False\" category=\"generic\" color_index=\"4\" data_ranges=\"[(32, 56)]\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"72\" fuzz_me=\"2\" fuzz_values=\"\" name=\"checksum\" show=\"2\" start=\"56\">\n+            <crc final_xor=\"0000000000000000\" polynomial=\"11000000000000101\" ref_in=\"0\" ref_out=\"0\" start_value=\"1111111111111111\"\/>\n+         <\/checksum_label>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/without_ack_random_data.proto.xml b\/tests\/data\/without_ack_random_data.proto.xml\nnew file mode 100644\nindex 0000000..5af0057\n--- \/dev\/null\n+++ b\/tests\/data\/without_ack_random_data.proto.xml\n@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"24\" color_index=\"0\" id=\"9e444231-068f-4939-b05b-5aaefd0ecfd2\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"ff\" color_index=\"0\" id=\"a799c999-eed0-4286-b0e6-eded3dc5ceef\" name=\"Broadcast\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10001110100010000000101100100100000000001001010111000001010000100100011101000011111000010111110101010101\" message_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"9e444231-068f-4939-b05b-5aaefd0ecfd2\" pause=\"0\" timestamp=\"1555582589.8818839\"\/>\n+      <message bitsmessage_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"a799c999-eed0-4286-b0e6-eded3dc5ceef\" pause=\"0\" timestamp=\"1555582589.8823237\"\/>\n+      <message bits=\"10001110100010000000101100100100000000101011110010011100110111101010110101001000110010111110110110001110\" message_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"9e444231-068f-4939-b05b-5aaefd0ecfd2\" pause=\"0\" timestamp=\"1555582589.882432\"\/>\n+      <message bitsmessage_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"a799c999-eed0-4286-b0e6-eded3dc5ceef\" pause=\"0\" timestamp=\"1555582589.8828719\"\/>\n+      <message bits=\"10001110100010000000101100100100000001000011001100111111110010110010010111110100000010001100100001011011\" message_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"9e444231-068f-4939-b05b-5aaefd0ecfd2\" pause=\"0\" timestamp=\"1555582589.8829782\"\/>\n+      <message bitsmessage_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"a799c999-eed0-4286-b0e6-eded3dc5ceef\" pause=\"0\" timestamp=\"1555582589.883411\"\/>\n+      <message bits=\"10001110100010000000101100100100000001101011111001100100001010000100001111101110000101001011000101001110\" message_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"9e444231-068f-4939-b05b-5aaefd0ecfd2\" pause=\"0\" timestamp=\"1555582589.883512\"\/>\n+      <message bitsmessage_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"a799c999-eed0-4286-b0e6-eded3dc5ceef\" pause=\"0\" timestamp=\"1555582589.883943\"\/>\n+      <message bits=\"10001110100010000000101100100100000010000000011010010110110111000001011101110111111001001101011100001111\" message_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"9e444231-068f-4939-b05b-5aaefd0ecfd2\" pause=\"0\" timestamp=\"1555582589.8840458\"\/>\n+      <message bits=\"100011101000100001000011111111110000100110001101010101010011011101011100110000010010110010101000101111011000111000001101100100110010000110110000010010110110100000001101101101101010000111011011011101000000011111001010001111111110000101101011101100010011110010011000101000011110011101001000001110000111010101110101110001010111011110100101011010100000100001110000000000111101110110000100110010001110111001111101000010000001110010011010010111100100000110111110110001011100000111010000011100010111000001010000001010110100111101101111101100010101000111101011\" message_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"a799c999-eed0-4286-b0e6-eded3dc5ceef\" pause=\"0\" timestamp=\"1555582589.8844793\"\/>\n+      <message bits=\"10001110100010000000101100100100000010101110110100111100011001010000001011001111111101101010100001011110\" message_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"9e444231-068f-4939-b05b-5aaefd0ecfd2\" pause=\"0\" timestamp=\"1555582589.8845823\"\/>\n+      <message bitsmessage_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"a799c999-eed0-4286-b0e6-eded3dc5ceef\" pause=\"0\" timestamp=\"1555582589.8850236\"\/>\n+      <message bits=\"10001110100010000000101100100100000011000111101110010111111010011001001001010010011101111110110000111101\" message_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"9e444231-068f-4939-b05b-5aaefd0ecfd2\" pause=\"0\" timestamp=\"1555582589.8851268\"\/>\n+      <message bitsmessage_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"a799c999-eed0-4286-b0e6-eded3dc5ceef\" pause=\"0\" timestamp=\"1555582589.8855832\"\/>\n+      <message bits=\"10001110100010000000101100100100000011101000010110011000011101000000011110101101100001001100100011111010\" message_type_id=\"db547e71-617c-4b0a-952d-75553f165b0f\" modulator_index=\"0\" participant_id=\"9e444231-068f-4939-b05b-5aaefd0ecfd2\" pause=\"0\" timestamp=\"1555582589.885688\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"db547e71-617c-4b0a-952d-75553f165b0f\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"24\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"32\"\/>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/data\/without_ack_random_data2.proto.xml b\/tests\/data\/without_ack_random_data2.proto.xml\nnew file mode 100644\nindex 0000000..bada963\n--- \/dev\/null\n+++ b\/tests\/data\/without_ack_random_data2.proto.xml\n@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" ?>\n+<protocol>\n+   <decodings\/>\n+   <participants>\n+      <participant address_hex=\"24\" color_index=\"0\" id=\"baaadff4-66a0-4340-8921-9437a8892d49\" name=\"Alice\" relative_rssi=\"0\" shortname=\"A\" simulate=\"0\"\/>\n+      <participant address_hex=\"ff\" color_index=\"0\" id=\"aeec0af0-d44f-4dc5-a475-cf7772d83b56\" name=\"Broadcast\" relative_rssi=\"0\" shortname=\"B\" simulate=\"0\"\/>\n+   <\/participants>\n+   <messages>\n+      <message bits=\"10001110100010000000101100100100000000000100001001111000000001101111010001010101010110110011000000000001\" message_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"baaadff4-66a0-4340-8921-9437a8892d49\" pause=\"0\" timestamp=\"1555594861.6524687\"\/>\n+      <message bitsmessage_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"aeec0af0-d44f-4dc5-a475-cf7772d83b56\" pause=\"0\" timestamp=\"1555594861.6529274\"\/>\n+      <message bits=\"10001110100010000000101100100100000000101100110101010000001010111100110010100111011110011111100010000101\" message_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"baaadff4-66a0-4340-8921-9437a8892d49\" pause=\"0\" timestamp=\"1555594861.6530368\"\/>\n+      <message bits=\"100011101000100001000011111111110000001111110110000110010000000111000001100111010111111011001001010101110101011000010001010101000111111000100110110011110111101110100000110000100000000101101100000011111010010011111011011010101101000100010101100100100001011010011100111111000111111101111111010101011010011011001101100100100101110001011010001001111010100111010111100101100101101001011100101110100011010100010111111010011101111111100011111001100011011010101100110101100000110011101111010100111000010101111110001010110100000111101100011110001011111011101001\" message_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"aeec0af0-d44f-4dc5-a475-cf7772d83b56\" pause=\"0\" timestamp=\"1555594861.6534898\"\/>\n+      <message bits=\"10001110100010000000101100100100000001000011000011110111110100011111000111111000100011000111001000100010\" message_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"baaadff4-66a0-4340-8921-9437a8892d49\" pause=\"0\" timestamp=\"1555594861.653598\"\/>\n+      <message bitsmessage_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"aeec0af0-d44f-4dc5-a475-cf7772d83b56\" pause=\"0\" timestamp=\"1555594861.654055\"\/>\n+      <message bits=\"10001110100010000000101100100100000001100111001010000001010101101110101111110101111100100110110000001010\" message_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"baaadff4-66a0-4340-8921-9437a8892d49\" pause=\"0\" timestamp=\"1555594861.6541636\"\/>\n+      <message bitsmessage_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"aeec0af0-d44f-4dc5-a475-cf7772d83b56\" pause=\"0\" timestamp=\"1555594861.654611\"\/>\n+      <message bits=\"10001110100010000000101100100100000010001101110111110110011101001111001010111101111110001111000111010011\" message_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"baaadff4-66a0-4340-8921-9437a8892d49\" pause=\"0\" timestamp=\"1555594861.6547167\"\/>\n+      <message bitsmessage_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"aeec0af0-d44f-4dc5-a475-cf7772d83b56\" pause=\"0\" timestamp=\"1555594861.6551607\"\/>\n+      <message bits=\"10001110100010000000101100100100000010100010110111111100010110011100100101110011000000101111100010011011\" message_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"baaadff4-66a0-4340-8921-9437a8892d49\" pause=\"0\" timestamp=\"1555594861.655266\"\/>\n+      <message bitsmessage_type_id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" modulator_index=\"0\" participant_id=\"aeec0af0-d44f-4dc5-a475-cf7772d83b56\" pause=\"0\" timestamp=\"1555594861.6557095\"\/>\n+   <\/messages>\n+   <message_types>\n+      <message_type assigned_by_logic_analyzer=\"0\" assigned_by_ruleset=\"0\" id=\"d007bc7b-511c-40d7-892b-d25fd14fcdae\" name=\"data\">\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"0\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"0\" end=\"16\" fuzz_me=\"2\" fuzz_values=\"\" name=\"synchronization\" show=\"2\" start=\"0\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"1\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"24\" fuzz_me=\"2\" fuzz_values=\"\" name=\"length\" show=\"2\" start=\"16\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"2\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"1\" end=\"32\" fuzz_me=\"2\" fuzz_values=\"\" name=\"source address\" show=\"2\" start=\"24\"\/>\n+         <label apply_decoding=\"True\" auto_created=\"False\" color_index=\"3\" display_bit_order_index=\"0\" display_endianness=\"big\" display_format_index=\"3\" end=\"40\" fuzz_me=\"2\" fuzz_values=\"\" name=\"sequence number\" show=\"2\" start=\"32\"\/>\n+         <ruleset mode=\"0\"\/>\n+      <\/message_type>\n+   <\/message_types>\n+<\/protocol>\ndiff --git a\/tests\/test_CRC.py b\/tests\/test_CRC.py\nindex 26b9e8c..7d53723 100644\n--- a\/tests\/test_CRC.py\n+++ b\/tests\/test_CRC.py\n@@ -1,9 +1,11 @@\n-import unittest, time\n+import time\n+import unittest\n \n from urh.signalprocessing.Encoding import Encoding\n from urh.util import util\n from urh.util.GenericCRC import GenericCRC\n from urh.util.WSPChecksum import WSPChecksum\n+\n \n class TestCRC(unittest.TestCase):\n     def test_crc(self):\n@@ -31,6 +33,16 @@\n                     nv += \"1\"\n \n             self.assertEqual(util.bit2hex(c.crc(e.str2bit(value[4:-8]))), expect)\n+\n+    def test_crc8(self):\n+        messages = [\"aabbcc\", \"abcdee\", \"dacafe\"]\n+\n+        expected = [\"7d\", \"24\", \"33\"]\n+        crc = GenericCRC(polynomial=GenericCRC.DEFAULT_POLYNOMIALS[\"8_ccitt\"])\n+\n+        for msg, expect in zip(messages, expected):\n+            bits = util.hex2bit(msg)\n+            self.assertEqual(util.bit2hex(crc.crc(bits)), expect)\n \n     def test_different_crcs(self):\n         c = GenericCRC(polynomial=\"16_standard\", start_value=False, final_xor=False,\n@@ -92,6 +104,86 @@\n                 self.assertEqual(crc_new, crc_old)\n                 c.reverse_all = False\n \n+    def test_cache(self):\n+        c = GenericCRC(polynomial=\"16_standard\", start_value=False, final_xor=False,\n+                       reverse_polynomial=False, reverse_all=False, lsb_first=False, little_endian=False)\n+        c.calculate_cache(8)\n+        self.assertEqual(len(c.cache), 256)\n+\n+    def test_different_crcs_fast(self):\n+        c = GenericCRC(polynomial=\"16_standard\", start_value=False, final_xor=False,\n+                       reverse_polynomial=False, reverse_all=False, lsb_first=False, little_endian=False)\n+        bitstring_set = [\n+            \"10101010\",\n+            \"00000001\",\n+            \"000000010\",\n+            \"000000011\",\n+            \"0000000100000001\",\n+            \"101001001010101010101011101111111000000000000111101010011101011\",\n+            \"101001001010101101111010110111101010010110111010\",\n+            \"00000000000000000000000000000000100000000000000000000000000000000001111111111111\",\n+            \"1111111111111111111111111111111110111111111111111111110111111111111111110000000000\"\n+            \"1\"]\n+\n+        for j in c.DEFAULT_POLYNOMIALS:\n+            c.polynomial = c.choose_polynomial(j)\n+            for i in bitstring_set:\n+                for cache in [8, 4, 7, 12, 16]:\n+                    c.calculate_cache(cache)\n+                    # Standard\n+                    crc_new = c.cached_crc(c.str2bit(i))\n+                    crc_old = c.reference_crc(c.str2bit(i))\n+                    self.assertEqual(crc_old, crc_new)\n+\n+                    # Special final xor\n+                    c.final_xor = c.str2bit(\"0000111100001111\")\n+                    crc_new = c.cached_crc(c.str2bit(i))\n+                    crc_old = c.reference_crc(c.str2bit(i))\n+                    self.assertEqual(crc_old, crc_new)\n+                    c.final_xor = [False] * 16\n+\n+                    # Special start value\n+                    c.start_value = c.str2bit(\"1010101010101010\")\n+                    crc_new = c.cached_crc(c.str2bit(i))\n+                    crc_old = c.reference_crc(c.str2bit(i))\n+                    self.assertEqual(crc_old, crc_new)\n+                    c.start_value = [False] * 16\n+\n+                    # little_endian\n+                    c.little_endian = True\n+                    crc_new = c.cached_crc(c.str2bit(i))\n+                    crc_old = c.reference_crc(c.str2bit(i))\n+                    self.assertEqual(crc_old, crc_new)\n+                    c.little_endian = False\n+\n+                    # reverse all\n+                    c.reverse_all = True\n+                    crc_new = c.cached_crc(c.str2bit(i))\n+                    crc_old = c.reference_crc(c.str2bit(i))\n+                    self.assertEqual(crc_old, crc_new)\n+                    c.reverse_all = False\n+\n+                    # reverse_polynomial\n+                    # We need to clear the cache before and after\n+                    c.cache = []\n+                    #\n+                    c.reverse_polynomial = True\n+                    crc_new = c.cached_crc(c.str2bit(i))\n+                    crc_old = c.reference_crc(c.str2bit(i))\n+                    self.assertEqual(crc_old, crc_new)\n+                    c.reverse_polynomial = False\n+                    #\n+                    c.cache = []\n+\n+                    # TODO: Does only work for cachesize = 8\n+                    # lsb_first\n+                    c.calculate_cache(8)\n+                    c.lsb_first = True\n+                    crc_new = c.cached_crc(c.str2bit(i))\n+                    crc_old = c.reference_crc(c.str2bit(i))\n+                    self.assertEqual(crc_old, crc_new)\n+                    c.lsb_first = False\n+\n     def test_reverse_engineering(self):\n         c = GenericCRC(polynomial=\"16_standard\", start_value=False, final_xor=False,\n                        reverse_polynomial=False, reverse_all=False, lsb_first=False, little_endian=False)\n@@ -126,17 +218,17 @@\n                 self.assertEqual(val, crcs[j])\n                 inpt = \"0\" + inpt\n \n-    def test_guess_standard_parameters_and_datarange(self):\n+    def test_bruteforce_parameters_and_data_range(self):\n         c = GenericCRC(polynomial=\"16_ccitt\", start_value=False, final_xor=False,\n                        reverse_polynomial=False, reverse_all=False, lsb_first=False, little_endian=False)\n         inpt = \"101010101010101010000000111000000000000011100000001011010010110100000000111000000101001010000100000000000100111001111110010000000011011111111001001101100001100010100000000000111011110100010\"\n         vrfy_crc = \"0011101111010001\"\n \n-        result = c.guess_standard_parameters_and_datarange(c.str2arr(inpt), c.str2arr(vrfy_crc))\n+        result = c.bruteforce_parameters_and_data_range(c.str2arr(inpt), len(inpt)-len(vrfy_crc)-1)\n         self.assertEqual(result, (2, 84, 172))\n         self.assertEqual(vrfy_crc, c.bit2str(c.crc(c.str2arr(inpt[result[1]:result[2]]))))\n \n-    def test_guess_standard_parameters_and_datarange_improved(self):\n+    def test_bruteforce_parameters_and_data_range_improved(self):\n         c = GenericCRC(polynomial=\"16_ccitt\", start_value=False, final_xor=False,\n                        reverse_polynomial=False, reverse_all=False, lsb_first=False, little_endian=False)\n         inpt = \"101010101010101010000000111000000000000011100000001011010010110100000000111000000101001010000100000000000100111001111110010000000011011111111001001101100001100010100000000000111011110100010\"\n@@ -146,15 +238,15 @@\n         runs = 100\n         for i in range(0, runs):\n             t = time.time()\n-            result = c.guess_standard_parameters_and_datarange(c.str2arr(inpt), c.str2arr(vrfy_crc))\n+            result = c.bruteforce_parameters_and_data_range(c.str2arr(inpt), len(inpt)-len(vrfy_crc)-1)\n             t1 += time.time() - t\n-            #print(result, c.bit2str(c.crc(c.str2arr(inpt[result[1]:result[2]]))))\n-            self.assertEqual(result[0], 2)                          # Parameters = 2\n-            self.assertEqual(result[1], len(inpt) - 1 - 16 - 88)    # start of datarange\n-            self.assertEqual(result[2], len(inpt) - 1 - 16)         # end of datarange\n-            inpt = \"0\"+inpt if i%2 == 0 else \"1\"+inpt\n-        #print(\"Performance:\", t1\/runs)\n-        self.assertLess(t1\/runs, 0.1)   # Should be faster than 100ms in average\n+            # print(result, c.bit2str(c.crc(c.str2arr(inpt[result[1]:result[2]]))))\n+            self.assertEqual(result[0], 2)  # Parameters = 2\n+            self.assertEqual(result[1], len(inpt) - 1 - 16 - 88)  # start of datarange\n+            self.assertEqual(result[2], len(inpt) - 1 - 16)  # end of datarange\n+            inpt = \"0\" + inpt if i % 2 == 0 else \"1\" + inpt\n+        # print(\"Performance:\", t1\/runs)\n+        self.assertLess(t1 \/ runs, 0.1)  # Should be faster than 100ms in average\n \n     def test_adaptive_crc_calculation(self):\n         c = GenericCRC(polynomial=\"16_ccitt\", start_value=False, final_xor=False,\n@@ -171,4 +263,4 @@\n         c.start_value = crc1\n         crcx = c.crc(c.str2arr(delta))\n \n-        self.assertEqual(crcx, crc2)\n\\ No newline at end of file\n+        self.assertEqual(crcx, crc2)\ndiff --git a\/tests\/test_auto_assignments.py b\/tests\/test_auto_assignments.py\nindex 26eeccd..1be3c1b 100644\n--- a\/tests\/test_auto_assignments.py\n+++ b\/tests\/test_auto_assignments.py\n@@ -3,6 +3,7 @@\n \n from tests.utils_testing import get_path_for_data_file\n from urh import constants\n+from urh.awre import AutoAssigner\n from urh.signalprocessing.Encoding import Encoding\n from urh.signalprocessing.Message import Message\n from urh.signalprocessing.MessageType import MessageType\n@@ -97,24 +98,10 @@\n                              alice, alice, bob, bob, alice, alice, bob,\n                              bob, alice, alice, bob, bob, alice, bob]]\n \n-        proto1.auto_assign_participants([alice, bob])\n+        AutoAssigner.auto_assign_participants(proto1.messages, [alice, bob])\n         for i, message in enumerate(proto1.messages):\n             self.assertEqual(message.participant, excpected_partis[0][i])\n \n-        proto2.auto_assign_participants([alice, bob])\n+        AutoAssigner.auto_assign_participants(proto2.messages, [alice, bob])\n         for i, message in enumerate(proto2.messages):\n             self.assertEqual(message.participant, excpected_partis[1][i])\n-\n-    def test_assign_decodings(self):\n-        self.undecoded_protocol = ProtocolAnalyzer(None)\n-        with open(get_path_for_data_file(\"undecoded.txt\")) as f:\n-            for line in f:\n-                self.undecoded_protocol.messages.append(Message.from_plain_bits_str(line.replace(\"\\n\", \"\")))\n-\n-        self.undecoded_protocol.auto_assign_decodings(self.decodings)\n-\n-        for i, message in enumerate(self.undecoded_protocol.messages):\n-            if message.plain_hex_str[8:16] == \"9a7d9a7d\":\n-                self.assertEqual(message.decoder.name, \"DeWhitening Special\", msg=str(i))\n-            elif message.plain_hex_str[8:16] == \"67686768\":\n-                self.assertEqual(message.decoder.name, \"DeWhitening\", msg=str(i))\ndiff --git a\/tests\/test_awre.py b\/tests\/test_awre.py\ndeleted file mode 100644\nindex 7a87999..0000000\n--- a\/tests\/test_awre.py\n+++ \/dev\/null\n@@ -1,226 +0,0 @@\n-import unittest\n-\n-from tests.utils_testing import get_path_for_data_file\n-from urh.awre.CommonRange import CommonRange\n-from urh.awre.FormatFinder import FormatFinder\n-from urh.awre.components.Address import Address\n-from urh.awre.components.Component import Component\n-from urh.awre.components.Flags import Flags\n-from urh.awre.components.Length import Length\n-from urh.awre.components.Preamble import Preamble\n-from urh.awre.components.SequenceNumber import SequenceNumber\n-from urh.awre.components.Type import Type\n-from urh.signalprocessing.FieldType import FieldType\n-from urh.signalprocessing.Message import Message\n-from urh.signalprocessing.Participant import Participant\n-from urh.signalprocessing.ProtocoLabel import ProtocolLabel\n-from urh.signalprocessing.ProtocolAnalyzer import ProtocolAnalyzer\n-\n-\n-class TestAWRE(unittest.TestCase):\n-    def setUp(self):\n-        self.field_types = FieldType.default_field_types()\n-\n-        self.preamble_field_type = self.__field_type_with_function(self.field_types, FieldType.Function.PREAMBLE)\n-        self.sync_field_type = self.__field_type_with_function(self.field_types, FieldType.Function.SYNC)\n-        self.length_field_type = self.__field_type_with_function(self.field_types, FieldType.Function.LENGTH)\n-        self.sequence_number_field_type = self.__field_type_with_function(self.field_types,\n-                                                                          FieldType.Function.SEQUENCE_NUMBER)\n-        self.dst_address_field_type = self.__field_type_with_function(self.field_types, FieldType.Function.DST_ADDRESS)\n-        self.src_address_field_type = self.__field_type_with_function(self.field_types, FieldType.Function.SRC_ADDRESS)\n-\n-        self.protocol = ProtocolAnalyzer(None)\n-        with open(get_path_for_data_file(\"awre_consistent_addresses.txt\")) as f:\n-            for line in f:\n-                self.protocol.messages.append(Message.from_plain_bits_str(line.replace(\"\\n\", \"\")))\n-                self.protocol.messages[-1].message_type = self.protocol.default_message_type\n-\n-        # Assign participants\n-        alice = Participant(\"Alice\", \"A\")\n-        bob = Participant(\"Bob\", \"B\")\n-        alice_indices = {1, 2, 5, 6, 9, 10, 13, 14, 17, 18, 20, 22, 23, 26, 27, 30, 31, 34, 35, 38, 39, 41}\n-        for i, message in enumerate(self.protocol.messages):\n-            message.participant = alice if i in alice_indices else bob\n-\n-        self.participants = [alice, bob]\n-\n-        self.zero_crc_protocol = ProtocolAnalyzer(None)\n-        with open(get_path_for_data_file(\"awre_zeroed_crc.txt\")) as f:\n-            for line in f:\n-                self.zero_crc_protocol.messages.append(Message.from_plain_bits_str(line.replace(\"\\n\", \"\")))\n-                self.zero_crc_protocol.messages[-1].message_type = self.protocol.default_message_type\n-\n-        for i, message in enumerate(self.zero_crc_protocol.messages):\n-            message.participant = alice if i in alice_indices else bob\n-\n-    @staticmethod\n-    def __field_type_with_function(field_types, function) -> FieldType:\n-        return next(ft for ft in field_types if ft.function == function)\n-\n-    def test_build_component_order(self):\n-        expected_default = [Preamble(fieldtypes=[]), Length(fieldtypes=[], length_cluster=None),\n-                            Address(fieldtypes=[], xor_matrix=None), SequenceNumber(fieldtypes=[]), Type(), Flags()]\n-\n-        format_finder = FormatFinder(self.protocol)\n-\n-        for expected, actual in zip(expected_default, format_finder.build_component_order()):\n-            assert type(expected) == type(actual)\n-\n-        expected_swapped = [Preamble(fieldtypes=[]), Address(fieldtypes=[], xor_matrix=None),\n-                            Length(fieldtypes=[], length_cluster=None), SequenceNumber(fieldtypes=[]), Type(), Flags()]\n-        format_finder.length_component.priority = 2\n-        format_finder.address_component.priority = 1\n-\n-        for expected, actual in zip(expected_swapped, format_finder.build_component_order()):\n-            assert type(expected) == type(actual)\n-\n-        # Test duplicate Priority\n-        format_finder.sequence_number_component.priority = 4\n-        with self.assertRaises(ValueError) as context:\n-            format_finder.build_component_order()\n-            self.assertTrue('Duplicate priority' in context.exception)\n-        format_finder.sequence_number_component.priority = 3\n-        self.assertTrue(format_finder.build_component_order())\n-\n-    def test_format_finding_rwe(self):\n-        preamble_start, preamble_end = 0, 31\n-        sync_start, sync_end = 32, 63\n-        length_start, length_end = 64, 71\n-        ack_address_start, ack_address_end = 72, 95\n-        dst_address_start, dst_address_end = 88, 111\n-        src_address_start, src_address_end = 112, 135\n-\n-        preamble_label = ProtocolLabel(name=self.preamble_field_type.caption, field_type=self.preamble_field_type,\n-                                       start=preamble_start, end=preamble_end, color_index=0)\n-        sync_label = ProtocolLabel(name=self.sync_field_type.caption, field_type=self.sync_field_type,\n-                                   start=sync_start, end=sync_end, color_index=1)\n-        length_label = ProtocolLabel(name=self.length_field_type.caption, field_type=self.length_field_type,\n-                                     start=length_start, end=length_end, color_index=2)\n-        ack_address_label = ProtocolLabel(name=self.dst_address_field_type.caption,\n-                                          field_type=self.dst_address_field_type,\n-                                          start=ack_address_start, end=ack_address_end, color_index=3)\n-        dst_address_label = ProtocolLabel(name=self.dst_address_field_type.caption,\n-                                          field_type=self.dst_address_field_type,\n-                                          start=dst_address_start, end=dst_address_end, color_index=4)\n-        src_address_label = ProtocolLabel(name=self.src_address_field_type.caption,\n-                                          field_type=self.src_address_field_type,\n-                                          start=src_address_start, end=src_address_end, color_index=5)\n-\n-        ff = FormatFinder(protocol=self.protocol, participants=self.participants, field_types=self.field_types)\n-        ff.perform_iteration()\n-\n-        self.assertIn(preamble_label, self.protocol.default_message_type)\n-        self.assertIn(sync_label, self.protocol.default_message_type)\n-        self.assertIn(length_label, self.protocol.default_message_type)\n-        self.assertIn(dst_address_label, self.protocol.default_message_type)\n-        self.assertIn(src_address_label, self.protocol.default_message_type)\n-\n-        self.assertEqual(len(self.protocol.message_types), 2)\n-        self.assertEqual(self.protocol.message_types[1].name, \"ack\")\n-        self.assertIn(ack_address_label, self.protocol.message_types[1])\n-\n-        ack_messages = (1, 3, 5, 7, 9, 11, 13, 15, 17, 20)\n-        for i, msg in enumerate(self.protocol.messages):\n-            if i in ack_messages:\n-                self.assertEqual(msg.message_type.name, \"ack\", msg=i)\n-            else:\n-                self.assertEqual(msg.message_type.name.lower(), \"default\", msg=i)\n-\n-    def test_format_finding_rwe_zeroed_crc(self):\n-        ff = FormatFinder(self.zero_crc_protocol, self.participants)\n-        ff.perform_iteration()\n-\n-    def test_format_finding_enocean(self):\n-        enocean_protocol = ProtocolAnalyzer(None)\n-        with open(get_path_for_data_file(\"enocean_bits.txt\")) as f:\n-            for line in f:\n-                enocean_protocol.messages.append(Message.from_plain_bits_str(line.replace(\"\\n\", \"\")))\n-                enocean_protocol.messages[-1].message_type = enocean_protocol.default_message_type\n-\n-        preamble_start = 3\n-        preamble_end = 10\n-        sof_start = 11\n-        sof_end = 14\n-\n-        preamble_label = ProtocolLabel(name=self.preamble_field_type.caption, field_type=self.preamble_field_type,\n-                                       start=preamble_start, end=preamble_end, color_index=0)\n-        sync_label = ProtocolLabel(name=self.sync_field_type.caption, field_type=self.sync_field_type,\n-                                   start=sof_start, end=sof_end, color_index=1)\n-\n-        ff = FormatFinder(enocean_protocol, self.participants, field_types=self.field_types)\n-        ff.perform_iteration()\n-\n-        self.assertEqual(len(enocean_protocol.message_types), 1)\n-\n-        self.assertIn(preamble_label, enocean_protocol.default_message_type)\n-        self.assertIn(sync_label, enocean_protocol.default_message_type)\n-        self.assertTrue(\n-            not any(lbl.name == self.length_field_type.caption for lbl in enocean_protocol.default_message_type))\n-        self.assertTrue(not any(\"address\" in lbl.name.lower() for lbl in enocean_protocol.default_message_type))\n-\n-    def test_address_candidate_finding(self):\n-        fh = CommonRange.from_hex\n-\n-        candidates_participant_1 = [fh('1b6033'), fh('1b6033fd57'), fh('701b603378e289'), fh('20701b603378e289000c62')]\n-        candidates_participant_2 = [fh('1b603300'), fh('78e289757e'), fh('7078e2891b6033000000'),\n-                                    fh('207078e2891b6033000000')]\n-\n-        expected_address1 = '1b6033'\n-        expected_address2 = '78e289'\n-\n-        # print(Address.find_candidates(candidates_participant_1))\n-        # print(Address.find_candidates(candidates_participant_2))\n-        combined = candidates_participant_1 + candidates_participant_2\n-        combined.sort(key=len)\n-        score = Address.find_candidates(combined)\n-        # print(score)\n-        # print(\"=================\")\n-        # print(sorted(score, key=lambda k: score[k], reverse=True))\n-        # print()\n-\n-        highscored = sorted(score, key=lambda k: score[k], reverse=True)[:2]\n-        self.assertIn(expected_address1, highscored)\n-        self.assertIn(expected_address2, highscored)\n-\n-    def test_message_type_assign(self):\n-        clusters = {\"ack\": {1, 17, 3, 20, 5, 7, 9, 11, 13, 15}, \"Default\": {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19}}\n-        com = Component(messagetypes=self.protocol.message_types)\n-        com.assign_messagetypes(self.protocol.messages, clusters)\n-\n-        for clustername, msg_indices in clusters.items():\n-            for msg in msg_indices:\n-                self.assertEqual(self.protocol.messages[msg].message_type.name, clustername, msg=str(msg))\n-\n-        # do it again and ensure nothing changes\n-        com.assign_messagetypes(self.protocol.messages, clusters)\n-        for clustername, msg_indices in clusters.items():\n-            for msg in msg_indices:\n-                self.assertEqual(self.protocol.messages[msg].message_type.name, clustername, msg=str(msg))\n-\n-    def test_choose_candidate(self):\n-\n-        candidates1 = {'78e289': 8, '207078e2891b6033000000': 1, '57': 1, '20701b603378e289000c62': 1, '1b6033fd57': 1,\n-                       '1b603300': 3, '7078e2891b6033000000': 2, '78e289757e': 1, '1b6033': 14, '701b603378e289': 2}\n-        candidates2 = {'1b603300': 4, '701b603378e289': 2, '20701b603378e289000c62': 1, '000': 3, '0000': 19,\n-                       '1b6033': 11, '78e2890000': 1, '00': 4, '7078e2891b6033000000': 2, '207078e2891b6033000000': 1,\n-                       '78e289000': 1, '78e289': 7, '0': 7, '1b60330000': 3}\n-\n-        self.assertEqual(next(Address.choose_candidate_pair(candidates1)), (\"1b6033\", \"78e289\"))\n-        self.assertEqual(next(Address.choose_candidate_pair(candidates2)), (\"1b6033\", \"78e289\"))\n-\n-    def test_format_finding_without_participants(self):\n-        for msg in self.zero_crc_protocol.messages:\n-            msg.participant = None\n-\n-        ff = FormatFinder(self.zero_crc_protocol, [])\n-        ff.perform_iteration()\n-\n-    def test_assign_participant_addresses(self):\n-        clusters = {\"ack\": {1, 17, 3, 20, 5, 7, 9, 11, 13, 15}, \"default\": {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 19}}\n-        com = Component(messagetypes=self.protocol.message_types)\n-        com.assign_messagetypes(self.protocol.messages, clusters)\n-\n-        Address.assign_participant_addresses(self.protocol.messages, self.participants, (\"78e289\", \"1b6033\"))\n-\n-        self.assertEqual(self.participants[0].address_hex, \"78e289\")\n-        self.assertEqual(self.participants[1].address_hex, \"1b6033\")\ndiff --git a\/tests\/test_simulator.py b\/tests\/test_simulator.py\nindex cc286ce..ff7756a 100644\n--- a\/tests\/test_simulator.py\n+++ b\/tests\/test_simulator.py\n@@ -261,7 +261,7 @@\n         self.assertTrue(os.path.isfile(file_name))\n \n     def __demodulate(self, connection: socket.socket):\n-        connection.settimeout(0.1)\n+        connection.settimeout(0.5)\n         time.sleep(self.TIMEOUT)\n \n         total_data = []\ndiff --git a\/tests\/test_simulator_dialog.py b\/tests\/test_simulator_dialog.py\nindex 97f7b16..2d8591a 100644\n--- a\/tests\/test_simulator_dialog.py\n+++ b\/tests\/test_simulator_dialog.py\n@@ -26,8 +26,6 @@\n         simulator_manager.add_items([msg1, msg2], 0, simulator_manager.rootItem)\n         simulator_manager.add_label(5, 15, \"test\", parent_item=simulator_manager.rootItem.children[0])\n \n-        print(self.form.simulator_tab_controller.simulator_config.tx_needed)\n-\n         self.dialog = SimulatorDialog(self.form.simulator_tab_controller.simulator_config,\n                                       self.form.generator_tab_controller.modulators,\n                                       self.form.simulator_tab_controller.sim_expression_parser,\n",
    "languageGrammar" : "Markdown",
    "tags" : [

    ],
    "uuid" : "3A555965-6A8F-48FD-AE5C-566562AEC9FD",
    "created_at" : "2019-11-30T13:14:48Z",
    "modified_at" : "2019-11-30T13:14:48Z",
    "modified_latitude" : 0,
    "modified_longitude" : 0,
    "flagged" : false
  },
  {
    "modified_at" : "2019-12-06T09:08:29Z",
    "created_longitude" : 0,
    "uuid" : "9E5C96A2-97BE-48FF-BDE7-A26A3FAA85DA",
    "modified_latitude" : 0,
    "content" : "var =1",
    "tags" : [

    ],
    "modified_longitude" : 0,
    "languageGrammar" : "Markdown",
    "created_latitude" : 0,
    "accessed_at" : "2019-12-06T09:08:10Z",
    "folder" : 0,
    "flagged" : false,
    "created_at" : "2019-12-06T09:08:10Z"
  },
  {
    "created_longitude" : 0,
    "created_latitude" : 0,
    "uuid" : "5D20D79F-BF19-4426-955B-EEBA0793CAFB",
    "folder" : 0,
    "created_at" : "2019-12-06T09:08:29Z",
    "modified_longitude" : 0,
    "languageGrammar" : "JavaScript",
    "content" : "\/\/ \/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\", \"\", \"\",…];\n\nvar p = Prompt.create();\np.title = \"\";\np.message = \"\";\nfor (i = 0; i < lists.length; i++) {\n  p.addButton(lists[i]);\n  p.addTextField(\"fieldName\", \"Label\", \"\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\/\/ Prompt\n\/* ——————— *\/\nvar lists = [“”, “”, “”,…];\n\nvar p = Prompt.create();\np.title = “”;\np.message = “”;\nfor (var list of lists) {\n  p.addTextField(“fieldName”, “Label”, “”);\n  p.addTextView(“fieldName”, “Label”, “”,{“height”:50,”keyboard”:”default”);\n  p.addSwitch(“fieldName”, “Label”, false);\n  p.addDatePicker(“name”, “Label”, new Date(), {“mode”:”dateAndTime”});\n  p.addButton(list);\n  p.addButton(“Go”);\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\/\/ Prompt\n\/* ——————— *\/\nvar lists = [“”, “”, “”,…];\n\nvar p = Prompt.create();\np.title = “”;\np.message = “”;\nfor (var list of lists) {\n  p.addTextField(“fieldName”, “Label”, “”);\n  p.addTextView(“fieldName”, “Label”, “”,{“height”:50,”keyboard”:”default”);\n  p.addSwitch(“fieldName”, “Label”, false);\n  p.addDatePicker(“name”, “Label”, new Date(), {“mode”:”dateAndTime”});\n  p.addButton(list);\n  p.addButton(“Go”);\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\/\/ Prompt\n\/* ——————— *\/\nvar lists = [“”, “”, “”,…];\n\nvar p = Prompt.create();\np.title = “”;\np.message = “”;\nfor (var list of lists) {\n  p.addTextField(“fieldName”, “Label”, “”);\n  p.addTextView(“fieldName”, “Label”, “”,{“height”:50,”keyboard”:”default”);\n  p.addSwitch(“fieldName”, “Label”, false);\n  p.addDatePicker(“name”, “Label”, new Date(), {“mode”:”dateAndTime”});\n  p.addButton(list);\n  p.addButton(“Go”);\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}\/\/ Prompt\n\/* ——————— *\/\nvar lists = [“”, “”, “”,…];\n\nvar p = Prompt.create();\np.title = “”;\np.message = “”;\nfor (var list of lists) {\n  p.addTextField(“fieldName”, “Label”, “”);\n  p.addTextView(“fieldName”, “Label”, “”,{“height”:50,”keyboard”:”default”);\n  p.addSwitch(“fieldName”, “Label”, false);\n  p.addDatePicker(“name”, “Label”, new Date(), {“mode”:”dateAndTime”});\n  p.addButton(list);\n  p.addButton(“Go”);\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}",
    "modified_latitude" : 0,
    "tags" : [
      "js"
    ],
    "flagged" : false,
    "modified_at" : "2019-12-08T04:44:55Z",
    "accessed_at" : "2019-12-12T08:39:55Z"
  },
  {
    "created_at" : "2019-12-06T19:43:56Z",
    "tags" : [

    ],
    "uuid" : "8E98FA74-163F-4E86-917D-34E8A040109F",
    "modified_longitude" : 0,
    "accessed_at" : "2019-12-06T19:43:56Z",
    "folder" : 0,
    "flagged" : false,
    "content" : "Merge pull request #35 from gitter-badger\/gitter-badge\n\nAdd a Gitter chat badge to README.md\n\nhttps:\/\/github.com\/certificate-helper\/TLS-Inspector\/commit\/63e111d10a0adf5a2015320ff3ef546636350676\n\n",
    "languageGrammar" : "Markdown",
    "modified_latitude" : 0,
    "modified_at" : "2019-12-06T19:43:56Z",
    "created_latitude" : 0,
    "created_longitude" : 0
  },
  {
    "flagged" : false,
    "created_at" : "2019-12-09T13:33:49Z",
    "accessed_at" : "2019-12-12T08:39:52Z",
    "tags" : [

    ],
    "modified_longitude" : 0,
    "languageGrammar" : "Markdown",
    "modified_latitude" : 0,
    "uuid" : "50C71CD6-AE56-48C6-A4FE-28ED372A650B",
    "content" : "I\n",
    "modified_at" : "2019-12-09T13:33:56Z",
    "folder" : 0,
    "created_longitude" : 0,
    "created_latitude" : 0
  },
  {
    "created_at" : "2019-12-09T14:12:32Z",
    "uuid" : "25B7D578-2BDF-4F4B-91F4-2EB10CD7FBAF",
    "tags" : [

    ],
    "content" : "[SSL-check: crawl your HTTPS website and find unsecure content](https:\/\/www.jitbit.com\/sslcheck\/)\n\nhttps:\/\/www.jitbit.com\/sslcheck\/",
    "modified_latitude" : 38.598475525060834,
    "languageGrammar" : "Markdown",
    "modified_at" : "2019-12-12T08:42:48Z",
    "modified_longitude" : -90.059201198165852,
    "folder" : 0,
    "flagged" : false,
    "accessed_at" : "2019-12-12T08:42:30Z",
    "created_longitude" : 0,
    "created_latitude" : 0
  },
  {
    "modified_longitude" : -90.063565074458296,
    "languageGrammar" : "Markdown",
    "accessed_at" : "2019-12-13T00:33:20Z",
    "uuid" : "1C6A79F1-04CB-4313-8AAB-B3AE2A870CF6",
    "created_at" : "2019-12-12T08:37:28Z",
    "folder" : 0,
    "modified_latitude" : 38.603798508496965,
    "created_longitude" : 0,
    "modified_at" : "2019-12-13T00:34:33Z",
    "tags" : [

    ],
    "content" : "\n# Vuls: VULnerability Scanner\n\n[![Slack](https:\/\/img.shields.io\/badge\/slack-join-blue.svg)](http:\/\/goo.gl\/forms\/xm5KFo35tu)\n[![License](https:\/\/img.shields.io\/github\/license\/future-architect\/vuls.svg?style=flat-square)](https:\/\/github.com\/future-architect\/vuls\/blob\/master\/LICENSE)\n[![Build Status](https:\/\/travis-ci.org\/future-architect\/vuls.svg?branch=master)](https:\/\/travis-ci.org\/future-architect\/vuls)\n[![Go Report Card](https:\/\/goreportcard.com\/badge\/github.com\/future-architect\/vuls)](https:\/\/goreportcard.com\/report\/github.com\/future-architect\/vuls)\n[![Contributors](https:\/\/img.shields.io\/github\/contributors\/future-architect\/vuls.svg)](https:\/\/github.com\/future-architect\/vuls\/graphs\/contributors)\n\n![Vuls-logo](img\/vuls_logo.png)\n\nVulnerability scanner for Linux\/FreeBSD, agentless, written in golang.\nWe have a slack team. [Join slack team](http:\/\/goo.gl\/forms\/xm5KFo35tu)\nTwitter: [@vuls_en](https:\/\/twitter.com\/vuls_en)\n\n![Vuls-Abstract](img\/vuls-abstract.png)\n\n![Vulsrepo](https:\/\/raw.githubusercontent.com\/usiusi360\/vulsrepo\/master\/gallery\/demo.gif)\n\n[![asciicast](https:\/\/asciinema.org\/a\/3y9zrf950agiko7klg8abvyck.png)](https:\/\/asciinema.org\/a\/3y9zrf950agiko7klg8abvyck)\n\n![Vuls-slack](img\/vuls-slack-en.png)\n\n----\n\n## NEWS\n\n| Version     | Main Feature |  Date |\n|:------------|:---------------------------------|:--------------------|\n| [v0.8.0](https:\/\/github.com\/future-architect\/vuls\/releases\/tag\/v0.8.0) | secret | Coming soon |\n| [v0.7.0](https:\/\/github.com\/future-architect\/vuls\/releases\/tag\/v0.7.0) | WordPress Vulnerability Scan | 2019\/Apr\/8 |\n| [v0.6.3](https:\/\/github.com\/future-architect\/vuls\/releases\/tag\/v0.6.3) | GitHub Integration | 2019\/Feb\/20 |\n| [v0.6.2](https:\/\/github.com\/future-architect\/vuls\/releases\/tag\/v0.6.2) | Add US-CERT\/JPCERT Alerts as VulnSrc | 2019\/Jan\/23 |\n| [v0.6.1](https:\/\/github.com\/future-architect\/vuls\/releases\/tag\/v0.6.1) | BugFix | 2018\/Nov\/16 |\n| [v0.6.0](https:\/\/github.com\/future-architect\/vuls\/releases\/tag\/v0.6.0) | Add ExploitDB as VulnSrc | 2018\/Nov\/3 |\n| [v0.5.0](https:\/\/github.com\/future-architect\/vuls\/releases\/tag\/v0.5.0) | Scan accuracy improvement | 2018\/Aug\/27 |\n\n----\n\n## Abstract\n\nFor a system administrator, having to perform security vulnerability analysis and software update on a daily basis can be a burden.\nTo avoid downtime in a production environment, it is common for a system administrator to choose not to use the automatic update option provided by the package manager and to perform update manually.\nThis leads to the following problems.\n\n- The system administrator will have to constantly watch out for any new vulnerabilities in NVD (National Vulnerability Database) or similar databases.\n- It might be impossible for the system administrator to monitor all the software if there are a large number of software packages installed in the server.\n- It is expensive to perform analysis to determine the servers affected by new vulnerabilities. The possibility of overlooking a server or two during analysis is there.\n\nVuls is a tool created to solve the problems listed above. It has the following characteristics.\n\n- Informs users of the vulnerabilities that are related to the system.\n- Informs users of the servers that are affected.\n- Vulnerability detection is done automatically to prevent any oversight.\n- A report is generated on a regular basis using CRON or other methods. to manage vulnerability.\n\n![Vuls-Motivation](img\/vuls-motivation.png)\n\n----\n\n## Main Features\n\n### Scan for any vulnerabilities in Linux\/FreeBSD Server\n\n[Supports major Linux\/FreeBSD](https:\/\/vuls.io\/docs\/en\/supported-os.html)\n\n- Alpine, Amazon Linux, CentOS, Debian, Oracle Linux, Raspbian, RHEL, SUSE Enterprise Linux, and Ubuntu\n- FreeBSD\n- Cloud, on-premise, Docker Container and Docker Image\n\n### High-quality scan\n\nVuls uses multiple vulnerability databases\n\n- [NVD](https:\/\/nvd.nist.gov\/)\n- [JVN(Japanese)](http:\/\/jvndb.jvn.jp\/apis\/myjvn\/)\n- OVAL\n  - [Debian](https:\/\/www.debian.org\/security\/oval\/)\n  - [Oracle Linux](https:\/\/linux.oracle.com\/security\/oval\/)\n  - [RedHat](https:\/\/www.redhat.com\/security\/data\/oval\/)\n  - [SUSE](http:\/\/ftp.suse.com\/pub\/projects\/security\/oval\/)\n  - [Ubuntu](https:\/\/people.canonical.com\/~ubuntu-security\/oval\/)\n\n- [Alpine-secdb](https:\/\/git.alpinelinux.org\/cgit\/alpine-secdb\/)\n- [Debian Security Bug Tracker](https:\/\/security-tracker.debian.org\/tracker\/)\n- [Red Hat Security Advisories](https:\/\/access.redhat.com\/security\/security-updates\/)\n- Commands (yum, zypper, and pkg-audit)\n  - RHSA\/ALAS\/ELSA\/FreeBSD-SA\n- [Exploit Database](https:\/\/www.exploit-db.com\/)\n- [US-CERT](https:\/\/www.us-cert.gov\/ncas\/alerts)\n- [JPCERT](http:\/\/www.jpcert.or.jp\/at\/2019.html)\n- [WPVulnDB](https:\/\/wpvulndb.com\/api)\n- [Node.js Security Working Group](https:\/\/github.com\/nodejs\/security-wg)\n- [Ruby Advisory Database](https:\/\/github.com\/rubysec\/ruby-advisory-db)\n- [Safety DB(Python)](https:\/\/github.com\/pyupio\/safety-db)\n- [PHP Security Advisories Database](https:\/\/github.com\/FriendsOfPHP\/security-advisories)\n- [RustSec Advisory Database](https:\/\/github.com\/RustSec\/advisory-db)\n- Changelog\n\n### Scan mode\n\n[Fast Scan](https:\/\/vuls.io\/docs\/en\/architecture-fast-scan.html)\n\n- Scan without root privilege, no dependencies\n- Almost no load on the scan target server\n- Offline mode scan with no internet access. (CentOS, Debian, Oracle Linux, Red Hat, and Ubuntu)\n\n[Fast Root Scan](https:\/\/vuls.io\/docs\/en\/architecture-fast-root-scan.html)\n\n- Scan with root privilege\n- Almost no load on the scan target server\n- Detect processes affected by update using yum-ps (Amazon Linux, CentOS, Oracle Linux, and RedHat)\n- Detect processes which updated before but not restarting yet using checkrestart of debian-goodies (Debian and Ubuntu)\n- Offline mode scan with no internet access. (CentOS, Debian, Oracle Linux, Red Hat, and Ubuntu)\n\n### [Remote, Local scan mode, Server mode](https:\/\/vuls.io\/docs\/en\/architecture-remote-local.html)\n\n[Remote scan mode](https:\/\/vuls.io\/docs\/en\/architecture-remote-scan.html)\n\n- User is required to only set up one machine that is connected to other target servers via SSH\n\n[Local scan mode](https:\/\/vuls.io\/docs\/en\/architecture-local-scan.html)\n\n- If you don't want the central Vuls server to connect to each server by SSH, you can use Vuls in the Local Scan mode.\n\n[Server mode](https:\/\/vuls.io\/docs\/en\/usage-server.html)\n\n- First, start Vuls in server mode and listen as an HTTP server.\n- Next, issue a command on the scan target server to collect software information. Then send the result to Vuls Server via HTTP. You receive the scan results as JSON format.\n- No SSH needed, No Scanner needed. Only issuing Linux commands directory on the scan target server.\n\n### **Dynamic** Analysis\n\n- It is possible to acquire the state of the server by connecting via SSH and executing the command.\n- Vuls warns when the scan target server was updated the kernel etc. but not restarting it.\n\n### **Static** Analysis\n\nVuls v0.8.0 can scan Docker images using [knqyf263\/trivy](https:\/\/github.com\/knqyf263\/trivy).\nFollowing Registry supported.\n\n- ECR\n- GCR\n- Local Image\n\nFor details, see [Scan docker image](https:\/\/vuls.io\/docs\/en\/tutorial-scan-docker-image.html)\n\n### Scan vulnerabilities of non-OS-packages\n\n- Libraries of programming language\n- Self-compiled software\n- Network Devices\n\nVuls has some options to detect the vulnerabilities\n\n- [Lockfile based Scan](https:\/\/vuls.io\/docs\/en\/usage-scan-non-os-packages.html#library-vulns-scan)\n- [GitHub Integration](https:\/\/vuls.io\/docs\/en\/usage-scan-non-os-packages.html#usage-integrate-with-github-security-alerts)\n- [Common Platform Enumeration (CPE) based Scan](https:\/\/vuls.io\/docs\/en\/usage-scan-non-os-packages.html#cpe-scan)\n- [OWASP Dependency Check ](https:\/\/vuls.io\/docs\/en\/usage-scan-non-os-packages.html#usage-integrate-with-owasp-dependency-check-to-automatic-update-when-the-libraries-are-updated-experimental)\n\n## Scan WordPress core, themes, plugins\n\n- [Scan WordPress](https:\/\/vuls.io\/docs\/en\/usage-scan-wordpress.html)\n\n## MISC\n\n- Nondestructive testing\n- Pre-authorization is *NOT* necessary before scanning on AWS\n  - Vuls works well with Continuous Integration since tests can be run every day. This allows you to find vulnerabilities very quickly.\n- Auto-generation of configuration file template\n  - Auto-detection of servers set using CIDR, generate configuration file template\n- Email and Slack notification is possible (supports Japanese language)\n- Scan result is viewable on accessory software, TUI Viewer in a terminal or Web UI ([VulsRepovar ](https:\/\/github.com\/future-architect\/vulsrepo)).\n\n----\n\n## What Vuls Doesn't Do\n\n- Vuls doesn't update the vulnerable packages.\n\n----\n\n## Document\n\nFor more information such as Installation, Tutorial, Usage, visit [vuls.io](https:\/\/vuls.io\/)\n[日本語翻訳ドキュメント](https:\/\/vuls.io\/ja\/)\n\n----\n\n## Authors\n\nkotakanbe ([@kotakanbe](https:\/\/twitter.com\/kotakanbe)) created vuls and [these fine people](https:\/\/github.com\/future-architect\/vuls\/graphs\/contributors) have contributed.\n\n----\n\n## Change Log\n\nPlease see [CHANGELOG](https:\/\/github.com\/future-architect\/vuls\/blob\/master\/CHANGELOG.md).\n\n----\n\n## Stargazers over time\n\n[![Stargazers over time](https:\/\/starcharts.herokuapp.com\/future-architect\/vuls.svg)](https:\/\/starcharts.herokuapp.com\/future-architect\/vuls)\n\n-----;\n\n## License\n\nPlease see [LICENSE](https:\/\/github.com\/future-architect\/vuls\/blob\/master\/LICENSE).\n",
    "created_latitude" : 0,
    "flagged" : false
  },
  {
    "modified_at" : "2019-12-12T08:38:37Z",
    "created_at" : "2019-12-12T08:38:37Z",
    "content" : "\/\/ ",
    "uuid" : "B15547B5-9737-4331-A50A-6BCA8FB7F3E7",
    "tags" : [
      "js"
    ],
    "modified_longitude" : -90.048203319395,
    "languageGrammar" : "JavaScript",
    "created_longitude" : -90.048203319395,
    "accessed_at" : "2019-12-12T08:39:49Z",
    "modified_latitude" : 38.597424086219256,
    "flagged" : false,
    "folder" : 0,
    "created_latitude" : 38.597424086219256
  },
  {
    "created_latitude" : 38.590977934985276,
    "created_longitude" : -90.052773795352763,
    "folder" : 0,
    "modified_longitude" : -90.052773795352763,
    "modified_latitude" : 38.590977934985276,
    "languageGrammar" : "Markdown",
    "content" : "",
    "modified_at" : "2019-12-12T08:42:22Z",
    "created_at" : "2019-12-12T08:41:41Z",
    "uuid" : "DBA047BF-A8A1-44C9-AC57-14E8C155BF98",
    "tags" : [

    ],
    "accessed_at" : "2019-12-12T08:41:41Z",
    "flagged" : false
  },
  {
    "accessed_at" : "2019-12-13T00:36:00Z",
    "modified_latitude" : 38.596243710665732,
    "uuid" : "3EECA128-96D7-4A5E-9F19-D9B8D3855E38",
    "created_at" : "2019-12-13T00:36:00Z",
    "created_latitude" : 38.596243710665732,
    "tags" : [

    ],
    "flagged" : false,
    "folder" : 0,
    "languageGrammar" : "Markdown",
    "created_longitude" : -90.051190965430024,
    "content" : " ",
    "modified_longitude" : -90.051190965430024,
    "modified_at" : "2019-12-13T00:36:09Z"
  },
  {
    "modified_longitude" : -90.047029695551515,
    "accessed_at" : "2019-12-16T04:47:25Z",
    "created_latitude" : 38.59506858038479,
    "modified_at" : "2019-12-16T04:47:25Z",
    "created_at" : "2019-12-16T04:47:22Z",
    "folder" : 0,
    "modified_latitude" : 38.59506858038479,
    "flagged" : false,
    "languageGrammar" : "Markdown",
    "tags" : [

    ],
    "uuid" : "6317536F-1873-4F62-95ED-AB11D9460BBF",
    "created_longitude" : -90.047029695551515,
    "content" : "http:\/\/192.168.1.3:50044\/README.md"
  },
  {
    "tags" : [

    ],
    "modified_at" : "2019-12-16T04:47:40Z",
    "modified_latitude" : 0,
    "languageGrammar" : "Markdown",
    "accessed_at" : "2019-12-16T04:47:40Z",
    "created_latitude" : 0,
    "uuid" : "4147A725-3505-4B62-B2B4-0CFBF33EA3C1",
    "created_longitude" : 0,
    "content" : "# Linuxbrew (un)installer\n\n## Install Homebrew\n\n```bash\nsh -c \"$(curl -fsSL https:\/\/raw.githubusercontent.com\/Linuxbrew\/install\/master\/install.sh)\"\n```\n\nMore installation information and options at https:\/\/docs.brew.sh\/Homebrew-on-Linux#install\n\n### Linux and Windows 10 Subsystem for Linux\n\nInstall Homebrew on Linux and Windows 10 Subsystem for Linux: https:\/\/docs.brew.sh\/Linuxbrew.\n\n## Uninstall Homebrew\n\n```bash\n\/usr\/bin\/ruby -e \"$(curl -fsSL https:\/\/raw.githubusercontent.com\/Linuxbrew\/install\/master\/uninstall)\"\n```\n\nDownload the uninstall script and run `.\/uninstall --help` to view more uninstall options.\n",
    "folder" : 0,
    "created_at" : "2019-12-16T04:47:40Z",
    "flagged" : false,
    "modified_longitude" : 0
  },
  {
    "flagged" : false,
    "languageGrammar" : "JavaScript",
    "created_longitude" : -90.048346666586625,
    "modified_latitude" : 38.597185437365951,
    "folder" : 0,
    "accessed_at" : "2019-12-16T04:47:47Z",
    "uuid" : "A709AC10-06D4-4135-9608-13F9EBDBB068",
    "modified_at" : "2019-12-16T04:47:47Z",
    "modified_longitude" : -90.048346666586625,
    "content" : "\/\/ var =\/\/ Prompt\n\/* --------------------- *\/\nvar lists = [\"\", \"\", \"\",…];\n\nvar p = Prompt.create();\np.title = \"\";\np.message = \"\";\nfor (i = 0; i < lists.length; i++) {\n  p.addButton(lists[i]);\n  p.addTextField(\"fieldName\", \"Label\", \"\");\n}\nvar con = p.show();\n\nif (con) {\n  \/\/ action goes here\n}\nelse {\n  context.cancel();\n}",
    "created_at" : "2019-12-16T04:47:47Z",
    "created_latitude" : 38.597185437365951,
    "tags" : [
      "js"
    ]
  }
]